
package cpq.enterprisequotingendpoint_0_5;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.DataQuality;
import routines.Relational;
import routines.DataQualityDependencies;
import routines.Mathematical;
import routines.SQLike;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.DQTechnical;
import routines.StringHandling;
import routines.DataMasking;
import routines.TalendDate;
import routines.DqStringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of EQGetCustomerInfo_1_tJava_2
	//import java.util.List;

	//the import part of EQGetAllCustomers_1_tJava_3
	//import java.util.List;

	//the import part of EQGetBillTo_1_tJava_1
	//import java.util.List;

	//the import part of EQGetChassisFCM_1_tJava_2
	//import java.util.List;

	//the import part of EQGetChassisPNs_1_tJava_2
	//import java.util.List;

	//the import part of EQGetCountertopPNs_1_tJava_2
	//import java.util.List;

	//the import part of EQGetCTSkinPn_1_tJava_2
	//import java.util.List;

	//the import part of EQGetCTSolidSurfacePn_1_tJava_2
	//import java.util.List;

	//the import part of EQGetDwgNo_1_tJava_2
	//import java.util.List;

	//the import part of EQGetItemDesc_1_tJava_2
	//import java.util.List;

	//the import part of EQGetParentLine_1_tJava_2
	//import java.util.List;

	//the import part of EQGetPriceGroupTier_1_tJava_2
	//import java.util.List;

	//the import part of EQGetProdOrders_1_tJava_2
	//import java.util.List;

	//the import part of EQGetRRVendorNo_1_tJava_2
	//import java.util.List;

	//the import part of EQGetSecondaryPriceGroup_1_tJava_2
	//import java.util.List;

	//the import part of EQGetSellTo_1_tJava_1
	//import java.util.List;

	//the import part of EQGetUOMConv_1_tJava_2
	//import java.util.List;

	//the import part of EQGetValidItem_1_tJava_2
	//import java.util.List;

	//the import part of EQGetVariantState_1_tJava_2
	//import java.util.List;

	//the import part of EQGetSkinORPart_1_tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: enterpriseQuotingEndpoint Purpose: <br>
 * Description: 0.1 -- (TCLOUD 0.1) endpoint to query CPQ in Azure DW
0.2 -- (TCLOUD 0.1.1) correcting pathing for URL
0.3 -- (TCLOUD 0.1.2) adding new lookup for SKIN category
0.4 -- (TCLOUD 0.1.3) V8 to dev
0.5 -- (TCLOUD 0.1.4) V8 to prd <br>
 * @author Irvin, Matt
 * @version 8.0.1.20221116_1301-patch
 * @status 
 */
public class enterpriseQuotingEndpoint implements TalendJob {
	static {System.setProperty("TalendJob.log", "enterpriseQuotingEndpoint.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(enterpriseQuotingEndpoint.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Azure_DW_DB != null){
				
					this.setProperty("Azure_DW_DB", Azure_DW_DB.toString());
				
			}
			
			if(Azure_DW_Password != null){
				
					this.setProperty("Azure_DW_Password", Azure_DW_Password.toString());
				
			}
			
			if(Azure_DW_Schema != null){
				
					this.setProperty("Azure_DW_Schema", Azure_DW_Schema.toString());
				
			}
			
			if(Azure_DW_Server != null){
				
					this.setProperty("Azure_DW_Server", Azure_DW_Server.toString());
				
			}
			
			if(Azure_DW_User != null){
				
					this.setProperty("Azure_DW_User", Azure_DW_User.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String Azure_DW_DB;
public String getAzure_DW_DB(){
	return this.Azure_DW_DB;
}
public java.lang.String Azure_DW_Password;
public java.lang.String getAzure_DW_Password(){
	return this.Azure_DW_Password;
}
public String Azure_DW_Schema;
public String getAzure_DW_Schema(){
	return this.Azure_DW_Schema;
}
public String Azure_DW_Server;
public String getAzure_DW_Server(){
	return this.Azure_DW_Server;
}
public String Azure_DW_User;
public String getAzure_DW_User(){
	return this.Azure_DW_User;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.5";
	private final String jobName = "enterpriseQuotingEndpoint";
	private final String projectName = "CPQ";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

			private class DaemonThreadFactory implements java.util.concurrent.ThreadFactory {
				java.util.concurrent.ThreadFactory factory = java.util.concurrent.Executors.defaultThreadFactory();
				
				public java.lang.Thread newThread(java.lang.Runnable r) {
					java.lang.Thread t = factory.newThread(r);
					t.setDaemon(true);
					return t;
				}
			}
private final java.util.concurrent.ExecutorService es = java.util.concurrent.Executors.newCachedThreadPool(new DaemonThreadFactory());
		{
			java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread() {
				public void run() {
					es.shutdown();
					try {
						if(!es.awaitTermination(60, java.util.concurrent.TimeUnit.SECONDS)) {
							es.shutdownNow();
							if(!es.awaitTermination(60, java.util.concurrent.TimeUnit.SECONDS)) {

							}
						}
					} catch (java.lang.InterruptedException ie) {
						es.shutdownNow();
					} catch (java.lang.Exception e) {

					}
				}
			});
		}
private final JobStructureCatcherUtils talendJobLog = new JobStructureCatcherUtils(jobName, "_CdHrwAkcEe2JFL1ygMx--g", "0.5");
private org.talend.job.audit.JobAuditLogger auditLogger_talendJobLog = null;

private RunStat runStat = new RunStat(talendJobLog, System.getProperty("audit.interval"));

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils errorHandlingRestResponse_1_tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				enterpriseQuotingEndpoint.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(enterpriseQuotingEndpoint.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
		if(enableLogStash) {
			talendJobLog.addJobExceptionMessage(currentComponent, cLabel, null, e);
			talendJobLogProcess(globalMap);
		}
				errorHandlingRestResponse_1_tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				errorHandlingRestResponse_1_tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void EQGetCustomerInfo_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCustomerInfo_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCustomerInfo_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCustomerInfo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCustomerInfo_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCustomerInfo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetAllCustomers_1_tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetAllCustomers_1_tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetAllCustomers_1_tAzureSynapseInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetAllCustomers_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetAllCustomers_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetAllCustomers_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetAllCustomers_1_tRESTResponse_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetAllCustomers_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetBillTo_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetBillTo_1_tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetBillTo_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetBillTo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetBillTo_1_tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetBillTo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisFCM_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisFCM_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisFCM_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisFCM_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisFCM_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisFCM_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisFCM_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisFCM_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisPNs_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisPNs_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisPNs_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisPNs_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisPNs_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisPNs_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisPNs_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisPNs_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCountertopPNs_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCountertopPNs_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCountertopPNs_1_tAzureSynapseInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCountertopPNs_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCountertopPNs_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCountertopPNs_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCountertopPNs_1_tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCountertopPNs_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSkinPn_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSkinPn_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSkinPn_1_tAzureSynapseInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSkinPn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSkinPn_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSkinPn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSkinPn_1_tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSkinPn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSolidSurfacePn_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSolidSurfacePn_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSolidSurfacePn_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSolidSurfacePn_1_tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetDwgNo_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetDwgNo_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetDwgNo_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetDwgNo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetDwgNo_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetDwgNo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetItemDesc_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetItemDesc_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetItemDesc_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetItemDesc_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetItemDesc_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetItemDesc_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetParentLine_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetParentLine_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetParentLine_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetParentLine_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetParentLine_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetParentLine_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetPriceGroupTier_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetPriceGroupTier_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetPriceGroupTier_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetPriceGroupTier_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetPriceGroupTier_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetPriceGroupTier_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetPriceGroupTier_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetPriceGroupTier_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetProdOrders_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetProdOrders_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetProdOrders_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetProdOrders_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetProdOrders_1_tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetProdOrders_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetProdOrders_1_tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetProdOrders_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetRRVendorNo_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetRRVendorNo_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetRRVendorNo_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetRRVendorNo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetRRVendorNo_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetRRVendorNo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSecondaryPriceGroup_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSecondaryPriceGroup_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSecondaryPriceGroup_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSecondaryPriceGroup_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSellTo_1_tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSellTo_1_tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSellTo_1_tAzureSynapseInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSellTo_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSellTo_1_tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSellTo_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetUOMConv_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetUOMConv_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetUOMConv_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetUOMConv_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetUOMConv_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetUOMConv_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetValidItem_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetValidItem_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetValidItem_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetValidItem_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetValidItem_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetValidItem_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetVariantState_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetVariantState_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetVariantState_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetVariantState_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetVariantState_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetVariantState_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSkinORPart_1_tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSkinORPart_1_tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSkinORPart_1_tAzureSynapseInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSkinORPart_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSkinORPart_1_tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSkinORPart_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSkinORPart_1_tRESTResponse_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSkinORPart_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void errorHandlingRestResponse_1_tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					errorHandlingRestResponse_1_tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void errorHandlingRestResponse_1_tFlowToIterate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					errorHandlingRestResponse_1_tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void errorHandlingRestResponse_1_tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					errorHandlingRestResponse_1_tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void errorHandlingRestResponse_1_tRESTResponse_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					errorHandlingRestResponse_1_tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTRequest_1_Loop_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tRESTRequest_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tRESTRequest_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCustomerInfo_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetCustomerInfo_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetCustomerInfo_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCustomerInfo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetAllCustomers_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetAllCustomers_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetAllCustomers_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetAllCustomers_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetBillTo_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetBillTo_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetBillTo_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetBillTo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisFCM_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetChassisFCM_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetChassisFCM_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisFCM_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetChassisPNs_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetChassisPNs_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetChassisPNs_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetChassisPNs_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCountertopPNs_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetCountertopPNs_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetCountertopPNs_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCountertopPNs_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSkinPn_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetCTSkinPn_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetCTSkinPn_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSkinPn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetDwgNo_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetDwgNo_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetDwgNo_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetDwgNo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetItemDesc_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetItemDesc_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetItemDesc_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetItemDesc_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetParentLine_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetParentLine_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetParentLine_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetParentLine_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetPriceGroupTier_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetPriceGroupTier_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetPriceGroupTier_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetPriceGroupTier_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetProdOrders_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetProdOrders_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetProdOrders_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetProdOrders_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetRRVendorNo_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetRRVendorNo_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetRRVendorNo_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetRRVendorNo_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSellTo_1_tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetSellTo_1_tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetSellTo_1_tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSellTo_1_tAzureSynapseInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetUOMConv_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetUOMConv_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetUOMConv_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetUOMConv_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetValidItem_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetValidItem_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetValidItem_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetValidItem_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetVariantState_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetVariantState_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetVariantState_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetVariantState_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetSkinORPart_1_tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							EQGetSkinORPart_1_tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void EQGetSkinORPart_1_tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					EQGetSkinORPart_1_tAzureSynapseInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendJobLog_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendJobLog_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void EQGetCustomerInfo_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetAllCustomers_1_tAzureSynapseInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetBillTo_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetChassisFCM_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetChassisPNs_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetCountertopPNs_1_tAzureSynapseInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetCTSkinPn_1_tAzureSynapseInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetDwgNo_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetItemDesc_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetParentLine_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetPriceGroupTier_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetProdOrders_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetRRVendorNo_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetSellTo_1_tAzureSynapseInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetUOMConv_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetValidItem_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetVariantState_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetSkinORPart_1_tAzureSynapseInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void errorHandlingRestResponse_1_tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRESTRequest_1_Loop_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetCustomerInfo_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetAllCustomers_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetBillTo_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetChassisFCM_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetChassisPNs_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetCountertopPNs_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetCTSkinPn_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetDwgNo_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetItemDesc_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetParentLine_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetPriceGroupTier_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetProdOrders_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetRRVendorNo_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetSellTo_1_tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetUOMConv_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetValidItem_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetVariantState_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void EQGetSkinORPart_1_tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendJobLog_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}



private boolean runInTalendEsbRuntimeContainer = false;

public void setRunInTalendEsbRuntimeContainer(boolean flag) {
	runInTalendEsbRuntimeContainer = flag;
}

protected String restEndpoint;

public void setRestEndpoint(String restEndpoint){
	this.restEndpoint = restEndpoint;
}

public String getRestEndpoint() {
	return "/api/EQ/";
}

private boolean runInDaemonMode = true;

public void setRunInDaemonMode(boolean flag) {
	runInDaemonMode = flag;
}

private boolean restTalendJobAlreadyStarted = false;

/**
 * REST provider implementation
 */
@javax.ws.rs.Path("/")

public static class RestServiceProviderImpl4TalendJob {

	@javax.ws.rs.core.Context
	private org.apache.cxf.jaxrs.ext.MessageContext messageContext;
	private final String setCookieHeader = "Set-Cookie";

	private final enterpriseQuotingEndpoint job;

	public RestServiceProviderImpl4TalendJob(enterpriseQuotingEndpoint job) {
		this.job = job;
	}

	private void populateRequestWithJobContext(java.util.Map<String, Object> requestGlobalMap, enterpriseQuotingEndpoint job) {
		// pass job DataSources
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources =
			(java.util.Map<String, routines.system.TalendDataSource>) job.globalMap.get(KEY_DB_DATASOURCES);
		if (null != talendDataSources) {
			java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
			for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources.entrySet()) {
				restDataSources.put(talendDataSourceEntry.getKey(), new routines.system.TalendDataSource(talendDataSourceEntry.getValue().getRawDataSource()));
			}
			requestGlobalMap.put(KEY_DB_DATASOURCES, restDataSources);
		}

		if (null != job.globalMap.get(KEY_DB_DATASOURCES_RAW)) {
			requestGlobalMap.put(KEY_DB_DATASOURCES_RAW, job.globalMap.get(KEY_DB_DATASOURCES_RAW));
		}

		// pass job shared connections
		requestGlobalMap.putAll(job.getSharedConnections4REST());

		// pass job concurrent map
		requestGlobalMap.put("concurrentHashMap", job.globalMap.get("concurrentHashMap"));

		requestGlobalMap.putAll(job.globalMap);
	}

	private void closePassedDataSourceConnections(java.util.Map<String, Object> requestGlobalMap) {
		// close connections in passed job DataSources
		try {
			java.util.Map<String, routines.system.TalendDataSource> restDataSources =
				(java.util.Map<String, routines.system.TalendDataSource>) requestGlobalMap.get(KEY_DB_DATASOURCES);
			if (null != restDataSources) {
				for (routines.system.TalendDataSource restDataSource : restDataSources.values()) {
					restDataSource.close();
				}
			}
		} catch (Throwable e) {
			e.printStackTrace(System.err);
		}
	}

	private javax.ws.rs.core.Response processRequest(java.util.Map<String, Object> request) {
		
		final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
		try {
			globalMap.put("restRequest", request);

			populateRequestWithJobContext(globalMap, job);

			job.tRESTRequest_1_LoopProcess(globalMap);

			java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap.get("restResponse");

			Object responseBody = null;
			Integer status = null;
			java.util.Map<String, String> headers = null;
			if (null != response) {
				Object dropJsonRootProp = response.get("drop.json.root.element");
				Boolean dropJsonRoot = (null == dropJsonRootProp) ? false : (Boolean) dropJsonRootProp;
				messageContext.put("drop.json.root.element", dropJsonRoot.toString());

				responseBody = response.get("BODY");
				status = (Integer) response.get("STATUS");
				headers = (java.util.Map<String, String>) response.get("HEADERS");
			} else {
                            responseBody = request.get("ERROR");
                        }
            
			if (null == status) {
				status = (request.containsKey("STATUS")) ? (Integer) request.get("STATUS") : 404;
			}

			javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response.status(status).entity(responseBody);
			if (headers != null) {
				for (java.util.Map.Entry<String, String> header : headers.entrySet()) {
					if (header.getKey().equalsIgnoreCase(setCookieHeader)) {
						String cookies = header.getValue().trim();
						String cookiesList[] = cookies.split(";");

						for (String cookie : cookiesList) {
							String cookieTokens[] = cookie.trim().split("=");

							if (cookieTokens.length == 2) {

								String cookieName = cookieTokens[0].trim();
								String cookieValue = cookieTokens[1].trim();

								if (cookieName.length() > 0 && cookieValue.length() > 0) {
									javax.ws.rs.core.NewCookie newCookie = new javax.ws.rs.core.NewCookie(cookieName, cookieValue);
									responseBuilder.cookie(newCookie);
								}
							}
						}
					} else {
						responseBuilder.header(header.getKey(), header.getValue());
					}
				}
			}

			return responseBuilder.build();

		} catch (Throwable ex) {
			ex.printStackTrace();
			throw new javax.ws.rs.WebApplicationException(ex, 500);
		} finally {
			// close DB connections
			closePassedDataSourceConnections(globalMap);
		}
	}

	private javax.ws.rs.core.Response processStreamingResponseRequest(final java.util.Map<String, Object> request) {

		javax.ws.rs.core.StreamingOutput streamingOutput = new javax.ws.rs.core.StreamingOutput() {
			public void write(java.io.OutputStream output) {

				
				final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
				

				try {
					globalMap.put("restResponseStream", output);

					globalMap.put("restRequest", request);

					populateRequestWithJobContext(globalMap, job);

					job.tRESTRequest_1_LoopProcess(globalMap);

					if (globalMap.containsKey("restResponseWrappingClosure")) {
						output.write(((String) globalMap.get("restResponseWrappingClosure")).getBytes());
					}
				} catch (Throwable ex) {
					ex.printStackTrace();
					throw new javax.ws.rs.WebApplicationException(ex, 500);
				} finally {
					// close DB connections
					closePassedDataSourceConnections(globalMap);
				}
			}
		};

		return javax.ws.rs.core.Response.ok().entity(streamingOutput).build();
	}

	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetSkinORPart/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetSkinORPart(
		
				@javax.ws.rs.QueryParam("itemId") String itemId
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetSkinORPart " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetSkinORPart");
		request_tRESTRequest_1.put("PATTERN", "EQGetSkinORPart/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:itemId:id_String", itemId);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetVariantState/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetVariantState(
		
				@javax.ws.rs.QueryParam("itemId") String itemId
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetVariantState " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetVariantState");
		request_tRESTRequest_1.put("PATTERN", "EQGetVariantState/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:itemId:id_String", itemId);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetValidItem/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetValidItem(
		
				@javax.ws.rs.QueryParam("displayProductNumber") String displayProductNumber
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetValidItem " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetValidItem");
		request_tRESTRequest_1.put("PATTERN", "EQGetValidItem/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:displayProductNumber:id_String", displayProductNumber);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetUOMConv/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetUOMConv(
		
				@javax.ws.rs.QueryParam("displayProductNumber") String displayProductNumber
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetUOMConv " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetUOMConv");
		request_tRESTRequest_1.put("PATTERN", "EQGetUOMConv/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:displayProductNumber:id_String", displayProductNumber);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetSellTo/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetSellTo(
		
				@javax.ws.rs.QueryParam("collectRefProdId") String collectRefProdId
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetSellTo " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetSellTo");
		request_tRESTRequest_1.put("PATTERN", "EQGetSellTo/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:collectRefProdId:id_String", collectRefProdId);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetSecondaryPriceGroup/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetSecondaryPriceGroup(
		
				@javax.ws.rs.QueryParam("accountNum") String accountNum
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetSecondaryPriceGroup " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetSecondaryPriceGroup");
		request_tRESTRequest_1.put("PATTERN", "EQGetSecondaryPriceGroup/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:accountNum:id_String", accountNum);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetRRVendorNo/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetRRVendorNo(
		
				@javax.ws.rs.QueryParam("site") String site
		, 
				@javax.ws.rs.QueryParam("part") String part
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetRRVendorNo " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetRRVendorNo");
		request_tRESTRequest_1.put("PATTERN", "EQGetRRVendorNo/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:site:id_String", site);
		
			parameters_tRESTRequest_1.put("QUERY:part:id_String", part);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetProdOrders/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetProdOrders(
		
				@javax.ws.rs.QueryParam("inventLocationId") String inventLocationId
		, 
				@javax.ws.rs.QueryParam("configureItemMaster") String configureItemMaster
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetProdOrders " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetProdOrders");
		request_tRESTRequest_1.put("PATTERN", "EQGetProdOrders/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:inventLocationId:id_String", inventLocationId);
		
			parameters_tRESTRequest_1.put("QUERY:configureItemMaster:id_String", configureItemMaster);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetPriceGroupTier/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetPriceGroupTier(
		
				@javax.ws.rs.QueryParam("accountNum") String accountNum
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetPriceGroupTier " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetPriceGroupTier");
		request_tRESTRequest_1.put("PATTERN", "EQGetPriceGroupTier/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:accountNum:id_String", accountNum);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetParentLine/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetParentLine(
		
				@javax.ws.rs.QueryParam("lineNum") String lineNum
		, 
				@javax.ws.rs.QueryParam("salesId") String salesId
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetParentLine " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetParentLine");
		request_tRESTRequest_1.put("PATTERN", "EQGetParentLine/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:lineNum:id_String", lineNum);
		
			parameters_tRESTRequest_1.put("QUERY:salesId:id_String", salesId);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetItemDesc/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetItemDesc(
		
				@javax.ws.rs.QueryParam("displayProductNumber") String displayProductNumber
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetItemDesc " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetItemDesc");
		request_tRESTRequest_1.put("PATTERN", "EQGetItemDesc/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:displayProductNumber:id_String", displayProductNumber);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetDwgNo/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetDwgNo(
		
				@javax.ws.rs.QueryParam("displayProductNumber") String displayProductNumber
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetDwgNo " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetDwgNo");
		request_tRESTRequest_1.put("PATTERN", "EQGetDwgNo/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:displayProductNumber:id_String", displayProductNumber);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetCTSolidSurfacePn/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetCTSolidSurfacePn(
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetCTSolidSurfacePn " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetCTSolidSurfacePn");
		request_tRESTRequest_1.put("PATTERN", "EQGetCTSolidSurfacePn/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetCTSkinPn/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetCTSkinPn(
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetCTSkinPn " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetCTSkinPn");
		request_tRESTRequest_1.put("PATTERN", "EQGetCTSkinPn/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetCountertopPNs/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetCountertopPNs(
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetCountertopPNs " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetCountertopPNs");
		request_tRESTRequest_1.put("PATTERN", "EQGetCountertopPNs/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetChassisPNs/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetChassisPNs(
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetChassisPNs " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetChassisPNs");
		request_tRESTRequest_1.put("PATTERN", "EQGetChassisPNs/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetChassisFCM/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetChassisFCM(
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetChassisFCM " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetChassisFCM");
		request_tRESTRequest_1.put("PATTERN", "EQGetChassisFCM/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetBillTo/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetBillTo(
		
				@javax.ws.rs.QueryParam("collectRefProdId") String collectRefProdId
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetBillTo " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetBillTo");
		request_tRESTRequest_1.put("PATTERN", "EQGetBillTo/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:collectRefProdId:id_String", collectRefProdId);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetAllCustomers/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetAllCustomers(
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetAllCustomers " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetAllCustomers");
		request_tRESTRequest_1.put("PATTERN", "EQGetAllCustomers/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	@javax.ws.rs.GET()

	@javax.ws.rs.Path("EQGetCustInfo/")
	@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
	public javax.ws.rs.core.Response EQGetCustInfo(
		
				@javax.ws.rs.QueryParam("accountNum") String accountNum
		
		
			) {
                List<String> requiredParameterWithNullValueList = new java.util.ArrayList<String>();  
                if(requiredParameterWithNullValueList.size() > 0){
                    return handleWrongRequest(messageContext, 400, "400 Bad Request \n" + requiredParameterWithNullValueList.toString() + " in tRESTRequest_1:EQGetCustInfo " + (requiredParameterWithNullValueList.size() == 1 ? "is required!" : "are required!"));         
                }
		java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		request_tRESTRequest_1.put("VERB", "GET");
		request_tRESTRequest_1.put("OPERATION", "EQGetCustInfo");
		request_tRESTRequest_1.put("PATTERN", "EQGetCustInfo/");
	

		populateRequestInfo(request_tRESTRequest_1, messageContext);

		java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();
		
			parameters_tRESTRequest_1.put("QUERY:accountNum:id_String", accountNum);
		
		request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);


		return processRequest(request_tRESTRequest_1);
	}
	public javax.ws.rs.core.Response handleWrongRequest(
			org.apache.cxf.jaxrs.ext.MessageContext context, int status, String error) {

		// System.out.println("wrong call [uri: " + context.getUriInfo().getPath() + " ; method: " + context.getRequest().getMethod() + " ; status: " + status + " ; error: " + error + "]");

		java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();

		wrongRequest.put("ERROR", error);
		wrongRequest.put("STATUS", status);
		wrongRequest.put("VERB", context.getRequest().getMethod());
		wrongRequest.put("URI", context.getUriInfo().getPath());
		wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri().toString());
		wrongRequest.put("URI_ABSOLUTE", context.getUriInfo().getAbsolutePath().toString());
		wrongRequest.put("URI_REQUEST", context.getUriInfo().getRequestUri().toString());

		return processRequest(wrongRequest);
	}

	private void populateRequestInfo(java.util.Map<String, Object> request, org.apache.cxf.jaxrs.ext.MessageContext context) {
		final javax.ws.rs.core.UriInfo ui = context.getUriInfo();

		request.put("URI", ui.getPath());
		request.put("URI_BASE", ui.getBaseUri().toString());
		request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());
		request.put("URI_REQUEST", ui.getRequestUri().toString());

		request.put("ALL_HEADER_PARAMS", context.getHttpHeaders().getRequestHeaders());
		request.put("ALL_QUERY_PARAMS", ui.getQueryParameters());

		javax.ws.rs.core.SecurityContext securityContext = context.getSecurityContext();
		if (null != securityContext && null != securityContext.getUserPrincipal()) {
			request.put("PRINCIPAL_NAME", securityContext.getUserPrincipal().getName());
		}

		request.put("CorrelationID", context.get("CorrelationID"));

		request.put("MESSAGE_CONTEXT", context);
	}

	private void populateMultipartRequestInfo(java.util.Map<String, Object> request, org.apache.cxf.jaxrs.ext.MessageContext context,
			java.util.Map<String, Boolean> partNames) {
		java.util.Map<String, String> attachmentFilenames = new java.util.HashMap<String, String>();

		java.util.Map<String, java.util.Map<String, java.util.List<String>>> attachmentHeaders =
			new java.util.HashMap<String, java.util.Map<String, java.util.List<String>>>();

		for (java.util.Map.Entry<String,Boolean> p : partNames.entrySet()) {
			String partName = p.getKey();
			Boolean optional = p.getValue();
			org.apache.cxf.jaxrs.ext.multipart.Attachment attachment = getFirstMatchingPart(context, partName, optional);
			if (null != attachment) {
				attachmentHeaders.put(partName, attachment.getHeaders());
				if (null != attachment.getContentDisposition()) {
					String filename = attachment.getContentDisposition().getParameter("filename");
					if (null != filename) {
						attachmentFilenames.put(partName, filename);
					}
				}
			}
		}

		request.put("ATTACHMENT_HEADERS", attachmentHeaders);
		request.put("ATTACHMENT_FILENAMES", attachmentFilenames);
	}

	private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
			org.apache.cxf.jaxrs.ext.MessageContext context, String partName, Boolean optional) {
		List<org.apache.cxf.jaxrs.ext.multipart.Attachment> attachments =
			org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils.getAttachments(context);
		for (org.apache.cxf.jaxrs.ext.multipart.Attachment attachment : attachments) {
			if (partName.equals(attachment.getContentId())) {
				return attachment;
			}
			org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = attachment.getContentDisposition();
			if (null != cd && partName.equals(cd.getParameter("name"))) {
				return attachment;
			}
		}
		if (optional) { 
			return null;
		}
		// unexpected
		throw new javax.ws.rs.InternalServerErrorException();
	}
}

public static class ExceptionMapper4TalendJobRestService extends org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

	@javax.ws.rs.core.Context private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

	private RestServiceProviderImpl4TalendJob provider;

	public ExceptionMapper4TalendJobRestService(RestServiceProviderImpl4TalendJob provider) {
		this.provider = provider;
	}

	public javax.ws.rs.core.Response toResponse(javax.ws.rs.WebApplicationException ex) {
		String error = null;
		javax.ws.rs.core.Response response = ex.getResponse();
		if (null != response && null != response.getEntity()) {
			error = response.getEntity().toString();
		}
		response = super.toResponse(ex);
		if (null == error) {
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			} else {
				error = null == ex.getCause() ? ex.getMessage() : ex.getCause().getMessage();
			}
		}
		response = provider.handleWrongRequest(messageContext, response.getStatus(), error);

		java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext.getHttpHeaders().getAcceptableMediaTypes();
		javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null : accepts.get(0);

		if (responseType == null || !responseType.getSubtype().equals("xml") && !responseType.getSubtype().equals("json")) {
			responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
		}

		javax.ws.rs.core.Response r = javax.ws.rs.core.Response.status(response.getStatus()).entity(response.getEntity()).type(responseType).build();

		if(response.getHeaders()!=null){
			r.getHeaders().putAll(response.getHeaders());
		}

		return r;
	}
}

protected String checkEndpointUrl(String url) {
	final String defaultEndpointUrl = "http://127.0.0.1:8090/";

	String endpointUrl = url;
	if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
		endpointUrl = defaultEndpointUrl;
	} else if (!endpointUrl.contains("://")) { // relative
		if (endpointUrl.startsWith("/")) {
			endpointUrl = endpointUrl.substring(1);
		}
		endpointUrl = defaultEndpointUrl + endpointUrl;
	}

	// test for busy
	java.net.URI endpointURI = java.net.URI.create(endpointUrl);
	String host = endpointURI.getHost();
	try {
		if (java.net.InetAddress.getByName(host).isLoopbackAddress()) {
			int port = endpointURI.getPort();
			java.net.ServerSocket ss = null;
			try {
				ss = new java.net.ServerSocket(port);
			} catch (IOException e) {
				// rethrow exception
				throw new IllegalArgumentException("Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
			} finally {
				if (ss != null) {
					try {
						ss.close();
					} catch (IOException e) {
						// ignore
					}
				}
			}
			try {
				// ok, let's doublecheck for silent listeners
				java.net.Socket cs = new java.net.Socket(host, port);
				// if succeed - somebody silently listening, fail!
				cs.close();
				// rethrow exception
				throw new IllegalArgumentException("Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
			} catch (IOException e) {
				// ok, nobody listens, proceed
			}
		}
	} catch (java.net.UnknownHostException e) {
		// ignore
	}

	return endpointUrl;
}


public static class StreamingDOM4JProvider extends org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider {

	public static final String SUPRESS_XML_DECLARATION = "supress.xml.declaration";

	private java.util.Map<String, Object> globalMap = null;

	public void setGlobalMap(java.util.Map<String, Object> globalMap) {
		this.globalMap = globalMap;
	}

	public void writeTo(org.dom4j.Document doc, Class<?> cls, java.lang.reflect.Type type,
			java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
			javax.ws.rs.core.MultivaluedMap<String, Object> headers, java.io.OutputStream os)
					throws java.io.IOException, javax.ws.rs.WebApplicationException {
		if (mt.getSubtype().contains("xml")) {
			org.dom4j.io.XMLWriter writer;
			org.apache.cxf.message.Message currentMessage = null;
			if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
				currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
			} else {
				currentMessage = (org.apache.cxf.message.Message)((java.util.Map<String, Object>)globalMap.get("restRequest")).get("CURRENT_MESSAGE");
			}

			if (currentMessage != null && currentMessage.getExchange() != null && currentMessage.getExchange().containsKey(SUPRESS_XML_DECLARATION)) {
				org.dom4j.io.OutputFormat format = new org.dom4j.io.OutputFormat();
				format.setSuppressDeclaration(true);
				writer = new org.dom4j.io.XMLWriter(os, format);
			} else {
				writer = new org.dom4j.io.XMLWriter(os);
			}
			writer.write(doc);
			writer.flush();
		} else {
			super.writeTo(doc, cls, type, anns, mt, headers, os);
		}
	}
}

Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

class Thread4RestServiceProviderEndpoint extends Thread {

	private final String endpointUrl;

	private final enterpriseQuotingEndpoint job;

	private org.apache.cxf.endpoint.Server server;

	private org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf;

	public Thread4RestServiceProviderEndpoint(enterpriseQuotingEndpoint job, String endpointUrl) {
		this.job = job;
		this.endpointUrl = endpointUrl;
		this.sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
	}

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	public org.apache.cxf.endpoint.Server getServer(){
		return server;
	}

	public org.apache.cxf.jaxrs.JAXRSServerFactoryBean getJAXRSServerFactoryBean(){
		return sf;
	}

	public void run() {

		try {
			RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(job);

			if(sf.getProperties() == null){
				sf.setProperties(new java.util.HashMap<String, Object>());
			}

			java.util.List<Object> providers = (java.util.List<Object>)sf.getProviders();
			providers.add(new ExceptionMapper4TalendJobRestService(provider));
			providers.add(new StreamingDOM4JProvider());
			
			org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider =
					new org.apache.cxf.jaxrs.provider.json.JSONProvider();
			jsonProvider.setIgnoreNamespaces(true);
			
				jsonProvider.setAttributesToElements(true);
			
			

			
				jsonProvider.setConvertTypesToStrings(false);
			
			providers.add(jsonProvider);
			sf.setProviders(providers);
			sf.setTransportId("http://cxf.apache.org/transports/http");
			sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
			sf.setResourceProvider(RestServiceProviderImpl4TalendJob.class,
					new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(provider));
			sf.setAddress(endpointUrl);

			final java.util.List<org.apache.cxf.feature.Feature> features = sf.getFeatures() == null?
					new java.util.ArrayList<org.apache.cxf.feature.Feature>() : sf.getFeatures();

			

			

			

			

			sf.setFeatures(features);

			server = sf.create();

			// System.out.println("REST service [endpoint: " + endpointUrl + "] published");
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	public void stopEndpoint() {
		if (null != server) {
			server.stop();
			server.destroy();
			// System.out.println("REST service [endpoint: " + endpointUrl + "] unpublished");
		}
	}
}

	public static class ContextBean {
		static String evaluate(String context, String contextExpression, String jobName)
				throws IOException, javax.script.ScriptException {
			String currentContext = context;
			String jobNameStripped = jobName.substring(jobName.lastIndexOf(".") + 1);

			boolean inOSGi = routines.system.BundleUtils.inOSGi();
			java.util.Dictionary<String, Object> jobProperties = null;
			if (inOSGi) {
				jobProperties = routines.system.BundleUtils.getJobProperties(jobNameStripped);

				if (jobProperties != null && null != jobProperties.get("context")) {
					currentContext = (String) jobProperties.get("context");
				}
			}
						
			boolean isExpression = contextExpression.contains("+") || contextExpression.contains("(");
			final String prefix = isExpression ? "\"" : "";
			java.util.Properties defaultProps = new java.util.Properties();
			java.io.InputStream inContext = enterpriseQuotingEndpoint.class.getClassLoader()
					.getResourceAsStream("cpq/enterprisequotingendpoint_0_5/contexts/" + currentContext  + ".properties");
			if (inContext == null) {
				inContext = enterpriseQuotingEndpoint.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + currentContext  + ".properties");
			}
			try {
			    defaultProps.load(inContext);
				if(jobProperties != null){
					java.util.Enumeration<String> keys = jobProperties.keys();
					while (keys.hasMoreElements()) {
						String propKey = keys.nextElement();
						if (defaultProps.containsKey(propKey)) {
							defaultProps.put(propKey, (String) jobProperties.get(propKey));
						}
					}
				}
			} finally {
			    inContext.close();
			}
			java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("context.([\\w]+)");
			java.util.regex.Matcher matcher = pattern.matcher(contextExpression);

			while (matcher.find()) {
				contextExpression = contextExpression.replaceAll(matcher.group(0),
						prefix + defaultProps.getProperty(matcher.group(1)) + prefix);
			}
			if (contextExpression.startsWith("/services")) {
				contextExpression = contextExpression.replaceFirst("/services","");
            }
			return isExpression ? evaluateContextExpression(contextExpression) : contextExpression;
		}

		public static String evaluateContextExpression(String expression) throws RuntimeException {
			delight.rhinosandox.RhinoSandbox sandbox = delight.rhinosandox.RhinoSandboxes.create();

			// Add some import for Java
			expression = expression.replaceAll("System.getProperty", "java.lang.System.getProperty");
			return sandbox.eval(null, expression).toString();
		}

        public static String getContext(String context, String contextName, String jobName) throws Exception {
			return contextName.contains("context.") ? evaluate(context, contextName, jobName) : contextName;
        }
    }






	



public static class EQGetCustomerInfo_1_row1Struct implements routines.system.IPersistableRow<EQGetCustomerInfo_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String CUST_NUMB;

				public String getCUST_NUMB () {
					return this.CUST_NUMB;
				}

				public Boolean CUST_NUMBIsNullable(){
				    return true;
				}
				public Boolean CUST_NUMBIsKey(){
				    return false;
				}
				public Integer CUST_NUMBLength(){
				    return null;
				}
				public Integer CUST_NUMBPrecision(){
				    return null;
				}
				public String CUST_NUMBDefault(){
				
					return null;
				
				}
				public String CUST_NUMBComment(){
				
				    return "";
				
				}
				public String CUST_NUMBPattern(){
				
					return "";
				
				}
				public String CUST_NUMBOriginalDbColumnName(){
				
					return "CUST_NUMB";
				
				}

				
			    public String BILL_TO;

				public String getBILL_TO () {
					return this.BILL_TO;
				}

				public Boolean BILL_TOIsNullable(){
				    return true;
				}
				public Boolean BILL_TOIsKey(){
				    return false;
				}
				public Integer BILL_TOLength(){
				    return null;
				}
				public Integer BILL_TOPrecision(){
				    return null;
				}
				public String BILL_TODefault(){
				
					return null;
				
				}
				public String BILL_TOComment(){
				
				    return "";
				
				}
				public String BILL_TOPattern(){
				
					return "";
				
				}
				public String BILL_TOOriginalDbColumnName(){
				
					return "BILL_TO";
				
				}

				
			    public String SEGMENTID;

				public String getSEGMENTID () {
					return this.SEGMENTID;
				}

				public Boolean SEGMENTIDIsNullable(){
				    return true;
				}
				public Boolean SEGMENTIDIsKey(){
				    return false;
				}
				public Integer SEGMENTIDLength(){
				    return null;
				}
				public Integer SEGMENTIDPrecision(){
				    return null;
				}
				public String SEGMENTIDDefault(){
				
					return null;
				
				}
				public String SEGMENTIDComment(){
				
				    return "";
				
				}
				public String SEGMENTIDPattern(){
				
					return "";
				
				}
				public String SEGMENTIDOriginalDbColumnName(){
				
					return "SEGMENTID";
				
				}

				
			    public String CUST_INDUSTRY;

				public String getCUST_INDUSTRY () {
					return this.CUST_INDUSTRY;
				}

				public Boolean CUST_INDUSTRYIsNullable(){
				    return true;
				}
				public Boolean CUST_INDUSTRYIsKey(){
				    return false;
				}
				public Integer CUST_INDUSTRYLength(){
				    return null;
				}
				public Integer CUST_INDUSTRYPrecision(){
				    return null;
				}
				public String CUST_INDUSTRYDefault(){
				
					return null;
				
				}
				public String CUST_INDUSTRYComment(){
				
				    return "";
				
				}
				public String CUST_INDUSTRYPattern(){
				
					return "";
				
				}
				public String CUST_INDUSTRYOriginalDbColumnName(){
				
					return "CUST_INDUSTRY";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CUST_NUMB = readString(dis);
					
					this.BILL_TO = readString(dis);
					
					this.SEGMENTID = readString(dis);
					
					this.CUST_INDUSTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CUST_NUMB = readString(dis);
					
					this.BILL_TO = readString(dis);
					
					this.SEGMENTID = readString(dis);
					
					this.CUST_INDUSTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CUST_NUMB,dos);
					
					// String
				
						writeString(this.BILL_TO,dos);
					
					// String
				
						writeString(this.SEGMENTID,dos);
					
					// String
				
						writeString(this.CUST_INDUSTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CUST_NUMB,dos);
					
					// String
				
						writeString(this.BILL_TO,dos);
					
					// String
				
						writeString(this.SEGMENTID,dos);
					
					// String
				
						writeString(this.CUST_INDUSTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CUST_NUMB="+CUST_NUMB);
		sb.append(",BILL_TO="+BILL_TO);
		sb.append(",SEGMENTID="+SEGMENTID);
		sb.append(",CUST_INDUSTRY="+CUST_INDUSTRY);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(CUST_NUMB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUST_NUMB);
            			}
            		
        			sb.append("|");
        		
        				if(BILL_TO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BILL_TO);
            			}
            		
        			sb.append("|");
        		
        				if(SEGMENTID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEGMENTID);
            			}
            		
        			sb.append("|");
        		
        				if(CUST_INDUSTRY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUST_INDUSTRY);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCustomerInfo_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCustomerInfo_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCustomerInfo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCustomerInfo_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCustomerInfo_1_row1Struct EQGetCustomerInfo_1_row1 = new EQGetCustomerInfo_1_row1Struct();




	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCustomerInfo_1_row1");
			
		int tos_count_EQGetCustomerInfo_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCustomerInfo_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetCustomerInfo_1_tWriteJSONField_1");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetCustomerInfo_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCustomerInfo_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetCustomerInfo_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetCustomerInfo_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetCustomerInfo_1_row5Struct> listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetCustomerInfo_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetCustomerInfo_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetCustomerInfo_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetCustomerInfo_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetCustomerInfo_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetCustomerInfo_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetCustomerInfo_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetCustomerInfo_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetCustomerInfo_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetCustomerInfo_1_tWriteJSONField_1_Out txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetCustomerInfo_1_tWriteJSONField_1_Out(listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetCustomerInfo_1_tWriteJSONField_1_Out = es.submit(txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetCustomerInfo_1_tWriteJSONField_1_Out", future_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out nestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out();

EQGetCustomerInfo_1_row1Struct  rowStructOutput_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new EQGetCustomerInfo_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetCustomerInfo_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetCustomerInfo_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetCustomerInfo_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetCustomerInfo_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetCustomerInfo_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetCustomerInfo_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCustomerInfo_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetCustomerInfo_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCustomerInfo_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetCustomerInfo_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCustomerInfo_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetCustInfo\"");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetCustInfo WHERE CUST_NUMB = '\"+((String)globalMap.get(\"EQGetCustInfo.accountNum\"))+\"';\"");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("CUST_NUMB")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("BILL_TO")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("SEGMENTID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CUST_INDUSTRY")+"}]");
                        log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetCustomerInfo_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCustomerInfo_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCustomerInfo_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetCustomerInfo_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetCustomerInfo_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetCustomerInfo_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetCustomerInfo_1_tAzureSynapseInput_1, talendToDBArray_EQGetCustomerInfo_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetCustomerInfo_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetCustomerInfo_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetCustomerInfo_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetCustomerInfo_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetCustomerInfo_1_tAzureSynapseInput_1);
				String dbUser_EQGetCustomerInfo_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetCustomerInfo_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetCustomerInfo_1_tAzureSynapseInput_1 = decryptedPassword_EQGetCustomerInfo_1_tAzureSynapseInput_1;
				
		    String port_EQGetCustomerInfo_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetCustomerInfo_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetCustomerInfo_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetCustomerInfo_1_tAzureSynapseInput_1)) {
		    	url_EQGetCustomerInfo_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetCustomerInfo_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetCustomerInfo_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetCustomerInfo_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetCustomerInfo_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetCustomerInfo_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetCustomerInfo_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetCustomerInfo_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetCustomerInfo_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetCustomerInfo_1_tAzureSynapseInput_1,dbUser_EQGetCustomerInfo_1_tAzureSynapseInput_1,dbPwd_EQGetCustomerInfo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetCustomerInfo_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetCustomerInfo_1_tAzureSynapseInput_1 = conn_EQGetCustomerInfo_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetCustomerInfo_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetCustInfo WHERE CUST_NUMB = '"+((String)globalMap.get("EQGetCustInfo.accountNum"))+"';";
		    
	    		log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetCustomerInfo_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetCustomerInfo_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetCustomerInfo_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetCustomerInfo_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetCustomerInfo_1_tAzureSynapseInput_1 = stmt_EQGetCustomerInfo_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetCustomerInfo_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetCustomerInfo_1_tAzureSynapseInput_1 = rs_EQGetCustomerInfo_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetCustomerInfo_1_tAzureSynapseInput_1 = rsmd_EQGetCustomerInfo_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetCustomerInfo_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetCustomerInfo_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetCustomerInfo_1_tAzureSynapseInput_1 < 1) {
								EQGetCustomerInfo_1_row1.CUST_NUMB = null;
							} else {
	                         		
           		tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 = rs_EQGetCustomerInfo_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetCustomerInfo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetCustomerInfo_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCustomerInfo_1_row1.CUST_NUMB = FormatterUtils.formatUnwithE(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetCustomerInfo_1_row1.CUST_NUMB = tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetCustomerInfo_1_row1.CUST_NUMB = null;
            }
		                    }
							if(colQtyInRs_EQGetCustomerInfo_1_tAzureSynapseInput_1 < 2) {
								EQGetCustomerInfo_1_row1.BILL_TO = null;
							} else {
	                         		
           		tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 = rs_EQGetCustomerInfo_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetCustomerInfo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetCustomerInfo_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCustomerInfo_1_row1.BILL_TO = FormatterUtils.formatUnwithE(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetCustomerInfo_1_row1.BILL_TO = tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetCustomerInfo_1_row1.BILL_TO = null;
            }
		                    }
							if(colQtyInRs_EQGetCustomerInfo_1_tAzureSynapseInput_1 < 3) {
								EQGetCustomerInfo_1_row1.SEGMENTID = null;
							} else {
	                         		
           		tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 = rs_EQGetCustomerInfo_1_tAzureSynapseInput_1.getString(3);
            if(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetCustomerInfo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetCustomerInfo_1_tAzureSynapseInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCustomerInfo_1_row1.SEGMENTID = FormatterUtils.formatUnwithE(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetCustomerInfo_1_row1.SEGMENTID = tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetCustomerInfo_1_row1.SEGMENTID = null;
            }
		                    }
							if(colQtyInRs_EQGetCustomerInfo_1_tAzureSynapseInput_1 < 4) {
								EQGetCustomerInfo_1_row1.CUST_INDUSTRY = null;
							} else {
	                         		
           		tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 = rs_EQGetCustomerInfo_1_tAzureSynapseInput_1.getString(4);
            if(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetCustomerInfo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetCustomerInfo_1_tAzureSynapseInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCustomerInfo_1_row1.CUST_INDUSTRY = FormatterUtils.formatUnwithE(tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetCustomerInfo_1_row1.CUST_INDUSTRY = tmpContent_EQGetCustomerInfo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetCustomerInfo_1_row1.CUST_INDUSTRY = null;
            }
		                    }
					
						log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetCustomerInfo_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetCustomerInfo_1_tAzureSynapseInput_1++;

/**
 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCustomerInfo_1_row1","EQGetCustomerInfo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetCustomerInfo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCustomerInfo_1_row1 - " + (EQGetCustomerInfo_1_row1==null? "": EQGetCustomerInfo_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_Out++;
				log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetCustomerInfo_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetCustomerInfo_1_tWriteJSONField_1_Out helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetCustomerInfo_1_tWriteJSONField_1_Out();

	valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("CUST_NUMB", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.CUST_NUMB != null?
            EQGetCustomerInfo_1_row1.CUST_NUMB.toString():null
		)));
	arraysValueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("CUST_NUMB", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.CUST_NUMB != null?
            EQGetCustomerInfo_1_row1.CUST_NUMB.toString():null
		)));
	valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("BILL_TO", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.BILL_TO != null?
            EQGetCustomerInfo_1_row1.BILL_TO.toString():null
		)));
	arraysValueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("BILL_TO", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.BILL_TO != null?
            EQGetCustomerInfo_1_row1.BILL_TO.toString():null
		)));
	valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("SEGMENTID", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.SEGMENTID != null?
            EQGetCustomerInfo_1_row1.SEGMENTID.toString():null
		)));
	arraysValueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("SEGMENTID", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.SEGMENTID != null?
            EQGetCustomerInfo_1_row1.SEGMENTID.toString():null
		)));
	valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("CUST_INDUSTRY", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.CUST_INDUSTRY != null?
            EQGetCustomerInfo_1_row1.CUST_INDUSTRY.toString():null
		)));
	arraysValueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.put("CUST_INDUSTRY", helper_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetCustomerInfo_1_row1.CUST_INDUSTRY != null?
            EQGetCustomerInfo_1_row1.CUST_INDUSTRY.toString():null
		)));
		String strTemp_EQGetCustomerInfo_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetCustomerInfo_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetCustomerInfo_1_tWriteJSONField_1_Out=strTemp_EQGetCustomerInfo_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCustomerInfo_1_tWriteJSONField_1_Out, format_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
			output_EQGetCustomerInfo_1_tWriteJSONField_1_Out.write(doc_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
		    output_EQGetCustomerInfo_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetCustomerInfo_1_row5Struct row_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new EQGetCustomerInfo_1_row5Struct();
						  
					     		row_EQGetCustomerInfo_1_tWriteJSONField_1_Out.body = strWriter_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out.add(row_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
					
		    doc_EQGetCustomerInfo_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetCustomerInfo_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetCustomerInfo_1_tWriteJSONField_1_Out=0;i_EQGetCustomerInfo_1_tWriteJSONField_1_Out<orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out.length;i_EQGetCustomerInfo_1_tWriteJSONField_1_Out++){
				orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out[i_EQGetCustomerInfo_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetCustomerInfo_1_tWriteJSONField_1_Out != null && groupbyList_EQGetCustomerInfo_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetCustomerInfo_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetCustomerInfo_1_tWriteJSONField_1_Out=strTemp_EQGetCustomerInfo_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetCustomerInfo_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetCustomerInfo_1_tWriteJSONField_1_Out) {
		needRoot_EQGetCustomerInfo_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetCustomerInfo_1_tWriteJSONField_1_Out = doc_EQGetCustomerInfo_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetCustomerInfo_1_tWriteJSONField_1_Out = root_EQGetCustomerInfo_1_tWriteJSONField_1_Out;
		org.dom4j.Element root_0_EQGetCustomerInfo_1_tWriteJSONField_1_Out = root_EQGetCustomerInfo_1_tWriteJSONField_1_Out.addElement("BILL_TO");
		if(
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("BILL_TO")!=null){
			nestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out .setText(root_0_EQGetCustomerInfo_1_tWriteJSONField_1_Out,
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("BILL_TO"));
		}
		org.dom4j.Element root_1_EQGetCustomerInfo_1_tWriteJSONField_1_Out = root_EQGetCustomerInfo_1_tWriteJSONField_1_Out.addElement("SEGMENTID");
		if(
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("SEGMENTID")!=null){
			nestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out .setText(root_1_EQGetCustomerInfo_1_tWriteJSONField_1_Out,
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("SEGMENTID"));
		}
		org.dom4j.Element root_2_EQGetCustomerInfo_1_tWriteJSONField_1_Out = root_EQGetCustomerInfo_1_tWriteJSONField_1_Out.addElement("CUST_INDUSTRY");
		if(
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("CUST_INDUSTRY")!=null){
			nestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out .setText(root_2_EQGetCustomerInfo_1_tWriteJSONField_1_Out,
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("CUST_INDUSTRY"));
		}
		root4Group_EQGetCustomerInfo_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetCustomerInfo_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetCustomerInfo_1_tWriteJSONField_1_Out=root4Group_EQGetCustomerInfo_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetCustomerInfo_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("CUST_NUMB");
        if(orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out.length){
        		orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetCustomerInfo_1_tWriteJSONField_1_Out.elements().add(orders_EQGetCustomerInfo_1_tWriteJSONField_1_Out[0]++,loop_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("CUST_NUMB")!=null){
			nestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out .setText(loop_EQGetCustomerInfo_1_tWriteJSONField_1_Out,
		valueMap_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get("CUST_NUMB"));
		}

 


	tos_count_EQGetCustomerInfo_1_tWriteJSONField_1_Out++;

/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetCustomerInfo_1_tAzureSynapseInput_1 != null) {
		rs_EQGetCustomerInfo_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetCustomerInfo_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetCustomerInfo_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetCustomerInfo_1_tAzureSynapseInput_1 != null && !conn_EQGetCustomerInfo_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetCustomerInfo_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetCustomerInfo_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetCustomerInfo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetCustomerInfo_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetCustomerInfo_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetCustomerInfo_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetCustomerInfo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCustomerInfo_1_tWriteJSONField_1_Out, format_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
	output_EQGetCustomerInfo_1_tWriteJSONField_1_Out.write(doc_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
    output_EQGetCustomerInfo_1_tWriteJSONField_1_Out.close();
					EQGetCustomerInfo_1_row5Struct row_EQGetCustomerInfo_1_tWriteJSONField_1_Out = new EQGetCustomerInfo_1_row5Struct();
						  
					     		row_EQGetCustomerInfo_1_tWriteJSONField_1_Out.body = strWriter_EQGetCustomerInfo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out.add(row_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_Out);
globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetCustomerInfo_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetCustomerInfo_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCustomerInfo_1_row1",2,0,
			 			"EQGetCustomerInfo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetCustomerInfo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetCustomerInfo_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetCustomerInfo_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetCustomerInfo_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetCustomerInfo_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetCustomerInfo_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetCustomerInfo_1_tWriteJSONField_1_Out");
	if (future_EQGetCustomerInfo_1_tWriteJSONField_1_Out != null) {
		future_EQGetCustomerInfo_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCustomerInfo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetAllCustomers_1_out1Struct implements routines.system.IPersistableRow<EQGetAllCustomers_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String Customers;

				public String getCustomers () {
					return this.Customers;
				}

				public Boolean CustomersIsNullable(){
				    return true;
				}
				public Boolean CustomersIsKey(){
				    return false;
				}
				public Integer CustomersLength(){
				    return null;
				}
				public Integer CustomersPrecision(){
				    return null;
				}
				public String CustomersDefault(){
				
					return null;
				
				}
				public String CustomersComment(){
				
				    return "";
				
				}
				public String CustomersPattern(){
				
					return "";
				
				}
				public String CustomersOriginalDbColumnName(){
				
					return "Customers";
				
				}

				
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Customers = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Customers = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Customers,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Customers,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Customers="+Customers);
		sb.append(",VALUE="+VALUE);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Customers == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Customers);
            			}
            		
        			sb.append("|");
        		
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetAllCustomers_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetAllCustomers_1_row2Struct implements routines.system.IPersistableRow<EQGetAllCustomers_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALUE="+VALUE);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetAllCustomers_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetAllCustomers_1_tAzureSynapseInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetAllCustomers_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetAllCustomers_1_tAzureSynapseInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetAllCustomers_1_row2Struct EQGetAllCustomers_1_row2 = new EQGetAllCustomers_1_row2Struct();
EQGetAllCustomers_1_out1Struct EQGetAllCustomers_1_out1 = new EQGetAllCustomers_1_out1Struct();





	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetAllCustomers_1_out1");
			
		int tos_count_EQGetAllCustomers_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetAllCustomers_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("Customers")+"}]");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetAllCustomers_1_tWriteJSONField_2");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetAllCustomers_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetAllCustomers_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetAllCustomers_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetAllCustomers_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetAllCustomers_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetAllCustomers_1_row6Struct> listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetAllCustomers_1_row6Struct>();
							
	
					class ThreadXMLField_EQGetAllCustomers_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetAllCustomers_1_row6Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetAllCustomers_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetAllCustomers_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetAllCustomers_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetAllCustomers_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetAllCustomers_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetAllCustomers_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetAllCustomers_1_tWriteJSONField_2_Out txf_EQGetAllCustomers_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetAllCustomers_1_tWriteJSONField_2_Out(listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetAllCustomers_1_tWriteJSONField_2_Out = es.submit(txf_EQGetAllCustomers_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetAllCustomers_1_tWriteJSONField_2_Out", future_EQGetAllCustomers_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetAllCustomers_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out nestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out();

EQGetAllCustomers_1_out1Struct  rowStructOutput_EQGetAllCustomers_1_tWriteJSONField_2_Out = new EQGetAllCustomers_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetAllCustomers_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetAllCustomers_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetAllCustomers_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetAllCustomers_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetAllCustomers_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetAllCustomers_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetAllCustomers_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetAllCustomers_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetAllCustomers_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetAllCustomers_1_tMap_1", false);
		start_Hash.put("EQGetAllCustomers_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetAllCustomers_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetAllCustomers_1_row2");
			
		int tos_count_EQGetAllCustomers_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetAllCustomers_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetAllCustomers_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetAllCustomers_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetAllCustomers_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetAllCustomers_1_tMap_1.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetAllCustomers_1_tMap_1.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetAllCustomers_1_tMap_1.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetAllCustomers_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tMap_1 - "  + (log4jParamters_EQGetAllCustomers_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetAllCustomers_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetAllCustomers_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetAllCustomers_1_row2_EQGetAllCustomers_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetAllCustomers_1_out1_EQGetAllCustomers_1_tMap_1 = 0;
				
EQGetAllCustomers_1_out1Struct EQGetAllCustomers_1_out1_tmp = new EQGetAllCustomers_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetAllCustomers_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetAllCustomers_1_tAzureSynapseInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetAllCustomers_1_tAzureSynapseInput_2", false);
		start_Hash.put("EQGetAllCustomers_1_tAzureSynapseInput_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetAllCustomers_1_tAzureSynapseInput_2";
	
	
		int tos_count_EQGetAllCustomers_1_tAzureSynapseInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetAllCustomers_1_tAzureSynapseInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2 = new StringBuilder();
                    log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("Parameters:");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("TABLE" + " = " + "\"EQGetAllCustomers\"");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetAllCustomers ORDER BY [Description];\"");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("VALUE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("Description")+"}]");
                        log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - "  + (log4jParamters_EQGetAllCustomers_1_tAzureSynapseInput_2) );
                    } 
                } 
            new BytesLimit65535_EQGetAllCustomers_1_tAzureSynapseInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetAllCustomers_1_tAzureSynapseInput_2", "tAzureSynapseInput_2", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetAllCustomers_1_tAzureSynapseInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetAllCustomers_1_tAzureSynapseInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetAllCustomers_1_tAzureSynapseInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetAllCustomers_1_tAzureSynapseInput_2, talendToDBArray_EQGetAllCustomers_1_tAzureSynapseInput_2); 
		    int nb_line_EQGetAllCustomers_1_tAzureSynapseInput_2 = 0;
		    java.sql.Connection conn_EQGetAllCustomers_1_tAzureSynapseInput_2 = null;
				String driverClass_EQGetAllCustomers_1_tAzureSynapseInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetAllCustomers_1_tAzureSynapseInput_2 = java.lang.Class.forName(driverClass_EQGetAllCustomers_1_tAzureSynapseInput_2);
				String dbUser_EQGetAllCustomers_1_tAzureSynapseInput_2 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetAllCustomers_1_tAzureSynapseInput_2 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetAllCustomers_1_tAzureSynapseInput_2 = decryptedPassword_EQGetAllCustomers_1_tAzureSynapseInput_2;
				
		    String port_EQGetAllCustomers_1_tAzureSynapseInput_2 = "1433";
		    String dbname_EQGetAllCustomers_1_tAzureSynapseInput_2 = context.Azure_DW_DB ;		    
		    String url_EQGetAllCustomers_1_tAzureSynapseInput_2 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetAllCustomers_1_tAzureSynapseInput_2)) {
		    	url_EQGetAllCustomers_1_tAzureSynapseInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetAllCustomers_1_tAzureSynapseInput_2)) {		    
		    	url_EQGetAllCustomers_1_tAzureSynapseInput_2 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetAllCustomers_1_tAzureSynapseInput_2 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetAllCustomers_1_tAzureSynapseInput_2 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Driver ClassName: "+driverClass_EQGetAllCustomers_1_tAzureSynapseInput_2+".");
			
	    		log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Connection attempt to '" + url_EQGetAllCustomers_1_tAzureSynapseInput_2 + "' with the username '" + dbUser_EQGetAllCustomers_1_tAzureSynapseInput_2 + "'.");
			
				conn_EQGetAllCustomers_1_tAzureSynapseInput_2 = java.sql.DriverManager.getConnection(url_EQGetAllCustomers_1_tAzureSynapseInput_2,dbUser_EQGetAllCustomers_1_tAzureSynapseInput_2,dbPwd_EQGetAllCustomers_1_tAzureSynapseInput_2);
	    		log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Connection to '" + url_EQGetAllCustomers_1_tAzureSynapseInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetAllCustomers_1_tAzureSynapseInput_2 = conn_EQGetAllCustomers_1_tAzureSynapseInput_2.createStatement();

		    String dbquery_EQGetAllCustomers_1_tAzureSynapseInput_2 = "SELECT * FROM ITG.EQGetAllCustomers ORDER BY [Description];";
		    
	    		log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Executing the query: '" + dbquery_EQGetAllCustomers_1_tAzureSynapseInput_2 + "'.");
			

            	globalMap.put("EQGetAllCustomers_1_tAzureSynapseInput_2_QUERY",dbquery_EQGetAllCustomers_1_tAzureSynapseInput_2);
		    java.sql.ResultSet rs_EQGetAllCustomers_1_tAzureSynapseInput_2 = null;

		    try {
		    	rs_EQGetAllCustomers_1_tAzureSynapseInput_2 = stmt_EQGetAllCustomers_1_tAzureSynapseInput_2.executeQuery(dbquery_EQGetAllCustomers_1_tAzureSynapseInput_2);
		    	java.sql.ResultSetMetaData rsmd_EQGetAllCustomers_1_tAzureSynapseInput_2 = rs_EQGetAllCustomers_1_tAzureSynapseInput_2.getMetaData();
		    	int colQtyInRs_EQGetAllCustomers_1_tAzureSynapseInput_2 = rsmd_EQGetAllCustomers_1_tAzureSynapseInput_2.getColumnCount();

		    String tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2 = null;
		    
		    
		    	log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Retrieving records from the database.");
		    
		    while (rs_EQGetAllCustomers_1_tAzureSynapseInput_2.next()) {
		        nb_line_EQGetAllCustomers_1_tAzureSynapseInput_2++;
		        
							if(colQtyInRs_EQGetAllCustomers_1_tAzureSynapseInput_2 < 1) {
								EQGetAllCustomers_1_row2.VALUE = null;
							} else {
	                         		
           		tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2 = rs_EQGetAllCustomers_1_tAzureSynapseInput_2.getString(1);
            if(tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetAllCustomers_1_tAzureSynapseInput_2 .contains(rsmd_EQGetAllCustomers_1_tAzureSynapseInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetAllCustomers_1_row2.VALUE = FormatterUtils.formatUnwithE(tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2);
            	} else {
                	EQGetAllCustomers_1_row2.VALUE = tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetAllCustomers_1_row2.VALUE = null;
            }
		                    }
							if(colQtyInRs_EQGetAllCustomers_1_tAzureSynapseInput_2 < 2) {
								EQGetAllCustomers_1_row2.Description = null;
							} else {
	                         		
           		tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2 = rs_EQGetAllCustomers_1_tAzureSynapseInput_2.getString(2);
            if(tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetAllCustomers_1_tAzureSynapseInput_2 .contains(rsmd_EQGetAllCustomers_1_tAzureSynapseInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetAllCustomers_1_row2.Description = FormatterUtils.formatUnwithE(tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2);
            	} else {
                	EQGetAllCustomers_1_row2.Description = tmpContent_EQGetAllCustomers_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetAllCustomers_1_row2.Description = null;
            }
		                    }
					
						log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Retrieving the record " + nb_line_EQGetAllCustomers_1_tAzureSynapseInput_2 + ".");
					





 



/**
 * [EQGetAllCustomers_1_tAzureSynapseInput_2 begin ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tAzureSynapseInput_2 main ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tAzureSynapseInput_2";
	
	

 


	tos_count_EQGetAllCustomers_1_tAzureSynapseInput_2++;

/**
 * [EQGetAllCustomers_1_tAzureSynapseInput_2 main ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tAzureSynapseInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetAllCustomers_1_tAzureSynapseInput_2 process_data_begin ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetAllCustomers_1_row2","EQGetAllCustomers_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetAllCustomers_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetAllCustomers_1_row2 - " + (EQGetAllCustomers_1_row2==null? "": EQGetAllCustomers_1_row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetAllCustomers_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetAllCustomers_1_tMap_1 = false;
		boolean mainRowRejected_EQGetAllCustomers_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetAllCustomers_1_out1 = null;


// # Output table : 'EQGetAllCustomers_1_out1'
count_EQGetAllCustomers_1_out1_EQGetAllCustomers_1_tMap_1++;

EQGetAllCustomers_1_out1_tmp.Customers = "X";
EQGetAllCustomers_1_out1_tmp.VALUE = EQGetAllCustomers_1_row2.VALUE ;
EQGetAllCustomers_1_out1_tmp.Description = EQGetAllCustomers_1_row2.Description ;
EQGetAllCustomers_1_out1 = EQGetAllCustomers_1_out1_tmp;
log.debug("EQGetAllCustomers_1_tMap_1 - Outputting the record " + count_EQGetAllCustomers_1_out1_EQGetAllCustomers_1_tMap_1 + " of the output table 'EQGetAllCustomers_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetAllCustomers_1_tMap_1 = false;










 


	tos_count_EQGetAllCustomers_1_tMap_1++;

/**
 * [EQGetAllCustomers_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tMap_1";
	
	

 



/**
 * [EQGetAllCustomers_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetAllCustomers_1_out1"
if(EQGetAllCustomers_1_out1 != null) { 



	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetAllCustomers_1_out1","EQGetAllCustomers_1_tMap_1","tMap_1","tMap","EQGetAllCustomers_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetAllCustomers_1_out1 - " + (EQGetAllCustomers_1_out1==null? "": EQGetAllCustomers_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetAllCustomers_1_tWriteJSONField_2_Out++;
				log.debug("EQGetAllCustomers_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetAllCustomers_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetAllCustomers_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetAllCustomers_1_tWriteJSONField_2_Out helper_EQGetAllCustomers_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetAllCustomers_1_tWriteJSONField_2_Out();

	valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.put("Customers", helper_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString(
	(
		EQGetAllCustomers_1_out1.Customers != null?
            EQGetAllCustomers_1_out1.Customers.toString():null
		)));
	arraysValueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.put("Customers", helper_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString(
	(
		EQGetAllCustomers_1_out1.Customers != null?
            EQGetAllCustomers_1_out1.Customers.toString():null
		)));
	valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.put("VALUE", helper_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString(
	(
		EQGetAllCustomers_1_out1.VALUE != null?
            EQGetAllCustomers_1_out1.VALUE.toString():null
		)));
	arraysValueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.put("VALUE", helper_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString(
	(
		EQGetAllCustomers_1_out1.VALUE != null?
            EQGetAllCustomers_1_out1.VALUE.toString():null
		)));
	valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.put("Description", helper_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString(
	(
		EQGetAllCustomers_1_out1.Description != null?
            EQGetAllCustomers_1_out1.Description.toString():null
		)));
	arraysValueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.put("Description", helper_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString(
	(
		EQGetAllCustomers_1_out1.Description != null?
            EQGetAllCustomers_1_out1.Description.toString():null
		)));
		String strTemp_EQGetAllCustomers_1_tWriteJSONField_2_Out = "";		strTemp_EQGetAllCustomers_1_tWriteJSONField_2_Out = strTemp_EQGetAllCustomers_1_tWriteJSONField_2_Out + valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.get("Customers")
							+ valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.get("Customers").length();
	if(strCompCache_EQGetAllCustomers_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetAllCustomers_1_tWriteJSONField_2_Out=strTemp_EQGetAllCustomers_1_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetAllCustomers_1_tWriteJSONField_2_Out.equals(strTemp_EQGetAllCustomers_1_tWriteJSONField_2_Out)){	  
    		nestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetAllCustomers_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetAllCustomers_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetAllCustomers_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetAllCustomers_1_tWriteJSONField_2_Out, format_EQGetAllCustomers_1_tWriteJSONField_2_Out);
			output_EQGetAllCustomers_1_tWriteJSONField_2_Out.write(doc_EQGetAllCustomers_1_tWriteJSONField_2_Out);
		    output_EQGetAllCustomers_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetAllCustomers_1_row6Struct row_EQGetAllCustomers_1_tWriteJSONField_2_Out = new EQGetAllCustomers_1_row6Struct();
						  
					     		row_EQGetAllCustomers_1_tWriteJSONField_2_Out.body = strWriter_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out.add(row_EQGetAllCustomers_1_tWriteJSONField_2_Out);
					
		    doc_EQGetAllCustomers_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetAllCustomers_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetAllCustomers_1_tWriteJSONField_2_Out=0;i_EQGetAllCustomers_1_tWriteJSONField_2_Out<orders_EQGetAllCustomers_1_tWriteJSONField_2_Out.length;i_EQGetAllCustomers_1_tWriteJSONField_2_Out++){
				orders_EQGetAllCustomers_1_tWriteJSONField_2_Out[i_EQGetAllCustomers_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetAllCustomers_1_tWriteJSONField_2_Out != null && groupbyList_EQGetAllCustomers_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetAllCustomers_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetAllCustomers_1_tWriteJSONField_2_Out=strTemp_EQGetAllCustomers_1_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetAllCustomers_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetAllCustomers_1_tWriteJSONField_2_Out) {
		needRoot_EQGetAllCustomers_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetAllCustomers_1_tWriteJSONField_2_Out = doc_EQGetAllCustomers_1_tWriteJSONField_2_Out.addElement("Customers");
		subTreeRootParent_EQGetAllCustomers_1_tWriteJSONField_2_Out = root_EQGetAllCustomers_1_tWriteJSONField_2_Out;
		root4Group_EQGetAllCustomers_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetAllCustomers_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetAllCustomers_1_tWriteJSONField_2_Out=root4Group_EQGetAllCustomers_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetAllCustomers_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("Customers");
        if(orders_EQGetAllCustomers_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetAllCustomers_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetAllCustomers_1_tWriteJSONField_2_Out.length){
        		orders_EQGetAllCustomers_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetAllCustomers_1_tWriteJSONField_2_Out.elements().add(orders_EQGetAllCustomers_1_tWriteJSONField_2_Out[0]++,loop_EQGetAllCustomers_1_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_EQGetAllCustomers_1_tWriteJSONField_2_Out = loop_EQGetAllCustomers_1_tWriteJSONField_2_Out.addElement("VALUE");
		if(
		valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.get("VALUE")!=null){
			nestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out .setText(loop_0_EQGetAllCustomers_1_tWriteJSONField_2_Out,
		valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.get("VALUE"));
		}
		org.dom4j.Element loop_1_EQGetAllCustomers_1_tWriteJSONField_2_Out = loop_EQGetAllCustomers_1_tWriteJSONField_2_Out.addElement("Description");
		if(
		valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.get("Description")!=null){
			nestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out .setText(loop_1_EQGetAllCustomers_1_tWriteJSONField_2_Out,
		valueMap_EQGetAllCustomers_1_tWriteJSONField_2_Out.get("Description"));
		}

 


	tos_count_EQGetAllCustomers_1_tWriteJSONField_2_Out++;

/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "EQGetAllCustomers_1_out1"




	
	/**
	 * [EQGetAllCustomers_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tMap_1";
	
	

 



/**
 * [EQGetAllCustomers_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetAllCustomers_1_tAzureSynapseInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetAllCustomers_1_tAzureSynapseInput_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tAzureSynapseInput_2 end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tAzureSynapseInput_2";
	
	

	}
}finally{
	if (rs_EQGetAllCustomers_1_tAzureSynapseInput_2 != null) {
		rs_EQGetAllCustomers_1_tAzureSynapseInput_2.close();
	}
	if (stmt_EQGetAllCustomers_1_tAzureSynapseInput_2 != null) {
		stmt_EQGetAllCustomers_1_tAzureSynapseInput_2.close();
	}
		if(conn_EQGetAllCustomers_1_tAzureSynapseInput_2 != null && !conn_EQGetAllCustomers_1_tAzureSynapseInput_2.isClosed()) {
			
	    		log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Closing the connection to the database.");
			
			conn_EQGetAllCustomers_1_tAzureSynapseInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetAllCustomers_1_tAzureSynapseInput_2_NB_LINE",nb_line_EQGetAllCustomers_1_tAzureSynapseInput_2);
	    		log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - Retrieved records count: "+nb_line_EQGetAllCustomers_1_tAzureSynapseInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tAzureSynapseInput_2 - "  + ("Done.") );

ok_Hash.put("EQGetAllCustomers_1_tAzureSynapseInput_2", true);
end_Hash.put("EQGetAllCustomers_1_tAzureSynapseInput_2", System.currentTimeMillis());




/**
 * [EQGetAllCustomers_1_tAzureSynapseInput_2 end ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetAllCustomers_1_tMap_1 - Written records count in the table 'EQGetAllCustomers_1_out1': " + count_EQGetAllCustomers_1_out1_EQGetAllCustomers_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetAllCustomers_1_row2",2,0,
			 			"EQGetAllCustomers_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetAllCustomers_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetAllCustomers_1_tMap_1", true);
end_Hash.put("EQGetAllCustomers_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetAllCustomers_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetAllCustomers_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetAllCustomers_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetAllCustomers_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetAllCustomers_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetAllCustomers_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetAllCustomers_1_tWriteJSONField_2_Out, format_EQGetAllCustomers_1_tWriteJSONField_2_Out);
	output_EQGetAllCustomers_1_tWriteJSONField_2_Out.write(doc_EQGetAllCustomers_1_tWriteJSONField_2_Out);
    output_EQGetAllCustomers_1_tWriteJSONField_2_Out.close();
					EQGetAllCustomers_1_row6Struct row_EQGetAllCustomers_1_tWriteJSONField_2_Out = new EQGetAllCustomers_1_row6Struct();
						  
					     		row_EQGetAllCustomers_1_tWriteJSONField_2_Out.body = strWriter_EQGetAllCustomers_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out.add(row_EQGetAllCustomers_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetAllCustomers_1_tWriteJSONField_2_Out);
globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetAllCustomers_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetAllCustomers_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetAllCustomers_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetAllCustomers_1_out1",2,0,
			 			"EQGetAllCustomers_1_tMap_1","tMap_1","tMap","EQGetAllCustomers_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetAllCustomers_1_tAzureSynapseInput_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetAllCustomers_1_tAzureSynapseInput_2 finally ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tMap_1";
	
	

 



/**
 * [EQGetAllCustomers_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetAllCustomers_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetAllCustomers_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetAllCustomers_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetAllCustomers_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetAllCustomers_1_tWriteJSONField_2_Out");
	if (future_EQGetAllCustomers_1_tWriteJSONField_2_Out != null) {
		future_EQGetAllCustomers_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetAllCustomers_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetBillTo_1_row2Struct implements routines.system.IPersistableRow<EQGetBillTo_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String INVOICEACCOUNT;

				public String getINVOICEACCOUNT () {
					return this.INVOICEACCOUNT;
				}

				public Boolean INVOICEACCOUNTIsNullable(){
				    return true;
				}
				public Boolean INVOICEACCOUNTIsKey(){
				    return false;
				}
				public Integer INVOICEACCOUNTLength(){
				    return null;
				}
				public Integer INVOICEACCOUNTPrecision(){
				    return null;
				}
				public String INVOICEACCOUNTDefault(){
				
					return null;
				
				}
				public String INVOICEACCOUNTComment(){
				
				    return "";
				
				}
				public String INVOICEACCOUNTPattern(){
				
					return "";
				
				}
				public String INVOICEACCOUNTOriginalDbColumnName(){
				
					return "INVOICEACCOUNT";
				
				}

				
			    public String COLLECTREFPRODID;

				public String getCOLLECTREFPRODID () {
					return this.COLLECTREFPRODID;
				}

				public Boolean COLLECTREFPRODIDIsNullable(){
				    return true;
				}
				public Boolean COLLECTREFPRODIDIsKey(){
				    return false;
				}
				public Integer COLLECTREFPRODIDLength(){
				    return null;
				}
				public Integer COLLECTREFPRODIDPrecision(){
				    return null;
				}
				public String COLLECTREFPRODIDDefault(){
				
					return null;
				
				}
				public String COLLECTREFPRODIDComment(){
				
				    return "";
				
				}
				public String COLLECTREFPRODIDPattern(){
				
					return "";
				
				}
				public String COLLECTREFPRODIDOriginalDbColumnName(){
				
					return "COLLECTREFPRODID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.INVOICEACCOUNT = readString(dis);
					
					this.COLLECTREFPRODID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.INVOICEACCOUNT = readString(dis);
					
					this.COLLECTREFPRODID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INVOICEACCOUNT,dos);
					
					// String
				
						writeString(this.COLLECTREFPRODID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.INVOICEACCOUNT,dos);
					
					// String
				
						writeString(this.COLLECTREFPRODID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INVOICEACCOUNT="+INVOICEACCOUNT);
		sb.append(",COLLECTREFPRODID="+COLLECTREFPRODID);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INVOICEACCOUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INVOICEACCOUNT);
            			}
            		
        			sb.append("|");
        		
        				if(COLLECTREFPRODID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COLLECTREFPRODID);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetBillTo_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetBillTo_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetBillTo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetBillTo_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetBillTo_1_row2Struct EQGetBillTo_1_row2 = new EQGetBillTo_1_row2Struct();




	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetBillTo_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetBillTo_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetBillTo_1_row2");
			
		int tos_count_EQGetBillTo_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetBillTo_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetBillTo_1_tWriteJSONField_1");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetBillTo_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetBillTo_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetBillTo_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetBillTo_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetBillTo_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetBillTo_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetBillTo_1_row5Struct> listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetBillTo_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetBillTo_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetBillTo_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetBillTo_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetBillTo_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetBillTo_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetBillTo_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetBillTo_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetBillTo_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetBillTo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetBillTo_1_tWriteJSONField_1_Out txf_EQGetBillTo_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetBillTo_1_tWriteJSONField_1_Out(listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetBillTo_1_tWriteJSONField_1_Out = es.submit(txf_EQGetBillTo_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetBillTo_1_tWriteJSONField_1_Out", future_EQGetBillTo_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetBillTo_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetBillTo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetBillTo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetBillTo_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetBillTo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetBillTo_1_tWriteJSONField_1_Out nestXMLTool_EQGetBillTo_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetBillTo_1_tWriteJSONField_1_Out();

EQGetBillTo_1_row2Struct  rowStructOutput_EQGetBillTo_1_tWriteJSONField_1_Out = new EQGetBillTo_1_row2Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetBillTo_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetBillTo_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetBillTo_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetBillTo_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetBillTo_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetBillTo_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetBillTo_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetBillTo_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetBillTo_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetBillTo_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetBillTo_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetBillTo_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetBillTo_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetBillTo_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetBillTo\"");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetBillTo WHERE COLLECTREFPRODID = '\"+((String)globalMap.get(\"EQGetBillTo.collectRefProdId\"))+\"';\"");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("INVOICEACCOUNT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("COLLECTREFPRODID")+"}]");
                        log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetBillTo_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetBillTo_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetBillTo_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetBillTo_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetBillTo_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetBillTo_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetBillTo_1_tAzureSynapseInput_1, talendToDBArray_EQGetBillTo_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetBillTo_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetBillTo_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetBillTo_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetBillTo_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetBillTo_1_tAzureSynapseInput_1);
				String dbUser_EQGetBillTo_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetBillTo_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetBillTo_1_tAzureSynapseInput_1 = decryptedPassword_EQGetBillTo_1_tAzureSynapseInput_1;
				
		    String port_EQGetBillTo_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetBillTo_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetBillTo_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetBillTo_1_tAzureSynapseInput_1)) {
		    	url_EQGetBillTo_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetBillTo_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetBillTo_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetBillTo_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetBillTo_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetBillTo_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetBillTo_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetBillTo_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetBillTo_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetBillTo_1_tAzureSynapseInput_1,dbUser_EQGetBillTo_1_tAzureSynapseInput_1,dbPwd_EQGetBillTo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetBillTo_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetBillTo_1_tAzureSynapseInput_1 = conn_EQGetBillTo_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetBillTo_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetBillTo WHERE COLLECTREFPRODID = '"+((String)globalMap.get("EQGetBillTo.collectRefProdId"))+"';";
		    
	    		log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetBillTo_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetBillTo_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetBillTo_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetBillTo_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetBillTo_1_tAzureSynapseInput_1 = stmt_EQGetBillTo_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetBillTo_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetBillTo_1_tAzureSynapseInput_1 = rs_EQGetBillTo_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetBillTo_1_tAzureSynapseInput_1 = rsmd_EQGetBillTo_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetBillTo_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetBillTo_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetBillTo_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetBillTo_1_tAzureSynapseInput_1 < 1) {
								EQGetBillTo_1_row2.INVOICEACCOUNT = null;
							} else {
	                         		
           		tmpContent_EQGetBillTo_1_tAzureSynapseInput_1 = rs_EQGetBillTo_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetBillTo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetBillTo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetBillTo_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetBillTo_1_row2.INVOICEACCOUNT = FormatterUtils.formatUnwithE(tmpContent_EQGetBillTo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetBillTo_1_row2.INVOICEACCOUNT = tmpContent_EQGetBillTo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetBillTo_1_row2.INVOICEACCOUNT = null;
            }
		                    }
							if(colQtyInRs_EQGetBillTo_1_tAzureSynapseInput_1 < 2) {
								EQGetBillTo_1_row2.COLLECTREFPRODID = null;
							} else {
	                         		
           		tmpContent_EQGetBillTo_1_tAzureSynapseInput_1 = rs_EQGetBillTo_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetBillTo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetBillTo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetBillTo_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetBillTo_1_row2.COLLECTREFPRODID = FormatterUtils.formatUnwithE(tmpContent_EQGetBillTo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetBillTo_1_row2.COLLECTREFPRODID = tmpContent_EQGetBillTo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetBillTo_1_row2.COLLECTREFPRODID = null;
            }
		                    }
					
						log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetBillTo_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetBillTo_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetBillTo_1_tAzureSynapseInput_1++;

/**
 * [EQGetBillTo_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetBillTo_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetBillTo_1_row2","EQGetBillTo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetBillTo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetBillTo_1_row2 - " + (EQGetBillTo_1_row2==null? "": EQGetBillTo_1_row2.toLogString()));
    			}
    		

	if(txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetBillTo_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetBillTo_1_tWriteJSONField_1_Out++;
				log.debug("EQGetBillTo_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetBillTo_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetBillTo_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetBillTo_1_tWriteJSONField_1_Out helper_EQGetBillTo_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetBillTo_1_tWriteJSONField_1_Out();

	valueMap_EQGetBillTo_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetBillTo_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetBillTo_1_tWriteJSONField_1_Out.put("INVOICEACCOUNT", helper_EQGetBillTo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetBillTo_1_row2.INVOICEACCOUNT != null?
            EQGetBillTo_1_row2.INVOICEACCOUNT.toString():null
		)));
	arraysValueMap_EQGetBillTo_1_tWriteJSONField_1_Out.put("INVOICEACCOUNT", helper_EQGetBillTo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetBillTo_1_row2.INVOICEACCOUNT != null?
            EQGetBillTo_1_row2.INVOICEACCOUNT.toString():null
		)));
	valueMap_EQGetBillTo_1_tWriteJSONField_1_Out.put("COLLECTREFPRODID", helper_EQGetBillTo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetBillTo_1_row2.COLLECTREFPRODID != null?
            EQGetBillTo_1_row2.COLLECTREFPRODID.toString():null
		)));
	arraysValueMap_EQGetBillTo_1_tWriteJSONField_1_Out.put("COLLECTREFPRODID", helper_EQGetBillTo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetBillTo_1_row2.COLLECTREFPRODID != null?
            EQGetBillTo_1_row2.COLLECTREFPRODID.toString():null
		)));
		String strTemp_EQGetBillTo_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetBillTo_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetBillTo_1_tWriteJSONField_1_Out=strTemp_EQGetBillTo_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetBillTo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetBillTo_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetBillTo_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetBillTo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetBillTo_1_tWriteJSONField_1_Out, format_EQGetBillTo_1_tWriteJSONField_1_Out);
			output_EQGetBillTo_1_tWriteJSONField_1_Out.write(doc_EQGetBillTo_1_tWriteJSONField_1_Out);
		    output_EQGetBillTo_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetBillTo_1_row5Struct row_EQGetBillTo_1_tWriteJSONField_1_Out = new EQGetBillTo_1_row5Struct();
						  
					     		row_EQGetBillTo_1_tWriteJSONField_1_Out.body = strWriter_EQGetBillTo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out.add(row_EQGetBillTo_1_tWriteJSONField_1_Out);
					
		    doc_EQGetBillTo_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetBillTo_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetBillTo_1_tWriteJSONField_1_Out=0;i_EQGetBillTo_1_tWriteJSONField_1_Out<orders_EQGetBillTo_1_tWriteJSONField_1_Out.length;i_EQGetBillTo_1_tWriteJSONField_1_Out++){
				orders_EQGetBillTo_1_tWriteJSONField_1_Out[i_EQGetBillTo_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetBillTo_1_tWriteJSONField_1_Out != null && groupbyList_EQGetBillTo_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetBillTo_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetBillTo_1_tWriteJSONField_1_Out=strTemp_EQGetBillTo_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetBillTo_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetBillTo_1_tWriteJSONField_1_Out) {
		needRoot_EQGetBillTo_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetBillTo_1_tWriteJSONField_1_Out = doc_EQGetBillTo_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetBillTo_1_tWriteJSONField_1_Out = root_EQGetBillTo_1_tWriteJSONField_1_Out;
		root4Group_EQGetBillTo_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetBillTo_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetBillTo_1_tWriteJSONField_1_Out=root4Group_EQGetBillTo_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetBillTo_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("INVOICEACCOUNT");
        if(orders_EQGetBillTo_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetBillTo_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetBillTo_1_tWriteJSONField_1_Out.length){
        		orders_EQGetBillTo_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetBillTo_1_tWriteJSONField_1_Out.elements().add(orders_EQGetBillTo_1_tWriteJSONField_1_Out[0]++,loop_EQGetBillTo_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetBillTo_1_tWriteJSONField_1_Out.get("INVOICEACCOUNT")!=null){
			nestXMLTool_EQGetBillTo_1_tWriteJSONField_1_Out .setText(loop_EQGetBillTo_1_tWriteJSONField_1_Out,
		valueMap_EQGetBillTo_1_tWriteJSONField_1_Out.get("INVOICEACCOUNT"));
		}

 


	tos_count_EQGetBillTo_1_tWriteJSONField_1_Out++;

/**
 * [EQGetBillTo_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetBillTo_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetBillTo_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetBillTo_1_tAzureSynapseInput_1 != null) {
		rs_EQGetBillTo_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetBillTo_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetBillTo_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetBillTo_1_tAzureSynapseInput_1 != null && !conn_EQGetBillTo_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetBillTo_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetBillTo_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetBillTo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetBillTo_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetBillTo_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetBillTo_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetBillTo_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetBillTo_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetBillTo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetBillTo_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetBillTo_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetBillTo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetBillTo_1_tWriteJSONField_1_Out, format_EQGetBillTo_1_tWriteJSONField_1_Out);
	output_EQGetBillTo_1_tWriteJSONField_1_Out.write(doc_EQGetBillTo_1_tWriteJSONField_1_Out);
    output_EQGetBillTo_1_tWriteJSONField_1_Out.close();
					EQGetBillTo_1_row5Struct row_EQGetBillTo_1_tWriteJSONField_1_Out = new EQGetBillTo_1_row5Struct();
						  
					     		row_EQGetBillTo_1_tWriteJSONField_1_Out.body = strWriter_EQGetBillTo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out.add(row_EQGetBillTo_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetBillTo_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetBillTo_1_tWriteJSONField_1_Out);
globalMap.put("EQGetBillTo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetBillTo_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetBillTo_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetBillTo_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetBillTo_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetBillTo_1_row2",2,0,
			 			"EQGetBillTo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetBillTo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetBillTo_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetBillTo_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetBillTo_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetBillTo_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetBillTo_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetBillTo_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetBillTo_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetBillTo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetBillTo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetBillTo_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetBillTo_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetBillTo_1_tWriteJSONField_1_Out");
	if (future_EQGetBillTo_1_tWriteJSONField_1_Out != null) {
		future_EQGetBillTo_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetBillTo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetChassisFCM_1_out1Struct implements routines.system.IPersistableRow<EQGetChassisFCM_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ChassisFCM;

				public String getChassisFCM () {
					return this.ChassisFCM;
				}

				public Boolean ChassisFCMIsNullable(){
				    return true;
				}
				public Boolean ChassisFCMIsKey(){
				    return false;
				}
				public Integer ChassisFCMLength(){
				    return null;
				}
				public Integer ChassisFCMPrecision(){
				    return null;
				}
				public String ChassisFCMDefault(){
				
					return null;
				
				}
				public String ChassisFCMComment(){
				
				    return "";
				
				}
				public String ChassisFCMPattern(){
				
					return "";
				
				}
				public String ChassisFCMOriginalDbColumnName(){
				
					return "ChassisFCM";
				
				}

				
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ChassisFCM = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ChassisFCM = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ChassisFCM,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ChassisFCM,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ChassisFCM="+ChassisFCM);
		sb.append(",VALUE="+VALUE);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ChassisFCM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ChassisFCM);
            			}
            		
        			sb.append("|");
        		
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisFCM_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetChassisFCM_1_row1Struct implements routines.system.IPersistableRow<EQGetChassisFCM_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}

				public Boolean DESCRIPTIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPTIONIsKey(){
				    return false;
				}
				public Integer DESCRIPTIONLength(){
				    return null;
				}
				public Integer DESCRIPTIONPrecision(){
				    return null;
				}
				public String DESCRIPTIONDefault(){
				
					return null;
				
				}
				public String DESCRIPTIONComment(){
				
				    return "";
				
				}
				public String DESCRIPTIONPattern(){
				
					return "";
				
				}
				public String DESCRIPTIONOriginalDbColumnName(){
				
					return "DESCRIPTION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALUE="+VALUE);
		sb.append(",DESCRIPTION="+DESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(DESCRIPTION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DESCRIPTION);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisFCM_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetChassisFCM_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetChassisFCM_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetChassisFCM_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetChassisFCM_1_row1Struct EQGetChassisFCM_1_row1 = new EQGetChassisFCM_1_row1Struct();
EQGetChassisFCM_1_out1Struct EQGetChassisFCM_1_out1 = new EQGetChassisFCM_1_out1Struct();





	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisFCM_1_out1");
			
		int tos_count_EQGetChassisFCM_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisFCM_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("ChassisFCM")+"}]");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetChassisFCM_1_tWriteJSONField_1");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisFCM_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisFCM_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetChassisFCM_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetChassisFCM_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetChassisFCM_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetChassisFCM_1_row5Struct> listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetChassisFCM_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetChassisFCM_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetChassisFCM_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetChassisFCM_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetChassisFCM_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetChassisFCM_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetChassisFCM_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetChassisFCM_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetChassisFCM_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetChassisFCM_1_tWriteJSONField_1_Out txf_EQGetChassisFCM_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetChassisFCM_1_tWriteJSONField_1_Out(listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetChassisFCM_1_tWriteJSONField_1_Out = es.submit(txf_EQGetChassisFCM_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetChassisFCM_1_tWriteJSONField_1_Out", future_EQGetChassisFCM_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetChassisFCM_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out nestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out();

EQGetChassisFCM_1_out1Struct  rowStructOutput_EQGetChassisFCM_1_tWriteJSONField_1_Out = new EQGetChassisFCM_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetChassisFCM_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetChassisFCM_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetChassisFCM_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetChassisFCM_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetChassisFCM_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetChassisFCM_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetChassisFCM_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetChassisFCM_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetChassisFCM_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisFCM_1_tMap_1", false);
		start_Hash.put("EQGetChassisFCM_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisFCM_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisFCM_1_row1");
			
		int tos_count_EQGetChassisFCM_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisFCM_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisFCM_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetChassisFCM_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetChassisFCM_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetChassisFCM_1_tMap_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetChassisFCM_1_tMap_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetChassisFCM_1_tMap_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetChassisFCM_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tMap_1 - "  + (log4jParamters_EQGetChassisFCM_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisFCM_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisFCM_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetChassisFCM_1_row1_EQGetChassisFCM_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetChassisFCM_1_out1_EQGetChassisFCM_1_tMap_1 = 0;
				
EQGetChassisFCM_1_out1Struct EQGetChassisFCM_1_out1_tmp = new EQGetChassisFCM_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetChassisFCM_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetChassisFCM_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisFCM_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetChassisFCM_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisFCM_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetChassisFCM_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisFCM_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetChassisFCM\"");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetChassisFCM;\"");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("VALUE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DESCRIPTION")+"}]");
                        log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetChassisFCM_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisFCM_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisFCM_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetChassisFCM_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetChassisFCM_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetChassisFCM_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetChassisFCM_1_tAzureSynapseInput_1, talendToDBArray_EQGetChassisFCM_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetChassisFCM_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetChassisFCM_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetChassisFCM_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetChassisFCM_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetChassisFCM_1_tAzureSynapseInput_1);
				String dbUser_EQGetChassisFCM_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetChassisFCM_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetChassisFCM_1_tAzureSynapseInput_1 = decryptedPassword_EQGetChassisFCM_1_tAzureSynapseInput_1;
				
		    String port_EQGetChassisFCM_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetChassisFCM_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetChassisFCM_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetChassisFCM_1_tAzureSynapseInput_1)) {
		    	url_EQGetChassisFCM_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetChassisFCM_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetChassisFCM_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetChassisFCM_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetChassisFCM_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetChassisFCM_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetChassisFCM_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetChassisFCM_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetChassisFCM_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetChassisFCM_1_tAzureSynapseInput_1,dbUser_EQGetChassisFCM_1_tAzureSynapseInput_1,dbPwd_EQGetChassisFCM_1_tAzureSynapseInput_1);
	    		log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetChassisFCM_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetChassisFCM_1_tAzureSynapseInput_1 = conn_EQGetChassisFCM_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetChassisFCM_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetChassisFCM;";
		    
	    		log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetChassisFCM_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetChassisFCM_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetChassisFCM_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetChassisFCM_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetChassisFCM_1_tAzureSynapseInput_1 = stmt_EQGetChassisFCM_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetChassisFCM_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetChassisFCM_1_tAzureSynapseInput_1 = rs_EQGetChassisFCM_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetChassisFCM_1_tAzureSynapseInput_1 = rsmd_EQGetChassisFCM_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetChassisFCM_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetChassisFCM_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetChassisFCM_1_tAzureSynapseInput_1 < 1) {
								EQGetChassisFCM_1_row1.VALUE = null;
							} else {
	                         		
           		tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1 = rs_EQGetChassisFCM_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetChassisFCM_1_tAzureSynapseInput_1 .contains(rsmd_EQGetChassisFCM_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetChassisFCM_1_row1.VALUE = FormatterUtils.formatUnwithE(tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1);
            	} else {
                	EQGetChassisFCM_1_row1.VALUE = tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetChassisFCM_1_row1.VALUE = null;
            }
		                    }
							if(colQtyInRs_EQGetChassisFCM_1_tAzureSynapseInput_1 < 2) {
								EQGetChassisFCM_1_row1.DESCRIPTION = null;
							} else {
	                         		
           		tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1 = rs_EQGetChassisFCM_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetChassisFCM_1_tAzureSynapseInput_1 .contains(rsmd_EQGetChassisFCM_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetChassisFCM_1_row1.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1);
            	} else {
                	EQGetChassisFCM_1_row1.DESCRIPTION = tmpContent_EQGetChassisFCM_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetChassisFCM_1_row1.DESCRIPTION = null;
            }
		                    }
					
						log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetChassisFCM_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetChassisFCM_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetChassisFCM_1_tAzureSynapseInput_1++;

/**
 * [EQGetChassisFCM_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisFCM_1_row1","EQGetChassisFCM_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetChassisFCM_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisFCM_1_row1 - " + (EQGetChassisFCM_1_row1==null? "": EQGetChassisFCM_1_row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetChassisFCM_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetChassisFCM_1_tMap_1 = false;
		boolean mainRowRejected_EQGetChassisFCM_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetChassisFCM_1_out1 = null;


// # Output table : 'EQGetChassisFCM_1_out1'
count_EQGetChassisFCM_1_out1_EQGetChassisFCM_1_tMap_1++;

EQGetChassisFCM_1_out1_tmp.ChassisFCM = "X";
EQGetChassisFCM_1_out1_tmp.VALUE = EQGetChassisFCM_1_row1.VALUE ;
EQGetChassisFCM_1_out1_tmp.Description = EQGetChassisFCM_1_row1.DESCRIPTION ;
EQGetChassisFCM_1_out1 = EQGetChassisFCM_1_out1_tmp;
log.debug("EQGetChassisFCM_1_tMap_1 - Outputting the record " + count_EQGetChassisFCM_1_out1_EQGetChassisFCM_1_tMap_1 + " of the output table 'EQGetChassisFCM_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetChassisFCM_1_tMap_1 = false;










 


	tos_count_EQGetChassisFCM_1_tMap_1++;

/**
 * [EQGetChassisFCM_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tMap_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetChassisFCM_1_out1"
if(EQGetChassisFCM_1_out1 != null) { 



	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisFCM_1_out1","EQGetChassisFCM_1_tMap_1","tMap_1","tMap","EQGetChassisFCM_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisFCM_1_out1 - " + (EQGetChassisFCM_1_out1==null? "": EQGetChassisFCM_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetChassisFCM_1_tWriteJSONField_1_Out++;
				log.debug("EQGetChassisFCM_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetChassisFCM_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetChassisFCM_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetChassisFCM_1_tWriteJSONField_1_Out helper_EQGetChassisFCM_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetChassisFCM_1_tWriteJSONField_1_Out();

	valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.put("ChassisFCM", helper_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString(
	(
		EQGetChassisFCM_1_out1.ChassisFCM != null?
            EQGetChassisFCM_1_out1.ChassisFCM.toString():null
		)));
	arraysValueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.put("ChassisFCM", helper_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString(
	(
		EQGetChassisFCM_1_out1.ChassisFCM != null?
            EQGetChassisFCM_1_out1.ChassisFCM.toString():null
		)));
	valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.put("VALUE", helper_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString(
	(
		EQGetChassisFCM_1_out1.VALUE != null?
            EQGetChassisFCM_1_out1.VALUE.toString():null
		)));
	arraysValueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.put("VALUE", helper_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString(
	(
		EQGetChassisFCM_1_out1.VALUE != null?
            EQGetChassisFCM_1_out1.VALUE.toString():null
		)));
	valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.put("Description", helper_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString(
	(
		EQGetChassisFCM_1_out1.Description != null?
            EQGetChassisFCM_1_out1.Description.toString():null
		)));
	arraysValueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.put("Description", helper_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString(
	(
		EQGetChassisFCM_1_out1.Description != null?
            EQGetChassisFCM_1_out1.Description.toString():null
		)));
		String strTemp_EQGetChassisFCM_1_tWriteJSONField_1_Out = "";		strTemp_EQGetChassisFCM_1_tWriteJSONField_1_Out = strTemp_EQGetChassisFCM_1_tWriteJSONField_1_Out + valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.get("ChassisFCM")
							+ valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.get("ChassisFCM").length();
	if(strCompCache_EQGetChassisFCM_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetChassisFCM_1_tWriteJSONField_1_Out=strTemp_EQGetChassisFCM_1_tWriteJSONField_1_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetChassisFCM_1_tWriteJSONField_1_Out.equals(strTemp_EQGetChassisFCM_1_tWriteJSONField_1_Out)){	  
    		nestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetChassisFCM_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetChassisFCM_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetChassisFCM_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetChassisFCM_1_tWriteJSONField_1_Out, format_EQGetChassisFCM_1_tWriteJSONField_1_Out);
			output_EQGetChassisFCM_1_tWriteJSONField_1_Out.write(doc_EQGetChassisFCM_1_tWriteJSONField_1_Out);
		    output_EQGetChassisFCM_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetChassisFCM_1_row5Struct row_EQGetChassisFCM_1_tWriteJSONField_1_Out = new EQGetChassisFCM_1_row5Struct();
						  
					     		row_EQGetChassisFCM_1_tWriteJSONField_1_Out.body = strWriter_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out.add(row_EQGetChassisFCM_1_tWriteJSONField_1_Out);
					
		    doc_EQGetChassisFCM_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetChassisFCM_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetChassisFCM_1_tWriteJSONField_1_Out=0;i_EQGetChassisFCM_1_tWriteJSONField_1_Out<orders_EQGetChassisFCM_1_tWriteJSONField_1_Out.length;i_EQGetChassisFCM_1_tWriteJSONField_1_Out++){
				orders_EQGetChassisFCM_1_tWriteJSONField_1_Out[i_EQGetChassisFCM_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetChassisFCM_1_tWriteJSONField_1_Out != null && groupbyList_EQGetChassisFCM_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetChassisFCM_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetChassisFCM_1_tWriteJSONField_1_Out=strTemp_EQGetChassisFCM_1_tWriteJSONField_1_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetChassisFCM_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetChassisFCM_1_tWriteJSONField_1_Out) {
		needRoot_EQGetChassisFCM_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetChassisFCM_1_tWriteJSONField_1_Out = doc_EQGetChassisFCM_1_tWriteJSONField_1_Out.addElement("ChassisFCM");
		subTreeRootParent_EQGetChassisFCM_1_tWriteJSONField_1_Out = root_EQGetChassisFCM_1_tWriteJSONField_1_Out;
		root4Group_EQGetChassisFCM_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetChassisFCM_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetChassisFCM_1_tWriteJSONField_1_Out=root4Group_EQGetChassisFCM_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetChassisFCM_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("ChassisFCM");
        if(orders_EQGetChassisFCM_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetChassisFCM_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetChassisFCM_1_tWriteJSONField_1_Out.length){
        		orders_EQGetChassisFCM_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetChassisFCM_1_tWriteJSONField_1_Out.elements().add(orders_EQGetChassisFCM_1_tWriteJSONField_1_Out[0]++,loop_EQGetChassisFCM_1_tWriteJSONField_1_Out);
		org.dom4j.Element loop_0_EQGetChassisFCM_1_tWriteJSONField_1_Out = loop_EQGetChassisFCM_1_tWriteJSONField_1_Out.addElement("VALUE");
		if(
		valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.get("VALUE")!=null){
			nestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out .setText(loop_0_EQGetChassisFCM_1_tWriteJSONField_1_Out,
		valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.get("VALUE"));
		}
		org.dom4j.Element loop_1_EQGetChassisFCM_1_tWriteJSONField_1_Out = loop_EQGetChassisFCM_1_tWriteJSONField_1_Out.addElement("Description");
		if(
		valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.get("Description")!=null){
			nestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out .setText(loop_1_EQGetChassisFCM_1_tWriteJSONField_1_Out,
		valueMap_EQGetChassisFCM_1_tWriteJSONField_1_Out.get("Description"));
		}

 


	tos_count_EQGetChassisFCM_1_tWriteJSONField_1_Out++;

/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_Out process_data_end ] stop
 */

} // End of branch "EQGetChassisFCM_1_out1"




	
	/**
	 * [EQGetChassisFCM_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tMap_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetChassisFCM_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetChassisFCM_1_tAzureSynapseInput_1 != null) {
		rs_EQGetChassisFCM_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetChassisFCM_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetChassisFCM_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetChassisFCM_1_tAzureSynapseInput_1 != null && !conn_EQGetChassisFCM_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetChassisFCM_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetChassisFCM_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetChassisFCM_1_tAzureSynapseInput_1);
	    		log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetChassisFCM_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetChassisFCM_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetChassisFCM_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetChassisFCM_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetChassisFCM_1_tMap_1 - Written records count in the table 'EQGetChassisFCM_1_out1': " + count_EQGetChassisFCM_1_out1_EQGetChassisFCM_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisFCM_1_row1",2,0,
			 			"EQGetChassisFCM_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetChassisFCM_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetChassisFCM_1_tMap_1", true);
end_Hash.put("EQGetChassisFCM_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetChassisFCM_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetChassisFCM_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetChassisFCM_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetChassisFCM_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetChassisFCM_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetChassisFCM_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetChassisFCM_1_tWriteJSONField_1_Out, format_EQGetChassisFCM_1_tWriteJSONField_1_Out);
	output_EQGetChassisFCM_1_tWriteJSONField_1_Out.write(doc_EQGetChassisFCM_1_tWriteJSONField_1_Out);
    output_EQGetChassisFCM_1_tWriteJSONField_1_Out.close();
					EQGetChassisFCM_1_row5Struct row_EQGetChassisFCM_1_tWriteJSONField_1_Out = new EQGetChassisFCM_1_row5Struct();
						  
					     		row_EQGetChassisFCM_1_tWriteJSONField_1_Out.body = strWriter_EQGetChassisFCM_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out.add(row_EQGetChassisFCM_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetChassisFCM_1_tWriteJSONField_1_Out);
globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetChassisFCM_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetChassisFCM_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetChassisFCM_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisFCM_1_out1",2,0,
			 			"EQGetChassisFCM_1_tMap_1","tMap_1","tMap","EQGetChassisFCM_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetChassisFCM_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tMap_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetChassisFCM_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetChassisFCM_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetChassisFCM_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetChassisFCM_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetChassisFCM_1_tWriteJSONField_1_Out");
	if (future_EQGetChassisFCM_1_tWriteJSONField_1_Out != null) {
		future_EQGetChassisFCM_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetChassisFCM_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetChassisPNs_1_out1Struct implements routines.system.IPersistableRow<EQGetChassisPNs_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ChassisPNs;

				public String getChassisPNs () {
					return this.ChassisPNs;
				}

				public Boolean ChassisPNsIsNullable(){
				    return true;
				}
				public Boolean ChassisPNsIsKey(){
				    return false;
				}
				public Integer ChassisPNsLength(){
				    return null;
				}
				public Integer ChassisPNsPrecision(){
				    return null;
				}
				public String ChassisPNsDefault(){
				
					return null;
				
				}
				public String ChassisPNsComment(){
				
				    return "";
				
				}
				public String ChassisPNsPattern(){
				
					return "";
				
				}
				public String ChassisPNsOriginalDbColumnName(){
				
					return "ChassisPNs";
				
				}

				
			    public String Value;

				public String getValue () {
					return this.Value;
				}

				public Boolean ValueIsNullable(){
				    return true;
				}
				public Boolean ValueIsKey(){
				    return false;
				}
				public Integer ValueLength(){
				    return null;
				}
				public Integer ValuePrecision(){
				    return null;
				}
				public String ValueDefault(){
				
					return null;
				
				}
				public String ValueComment(){
				
				    return "";
				
				}
				public String ValuePattern(){
				
					return "";
				
				}
				public String ValueOriginalDbColumnName(){
				
					return "Value";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ChassisPNs = readString(dis);
					
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ChassisPNs = readString(dis);
					
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ChassisPNs,dos);
					
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ChassisPNs,dos);
					
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ChassisPNs="+ChassisPNs);
		sb.append(",Value="+Value);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ChassisPNs == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ChassisPNs);
            			}
            		
        			sb.append("|");
        		
        				if(Value == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Value);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisPNs_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetChassisPNs_1_row1Struct implements routines.system.IPersistableRow<EQGetChassisPNs_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String Value;

				public String getValue () {
					return this.Value;
				}

				public Boolean ValueIsNullable(){
				    return true;
				}
				public Boolean ValueIsKey(){
				    return false;
				}
				public Integer ValueLength(){
				    return null;
				}
				public Integer ValuePrecision(){
				    return null;
				}
				public String ValueDefault(){
				
					return null;
				
				}
				public String ValueComment(){
				
				    return "";
				
				}
				public String ValuePattern(){
				
					return "";
				
				}
				public String ValueOriginalDbColumnName(){
				
					return "Value";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Value="+Value);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Value == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Value);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisPNs_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetChassisPNs_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetChassisPNs_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetChassisPNs_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetChassisPNs_1_row1Struct EQGetChassisPNs_1_row1 = new EQGetChassisPNs_1_row1Struct();
EQGetChassisPNs_1_out1Struct EQGetChassisPNs_1_out1 = new EQGetChassisPNs_1_out1Struct();





	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisPNs_1_out1");
			
		int tos_count_EQGetChassisPNs_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisPNs_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("ChassisPNs")+"}]");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetChassisPNs_1_tWriteJSONField_2");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisPNs_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisPNs_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetChassisPNs_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetChassisPNs_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetChassisPNs_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetChassisPNs_1_row2Struct> listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetChassisPNs_1_row2Struct>();
							
	
					class ThreadXMLField_EQGetChassisPNs_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetChassisPNs_1_row2Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetChassisPNs_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetChassisPNs_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetChassisPNs_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetChassisPNs_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetChassisPNs_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetChassisPNs_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetChassisPNs_1_tWriteJSONField_2_Out txf_EQGetChassisPNs_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetChassisPNs_1_tWriteJSONField_2_Out(listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetChassisPNs_1_tWriteJSONField_2_Out = es.submit(txf_EQGetChassisPNs_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetChassisPNs_1_tWriteJSONField_2_Out", future_EQGetChassisPNs_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetChassisPNs_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out nestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out();

EQGetChassisPNs_1_out1Struct  rowStructOutput_EQGetChassisPNs_1_tWriteJSONField_2_Out = new EQGetChassisPNs_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetChassisPNs_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetChassisPNs_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetChassisPNs_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetChassisPNs_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetChassisPNs_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetChassisPNs_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetChassisPNs_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetChassisPNs_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetChassisPNs_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisPNs_1_tMap_1", false);
		start_Hash.put("EQGetChassisPNs_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisPNs_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisPNs_1_row1");
			
		int tos_count_EQGetChassisPNs_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisPNs_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisPNs_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetChassisPNs_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetChassisPNs_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetChassisPNs_1_tMap_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetChassisPNs_1_tMap_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetChassisPNs_1_tMap_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetChassisPNs_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tMap_1 - "  + (log4jParamters_EQGetChassisPNs_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisPNs_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisPNs_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetChassisPNs_1_row1_EQGetChassisPNs_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetChassisPNs_1_out1_EQGetChassisPNs_1_tMap_1 = 0;
				
EQGetChassisPNs_1_out1Struct EQGetChassisPNs_1_out1_tmp = new EQGetChassisPNs_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetChassisPNs_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetChassisPNs_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisPNs_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetChassisPNs_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisPNs_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetChassisPNs_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisPNs_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetChassisPNs\"");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetChassisPNs;\"");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("Value")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("Description")+"}]");
                        log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetChassisPNs_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisPNs_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisPNs_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetChassisPNs_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetChassisPNs_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetChassisPNs_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetChassisPNs_1_tAzureSynapseInput_1, talendToDBArray_EQGetChassisPNs_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetChassisPNs_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetChassisPNs_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetChassisPNs_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetChassisPNs_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetChassisPNs_1_tAzureSynapseInput_1);
				String dbUser_EQGetChassisPNs_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetChassisPNs_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetChassisPNs_1_tAzureSynapseInput_1 = decryptedPassword_EQGetChassisPNs_1_tAzureSynapseInput_1;
				
		    String port_EQGetChassisPNs_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetChassisPNs_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetChassisPNs_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetChassisPNs_1_tAzureSynapseInput_1)) {
		    	url_EQGetChassisPNs_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetChassisPNs_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetChassisPNs_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetChassisPNs_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetChassisPNs_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetChassisPNs_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetChassisPNs_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetChassisPNs_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetChassisPNs_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetChassisPNs_1_tAzureSynapseInput_1,dbUser_EQGetChassisPNs_1_tAzureSynapseInput_1,dbPwd_EQGetChassisPNs_1_tAzureSynapseInput_1);
	    		log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetChassisPNs_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetChassisPNs_1_tAzureSynapseInput_1 = conn_EQGetChassisPNs_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetChassisPNs_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetChassisPNs;";
		    
	    		log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetChassisPNs_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetChassisPNs_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetChassisPNs_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetChassisPNs_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetChassisPNs_1_tAzureSynapseInput_1 = stmt_EQGetChassisPNs_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetChassisPNs_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetChassisPNs_1_tAzureSynapseInput_1 = rs_EQGetChassisPNs_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetChassisPNs_1_tAzureSynapseInput_1 = rsmd_EQGetChassisPNs_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetChassisPNs_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetChassisPNs_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetChassisPNs_1_tAzureSynapseInput_1 < 1) {
								EQGetChassisPNs_1_row1.Value = null;
							} else {
	                         		
           		tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1 = rs_EQGetChassisPNs_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetChassisPNs_1_tAzureSynapseInput_1 .contains(rsmd_EQGetChassisPNs_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetChassisPNs_1_row1.Value = FormatterUtils.formatUnwithE(tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1);
            	} else {
                	EQGetChassisPNs_1_row1.Value = tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetChassisPNs_1_row1.Value = null;
            }
		                    }
							if(colQtyInRs_EQGetChassisPNs_1_tAzureSynapseInput_1 < 2) {
								EQGetChassisPNs_1_row1.Description = null;
							} else {
	                         		
           		tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1 = rs_EQGetChassisPNs_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetChassisPNs_1_tAzureSynapseInput_1 .contains(rsmd_EQGetChassisPNs_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetChassisPNs_1_row1.Description = FormatterUtils.formatUnwithE(tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1);
            	} else {
                	EQGetChassisPNs_1_row1.Description = tmpContent_EQGetChassisPNs_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetChassisPNs_1_row1.Description = null;
            }
		                    }
					
						log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetChassisPNs_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetChassisPNs_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetChassisPNs_1_tAzureSynapseInput_1++;

/**
 * [EQGetChassisPNs_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisPNs_1_row1","EQGetChassisPNs_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetChassisPNs_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisPNs_1_row1 - " + (EQGetChassisPNs_1_row1==null? "": EQGetChassisPNs_1_row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetChassisPNs_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetChassisPNs_1_tMap_1 = false;
		boolean mainRowRejected_EQGetChassisPNs_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetChassisPNs_1_out1 = null;


// # Output table : 'EQGetChassisPNs_1_out1'
count_EQGetChassisPNs_1_out1_EQGetChassisPNs_1_tMap_1++;

EQGetChassisPNs_1_out1_tmp.ChassisPNs = "X";
EQGetChassisPNs_1_out1_tmp.Value = EQGetChassisPNs_1_row1.Value;
EQGetChassisPNs_1_out1_tmp.Description = EQGetChassisPNs_1_row1.Description;
EQGetChassisPNs_1_out1 = EQGetChassisPNs_1_out1_tmp;
log.debug("EQGetChassisPNs_1_tMap_1 - Outputting the record " + count_EQGetChassisPNs_1_out1_EQGetChassisPNs_1_tMap_1 + " of the output table 'EQGetChassisPNs_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetChassisPNs_1_tMap_1 = false;










 


	tos_count_EQGetChassisPNs_1_tMap_1++;

/**
 * [EQGetChassisPNs_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tMap_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetChassisPNs_1_out1"
if(EQGetChassisPNs_1_out1 != null) { 



	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisPNs_1_out1","EQGetChassisPNs_1_tMap_1","tMap_1","tMap","EQGetChassisPNs_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisPNs_1_out1 - " + (EQGetChassisPNs_1_out1==null? "": EQGetChassisPNs_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetChassisPNs_1_tWriteJSONField_2_Out++;
				log.debug("EQGetChassisPNs_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetChassisPNs_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetChassisPNs_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetChassisPNs_1_tWriteJSONField_2_Out helper_EQGetChassisPNs_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetChassisPNs_1_tWriteJSONField_2_Out();

	valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.put("ChassisPNs", helper_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetChassisPNs_1_out1.ChassisPNs != null?
            EQGetChassisPNs_1_out1.ChassisPNs.toString():null
		)));
	arraysValueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.put("ChassisPNs", helper_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetChassisPNs_1_out1.ChassisPNs != null?
            EQGetChassisPNs_1_out1.ChassisPNs.toString():null
		)));
	valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.put("Value", helper_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetChassisPNs_1_out1.Value != null?
            EQGetChassisPNs_1_out1.Value.toString():null
		)));
	arraysValueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.put("Value", helper_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetChassisPNs_1_out1.Value != null?
            EQGetChassisPNs_1_out1.Value.toString():null
		)));
	valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.put("Description", helper_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetChassisPNs_1_out1.Description != null?
            EQGetChassisPNs_1_out1.Description.toString():null
		)));
	arraysValueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.put("Description", helper_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetChassisPNs_1_out1.Description != null?
            EQGetChassisPNs_1_out1.Description.toString():null
		)));
		String strTemp_EQGetChassisPNs_1_tWriteJSONField_2_Out = "";		strTemp_EQGetChassisPNs_1_tWriteJSONField_2_Out = strTemp_EQGetChassisPNs_1_tWriteJSONField_2_Out + valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.get("ChassisPNs")
							+ valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.get("ChassisPNs").length();
	if(strCompCache_EQGetChassisPNs_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetChassisPNs_1_tWriteJSONField_2_Out=strTemp_EQGetChassisPNs_1_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetChassisPNs_1_tWriteJSONField_2_Out.equals(strTemp_EQGetChassisPNs_1_tWriteJSONField_2_Out)){	  
    		nestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetChassisPNs_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetChassisPNs_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetChassisPNs_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetChassisPNs_1_tWriteJSONField_2_Out, format_EQGetChassisPNs_1_tWriteJSONField_2_Out);
			output_EQGetChassisPNs_1_tWriteJSONField_2_Out.write(doc_EQGetChassisPNs_1_tWriteJSONField_2_Out);
		    output_EQGetChassisPNs_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetChassisPNs_1_row2Struct row_EQGetChassisPNs_1_tWriteJSONField_2_Out = new EQGetChassisPNs_1_row2Struct();
						  
					     		row_EQGetChassisPNs_1_tWriteJSONField_2_Out.body = strWriter_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out.add(row_EQGetChassisPNs_1_tWriteJSONField_2_Out);
					
		    doc_EQGetChassisPNs_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetChassisPNs_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetChassisPNs_1_tWriteJSONField_2_Out=0;i_EQGetChassisPNs_1_tWriteJSONField_2_Out<orders_EQGetChassisPNs_1_tWriteJSONField_2_Out.length;i_EQGetChassisPNs_1_tWriteJSONField_2_Out++){
				orders_EQGetChassisPNs_1_tWriteJSONField_2_Out[i_EQGetChassisPNs_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetChassisPNs_1_tWriteJSONField_2_Out != null && groupbyList_EQGetChassisPNs_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetChassisPNs_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetChassisPNs_1_tWriteJSONField_2_Out=strTemp_EQGetChassisPNs_1_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetChassisPNs_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetChassisPNs_1_tWriteJSONField_2_Out) {
		needRoot_EQGetChassisPNs_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetChassisPNs_1_tWriteJSONField_2_Out = doc_EQGetChassisPNs_1_tWriteJSONField_2_Out.addElement("ChassisPNs");
		subTreeRootParent_EQGetChassisPNs_1_tWriteJSONField_2_Out = root_EQGetChassisPNs_1_tWriteJSONField_2_Out;
		root4Group_EQGetChassisPNs_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetChassisPNs_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetChassisPNs_1_tWriteJSONField_2_Out=root4Group_EQGetChassisPNs_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetChassisPNs_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("ChassisPNs");
        if(orders_EQGetChassisPNs_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetChassisPNs_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetChassisPNs_1_tWriteJSONField_2_Out.length){
        		orders_EQGetChassisPNs_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetChassisPNs_1_tWriteJSONField_2_Out.elements().add(orders_EQGetChassisPNs_1_tWriteJSONField_2_Out[0]++,loop_EQGetChassisPNs_1_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_EQGetChassisPNs_1_tWriteJSONField_2_Out = loop_EQGetChassisPNs_1_tWriteJSONField_2_Out.addElement("Value");
		if(
		valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.get("Value")!=null){
			nestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out .setText(loop_0_EQGetChassisPNs_1_tWriteJSONField_2_Out,
		valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.get("Value"));
		}
		org.dom4j.Element loop_1_EQGetChassisPNs_1_tWriteJSONField_2_Out = loop_EQGetChassisPNs_1_tWriteJSONField_2_Out.addElement("Description");
		if(
		valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.get("Description")!=null){
			nestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out .setText(loop_1_EQGetChassisPNs_1_tWriteJSONField_2_Out,
		valueMap_EQGetChassisPNs_1_tWriteJSONField_2_Out.get("Description"));
		}

 


	tos_count_EQGetChassisPNs_1_tWriteJSONField_2_Out++;

/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "EQGetChassisPNs_1_out1"




	
	/**
	 * [EQGetChassisPNs_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tMap_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetChassisPNs_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetChassisPNs_1_tAzureSynapseInput_1 != null) {
		rs_EQGetChassisPNs_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetChassisPNs_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetChassisPNs_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetChassisPNs_1_tAzureSynapseInput_1 != null && !conn_EQGetChassisPNs_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetChassisPNs_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetChassisPNs_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetChassisPNs_1_tAzureSynapseInput_1);
	    		log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetChassisPNs_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetChassisPNs_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetChassisPNs_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetChassisPNs_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetChassisPNs_1_tMap_1 - Written records count in the table 'EQGetChassisPNs_1_out1': " + count_EQGetChassisPNs_1_out1_EQGetChassisPNs_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisPNs_1_row1",2,0,
			 			"EQGetChassisPNs_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetChassisPNs_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetChassisPNs_1_tMap_1", true);
end_Hash.put("EQGetChassisPNs_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetChassisPNs_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetChassisPNs_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetChassisPNs_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetChassisPNs_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetChassisPNs_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetChassisPNs_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetChassisPNs_1_tWriteJSONField_2_Out, format_EQGetChassisPNs_1_tWriteJSONField_2_Out);
	output_EQGetChassisPNs_1_tWriteJSONField_2_Out.write(doc_EQGetChassisPNs_1_tWriteJSONField_2_Out);
    output_EQGetChassisPNs_1_tWriteJSONField_2_Out.close();
					EQGetChassisPNs_1_row2Struct row_EQGetChassisPNs_1_tWriteJSONField_2_Out = new EQGetChassisPNs_1_row2Struct();
						  
					     		row_EQGetChassisPNs_1_tWriteJSONField_2_Out.body = strWriter_EQGetChassisPNs_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out.add(row_EQGetChassisPNs_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetChassisPNs_1_tWriteJSONField_2_Out);
globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetChassisPNs_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetChassisPNs_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetChassisPNs_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisPNs_1_out1",2,0,
			 			"EQGetChassisPNs_1_tMap_1","tMap_1","tMap","EQGetChassisPNs_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetChassisPNs_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tMap_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetChassisPNs_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetChassisPNs_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetChassisPNs_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetChassisPNs_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetChassisPNs_1_tWriteJSONField_2_Out");
	if (future_EQGetChassisPNs_1_tWriteJSONField_2_Out != null) {
		future_EQGetChassisPNs_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetChassisPNs_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCountertopPNs_1_out1Struct implements routines.system.IPersistableRow<EQGetCountertopPNs_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String CountertopPNs;

				public String getCountertopPNs () {
					return this.CountertopPNs;
				}

				public Boolean CountertopPNsIsNullable(){
				    return true;
				}
				public Boolean CountertopPNsIsKey(){
				    return false;
				}
				public Integer CountertopPNsLength(){
				    return null;
				}
				public Integer CountertopPNsPrecision(){
				    return null;
				}
				public String CountertopPNsDefault(){
				
					return null;
				
				}
				public String CountertopPNsComment(){
				
				    return "";
				
				}
				public String CountertopPNsPattern(){
				
					return "";
				
				}
				public String CountertopPNsOriginalDbColumnName(){
				
					return "CountertopPNs";
				
				}

				
			    public String Value;

				public String getValue () {
					return this.Value;
				}

				public Boolean ValueIsNullable(){
				    return true;
				}
				public Boolean ValueIsKey(){
				    return false;
				}
				public Integer ValueLength(){
				    return null;
				}
				public Integer ValuePrecision(){
				    return null;
				}
				public String ValueDefault(){
				
					return null;
				
				}
				public String ValueComment(){
				
				    return "";
				
				}
				public String ValuePattern(){
				
					return "";
				
				}
				public String ValueOriginalDbColumnName(){
				
					return "Value";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CountertopPNs = readString(dis);
					
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CountertopPNs = readString(dis);
					
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CountertopPNs,dos);
					
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CountertopPNs,dos);
					
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CountertopPNs="+CountertopPNs);
		sb.append(",Value="+Value);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(CountertopPNs == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CountertopPNs);
            			}
            		
        			sb.append("|");
        		
        				if(Value == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Value);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCountertopPNs_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetCountertopPNs_1_row2Struct implements routines.system.IPersistableRow<EQGetCountertopPNs_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String Value;

				public String getValue () {
					return this.Value;
				}

				public Boolean ValueIsNullable(){
				    return true;
				}
				public Boolean ValueIsKey(){
				    return false;
				}
				public Integer ValueLength(){
				    return null;
				}
				public Integer ValuePrecision(){
				    return null;
				}
				public String ValueDefault(){
				
					return null;
				
				}
				public String ValueComment(){
				
				    return "";
				
				}
				public String ValuePattern(){
				
					return "";
				
				}
				public String ValueOriginalDbColumnName(){
				
					return "Value";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Value="+Value);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Value == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Value);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCountertopPNs_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCountertopPNs_1_tAzureSynapseInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCountertopPNs_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCountertopPNs_1_tAzureSynapseInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCountertopPNs_1_row2Struct EQGetCountertopPNs_1_row2 = new EQGetCountertopPNs_1_row2Struct();
EQGetCountertopPNs_1_out1Struct EQGetCountertopPNs_1_out1 = new EQGetCountertopPNs_1_out1Struct();





	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCountertopPNs_1_out1");
			
		int tos_count_EQGetCountertopPNs_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCountertopPNs_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("CountertopPNs")+"}]");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetCountertopPNs_1_tWriteJSONField_2");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetCountertopPNs_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCountertopPNs_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetCountertopPNs_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetCountertopPNs_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetCountertopPNs_1_row3Struct> listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetCountertopPNs_1_row3Struct>();
							
	
					class ThreadXMLField_EQGetCountertopPNs_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetCountertopPNs_1_row3Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetCountertopPNs_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetCountertopPNs_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetCountertopPNs_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetCountertopPNs_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetCountertopPNs_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetCountertopPNs_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetCountertopPNs_1_tWriteJSONField_2_Out txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetCountertopPNs_1_tWriteJSONField_2_Out(listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetCountertopPNs_1_tWriteJSONField_2_Out = es.submit(txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetCountertopPNs_1_tWriteJSONField_2_Out", future_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out nestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out();

EQGetCountertopPNs_1_out1Struct  rowStructOutput_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new EQGetCountertopPNs_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetCountertopPNs_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetCountertopPNs_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetCountertopPNs_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetCountertopPNs_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetCountertopPNs_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetCountertopPNs_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetCountertopPNs_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCountertopPNs_1_tMap_1", false);
		start_Hash.put("EQGetCountertopPNs_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCountertopPNs_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCountertopPNs_1_row2");
			
		int tos_count_EQGetCountertopPNs_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCountertopPNs_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCountertopPNs_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetCountertopPNs_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetCountertopPNs_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetCountertopPNs_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetCountertopPNs_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetCountertopPNs_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetCountertopPNs_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tMap_1 - "  + (log4jParamters_EQGetCountertopPNs_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCountertopPNs_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCountertopPNs_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetCountertopPNs_1_row2_EQGetCountertopPNs_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetCountertopPNs_1_out1_EQGetCountertopPNs_1_tMap_1 = 0;
				
EQGetCountertopPNs_1_out1Struct EQGetCountertopPNs_1_out1_tmp = new EQGetCountertopPNs_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetCountertopPNs_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCountertopPNs_1_tAzureSynapseInput_2", false);
		start_Hash.put("EQGetCountertopPNs_1_tAzureSynapseInput_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCountertopPNs_1_tAzureSynapseInput_2";
	
	
		int tos_count_EQGetCountertopPNs_1_tAzureSynapseInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCountertopPNs_1_tAzureSynapseInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2 = new StringBuilder();
                    log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("Parameters:");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("TABLE" + " = " + "\"EQGetCountertopPNs\"");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetCountertopPNs;\"");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("Value")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("Description")+"}]");
                        log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - "  + (log4jParamters_EQGetCountertopPNs_1_tAzureSynapseInput_2) );
                    } 
                } 
            new BytesLimit65535_EQGetCountertopPNs_1_tAzureSynapseInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCountertopPNs_1_tAzureSynapseInput_2", "tAzureSynapseInput_2", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetCountertopPNs_1_tAzureSynapseInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetCountertopPNs_1_tAzureSynapseInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetCountertopPNs_1_tAzureSynapseInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetCountertopPNs_1_tAzureSynapseInput_2, talendToDBArray_EQGetCountertopPNs_1_tAzureSynapseInput_2); 
		    int nb_line_EQGetCountertopPNs_1_tAzureSynapseInput_2 = 0;
		    java.sql.Connection conn_EQGetCountertopPNs_1_tAzureSynapseInput_2 = null;
				String driverClass_EQGetCountertopPNs_1_tAzureSynapseInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetCountertopPNs_1_tAzureSynapseInput_2 = java.lang.Class.forName(driverClass_EQGetCountertopPNs_1_tAzureSynapseInput_2);
				String dbUser_EQGetCountertopPNs_1_tAzureSynapseInput_2 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetCountertopPNs_1_tAzureSynapseInput_2 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetCountertopPNs_1_tAzureSynapseInput_2 = decryptedPassword_EQGetCountertopPNs_1_tAzureSynapseInput_2;
				
		    String port_EQGetCountertopPNs_1_tAzureSynapseInput_2 = "1433";
		    String dbname_EQGetCountertopPNs_1_tAzureSynapseInput_2 = context.Azure_DW_DB ;		    
		    String url_EQGetCountertopPNs_1_tAzureSynapseInput_2 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetCountertopPNs_1_tAzureSynapseInput_2)) {
		    	url_EQGetCountertopPNs_1_tAzureSynapseInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetCountertopPNs_1_tAzureSynapseInput_2)) {		    
		    	url_EQGetCountertopPNs_1_tAzureSynapseInput_2 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetCountertopPNs_1_tAzureSynapseInput_2 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetCountertopPNs_1_tAzureSynapseInput_2 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Driver ClassName: "+driverClass_EQGetCountertopPNs_1_tAzureSynapseInput_2+".");
			
	    		log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Connection attempt to '" + url_EQGetCountertopPNs_1_tAzureSynapseInput_2 + "' with the username '" + dbUser_EQGetCountertopPNs_1_tAzureSynapseInput_2 + "'.");
			
				conn_EQGetCountertopPNs_1_tAzureSynapseInput_2 = java.sql.DriverManager.getConnection(url_EQGetCountertopPNs_1_tAzureSynapseInput_2,dbUser_EQGetCountertopPNs_1_tAzureSynapseInput_2,dbPwd_EQGetCountertopPNs_1_tAzureSynapseInput_2);
	    		log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Connection to '" + url_EQGetCountertopPNs_1_tAzureSynapseInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetCountertopPNs_1_tAzureSynapseInput_2 = conn_EQGetCountertopPNs_1_tAzureSynapseInput_2.createStatement();

		    String dbquery_EQGetCountertopPNs_1_tAzureSynapseInput_2 = "SELECT * FROM ITG.EQGetCountertopPNs;";
		    
	    		log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Executing the query: '" + dbquery_EQGetCountertopPNs_1_tAzureSynapseInput_2 + "'.");
			

            	globalMap.put("EQGetCountertopPNs_1_tAzureSynapseInput_2_QUERY",dbquery_EQGetCountertopPNs_1_tAzureSynapseInput_2);
		    java.sql.ResultSet rs_EQGetCountertopPNs_1_tAzureSynapseInput_2 = null;

		    try {
		    	rs_EQGetCountertopPNs_1_tAzureSynapseInput_2 = stmt_EQGetCountertopPNs_1_tAzureSynapseInput_2.executeQuery(dbquery_EQGetCountertopPNs_1_tAzureSynapseInput_2);
		    	java.sql.ResultSetMetaData rsmd_EQGetCountertopPNs_1_tAzureSynapseInput_2 = rs_EQGetCountertopPNs_1_tAzureSynapseInput_2.getMetaData();
		    	int colQtyInRs_EQGetCountertopPNs_1_tAzureSynapseInput_2 = rsmd_EQGetCountertopPNs_1_tAzureSynapseInput_2.getColumnCount();

		    String tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2 = null;
		    
		    
		    	log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Retrieving records from the database.");
		    
		    while (rs_EQGetCountertopPNs_1_tAzureSynapseInput_2.next()) {
		        nb_line_EQGetCountertopPNs_1_tAzureSynapseInput_2++;
		        
							if(colQtyInRs_EQGetCountertopPNs_1_tAzureSynapseInput_2 < 1) {
								EQGetCountertopPNs_1_row2.Value = null;
							} else {
	                         		
           		tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2 = rs_EQGetCountertopPNs_1_tAzureSynapseInput_2.getString(1);
            if(tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetCountertopPNs_1_tAzureSynapseInput_2 .contains(rsmd_EQGetCountertopPNs_1_tAzureSynapseInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCountertopPNs_1_row2.Value = FormatterUtils.formatUnwithE(tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2);
            	} else {
                	EQGetCountertopPNs_1_row2.Value = tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetCountertopPNs_1_row2.Value = null;
            }
		                    }
							if(colQtyInRs_EQGetCountertopPNs_1_tAzureSynapseInput_2 < 2) {
								EQGetCountertopPNs_1_row2.Description = null;
							} else {
	                         		
           		tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2 = rs_EQGetCountertopPNs_1_tAzureSynapseInput_2.getString(2);
            if(tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetCountertopPNs_1_tAzureSynapseInput_2 .contains(rsmd_EQGetCountertopPNs_1_tAzureSynapseInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCountertopPNs_1_row2.Description = FormatterUtils.formatUnwithE(tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2);
            	} else {
                	EQGetCountertopPNs_1_row2.Description = tmpContent_EQGetCountertopPNs_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetCountertopPNs_1_row2.Description = null;
            }
		                    }
					
						log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Retrieving the record " + nb_line_EQGetCountertopPNs_1_tAzureSynapseInput_2 + ".");
					





 



/**
 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 begin ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tAzureSynapseInput_2";
	
	

 


	tos_count_EQGetCountertopPNs_1_tAzureSynapseInput_2++;

/**
 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 main ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 process_data_begin ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCountertopPNs_1_row2","EQGetCountertopPNs_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetCountertopPNs_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCountertopPNs_1_row2 - " + (EQGetCountertopPNs_1_row2==null? "": EQGetCountertopPNs_1_row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetCountertopPNs_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetCountertopPNs_1_tMap_1 = false;
		boolean mainRowRejected_EQGetCountertopPNs_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetCountertopPNs_1_out1 = null;


// # Output table : 'EQGetCountertopPNs_1_out1'
count_EQGetCountertopPNs_1_out1_EQGetCountertopPNs_1_tMap_1++;

EQGetCountertopPNs_1_out1_tmp.CountertopPNs = "X";
EQGetCountertopPNs_1_out1_tmp.Value = EQGetCountertopPNs_1_row2.Value;
EQGetCountertopPNs_1_out1_tmp.Description = EQGetCountertopPNs_1_row2.Description;
EQGetCountertopPNs_1_out1 = EQGetCountertopPNs_1_out1_tmp;
log.debug("EQGetCountertopPNs_1_tMap_1 - Outputting the record " + count_EQGetCountertopPNs_1_out1_EQGetCountertopPNs_1_tMap_1 + " of the output table 'EQGetCountertopPNs_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetCountertopPNs_1_tMap_1 = false;










 


	tos_count_EQGetCountertopPNs_1_tMap_1++;

/**
 * [EQGetCountertopPNs_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tMap_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetCountertopPNs_1_out1"
if(EQGetCountertopPNs_1_out1 != null) { 



	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCountertopPNs_1_out1","EQGetCountertopPNs_1_tMap_1","tMap_1","tMap","EQGetCountertopPNs_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCountertopPNs_1_out1 - " + (EQGetCountertopPNs_1_out1==null? "": EQGetCountertopPNs_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_Out++;
				log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetCountertopPNs_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetCountertopPNs_1_tWriteJSONField_2_Out helper_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetCountertopPNs_1_tWriteJSONField_2_Out();

	valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.put("CountertopPNs", helper_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCountertopPNs_1_out1.CountertopPNs != null?
            EQGetCountertopPNs_1_out1.CountertopPNs.toString():null
		)));
	arraysValueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.put("CountertopPNs", helper_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCountertopPNs_1_out1.CountertopPNs != null?
            EQGetCountertopPNs_1_out1.CountertopPNs.toString():null
		)));
	valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.put("Value", helper_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCountertopPNs_1_out1.Value != null?
            EQGetCountertopPNs_1_out1.Value.toString():null
		)));
	arraysValueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.put("Value", helper_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCountertopPNs_1_out1.Value != null?
            EQGetCountertopPNs_1_out1.Value.toString():null
		)));
	valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.put("Description", helper_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCountertopPNs_1_out1.Description != null?
            EQGetCountertopPNs_1_out1.Description.toString():null
		)));
	arraysValueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.put("Description", helper_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCountertopPNs_1_out1.Description != null?
            EQGetCountertopPNs_1_out1.Description.toString():null
		)));
		String strTemp_EQGetCountertopPNs_1_tWriteJSONField_2_Out = "";		strTemp_EQGetCountertopPNs_1_tWriteJSONField_2_Out = strTemp_EQGetCountertopPNs_1_tWriteJSONField_2_Out + valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get("CountertopPNs")
							+ valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get("CountertopPNs").length();
	if(strCompCache_EQGetCountertopPNs_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetCountertopPNs_1_tWriteJSONField_2_Out=strTemp_EQGetCountertopPNs_1_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetCountertopPNs_1_tWriteJSONField_2_Out.equals(strTemp_EQGetCountertopPNs_1_tWriteJSONField_2_Out)){	  
    		nestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCountertopPNs_1_tWriteJSONField_2_Out, format_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
			output_EQGetCountertopPNs_1_tWriteJSONField_2_Out.write(doc_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
		    output_EQGetCountertopPNs_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetCountertopPNs_1_row3Struct row_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new EQGetCountertopPNs_1_row3Struct();
						  
					     		row_EQGetCountertopPNs_1_tWriteJSONField_2_Out.body = strWriter_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out.add(row_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
					
		    doc_EQGetCountertopPNs_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetCountertopPNs_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetCountertopPNs_1_tWriteJSONField_2_Out=0;i_EQGetCountertopPNs_1_tWriteJSONField_2_Out<orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out.length;i_EQGetCountertopPNs_1_tWriteJSONField_2_Out++){
				orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out[i_EQGetCountertopPNs_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetCountertopPNs_1_tWriteJSONField_2_Out != null && groupbyList_EQGetCountertopPNs_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetCountertopPNs_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetCountertopPNs_1_tWriteJSONField_2_Out=strTemp_EQGetCountertopPNs_1_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetCountertopPNs_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetCountertopPNs_1_tWriteJSONField_2_Out) {
		needRoot_EQGetCountertopPNs_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetCountertopPNs_1_tWriteJSONField_2_Out = doc_EQGetCountertopPNs_1_tWriteJSONField_2_Out.addElement("CountertopPNs");
		subTreeRootParent_EQGetCountertopPNs_1_tWriteJSONField_2_Out = root_EQGetCountertopPNs_1_tWriteJSONField_2_Out;
		root4Group_EQGetCountertopPNs_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetCountertopPNs_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetCountertopPNs_1_tWriteJSONField_2_Out=root4Group_EQGetCountertopPNs_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetCountertopPNs_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("CountertopPNs");
        if(orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out.length){
        		orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetCountertopPNs_1_tWriteJSONField_2_Out.elements().add(orders_EQGetCountertopPNs_1_tWriteJSONField_2_Out[0]++,loop_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_EQGetCountertopPNs_1_tWriteJSONField_2_Out = loop_EQGetCountertopPNs_1_tWriteJSONField_2_Out.addElement("Value");
		if(
		valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get("Value")!=null){
			nestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out .setText(loop_0_EQGetCountertopPNs_1_tWriteJSONField_2_Out,
		valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get("Value"));
		}
		org.dom4j.Element loop_1_EQGetCountertopPNs_1_tWriteJSONField_2_Out = loop_EQGetCountertopPNs_1_tWriteJSONField_2_Out.addElement("Description");
		if(
		valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get("Description")!=null){
			nestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out .setText(loop_1_EQGetCountertopPNs_1_tWriteJSONField_2_Out,
		valueMap_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get("Description"));
		}

 


	tos_count_EQGetCountertopPNs_1_tWriteJSONField_2_Out++;

/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "EQGetCountertopPNs_1_out1"




	
	/**
	 * [EQGetCountertopPNs_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tMap_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tAzureSynapseInput_2";
	
	

	}
}finally{
	if (rs_EQGetCountertopPNs_1_tAzureSynapseInput_2 != null) {
		rs_EQGetCountertopPNs_1_tAzureSynapseInput_2.close();
	}
	if (stmt_EQGetCountertopPNs_1_tAzureSynapseInput_2 != null) {
		stmt_EQGetCountertopPNs_1_tAzureSynapseInput_2.close();
	}
		if(conn_EQGetCountertopPNs_1_tAzureSynapseInput_2 != null && !conn_EQGetCountertopPNs_1_tAzureSynapseInput_2.isClosed()) {
			
	    		log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Closing the connection to the database.");
			
			conn_EQGetCountertopPNs_1_tAzureSynapseInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetCountertopPNs_1_tAzureSynapseInput_2_NB_LINE",nb_line_EQGetCountertopPNs_1_tAzureSynapseInput_2);
	    		log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - Retrieved records count: "+nb_line_EQGetCountertopPNs_1_tAzureSynapseInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tAzureSynapseInput_2 - "  + ("Done.") );

ok_Hash.put("EQGetCountertopPNs_1_tAzureSynapseInput_2", true);
end_Hash.put("EQGetCountertopPNs_1_tAzureSynapseInput_2", System.currentTimeMillis());




/**
 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 end ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetCountertopPNs_1_tMap_1 - Written records count in the table 'EQGetCountertopPNs_1_out1': " + count_EQGetCountertopPNs_1_out1_EQGetCountertopPNs_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCountertopPNs_1_row2",2,0,
			 			"EQGetCountertopPNs_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetCountertopPNs_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetCountertopPNs_1_tMap_1", true);
end_Hash.put("EQGetCountertopPNs_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetCountertopPNs_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetCountertopPNs_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCountertopPNs_1_tWriteJSONField_2_Out, format_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
	output_EQGetCountertopPNs_1_tWriteJSONField_2_Out.write(doc_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
    output_EQGetCountertopPNs_1_tWriteJSONField_2_Out.close();
					EQGetCountertopPNs_1_row3Struct row_EQGetCountertopPNs_1_tWriteJSONField_2_Out = new EQGetCountertopPNs_1_row3Struct();
						  
					     		row_EQGetCountertopPNs_1_tWriteJSONField_2_Out.body = strWriter_EQGetCountertopPNs_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out.add(row_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_Out);
globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetCountertopPNs_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetCountertopPNs_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCountertopPNs_1_out1",2,0,
			 			"EQGetCountertopPNs_1_tMap_1","tMap_1","tMap","EQGetCountertopPNs_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCountertopPNs_1_tAzureSynapseInput_2 finally ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tMap_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetCountertopPNs_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetCountertopPNs_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCountertopPNs_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetCountertopPNs_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetCountertopPNs_1_tWriteJSONField_2_Out");
	if (future_EQGetCountertopPNs_1_tWriteJSONField_2_Out != null) {
		future_EQGetCountertopPNs_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCountertopPNs_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCTSkinPn_1_out1Struct implements routines.system.IPersistableRow<EQGetCTSkinPn_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String CTSkinPn;

				public String getCTSkinPn () {
					return this.CTSkinPn;
				}

				public Boolean CTSkinPnIsNullable(){
				    return true;
				}
				public Boolean CTSkinPnIsKey(){
				    return false;
				}
				public Integer CTSkinPnLength(){
				    return null;
				}
				public Integer CTSkinPnPrecision(){
				    return null;
				}
				public String CTSkinPnDefault(){
				
					return null;
				
				}
				public String CTSkinPnComment(){
				
				    return "";
				
				}
				public String CTSkinPnPattern(){
				
					return "";
				
				}
				public String CTSkinPnOriginalDbColumnName(){
				
					return "CTSkinPn";
				
				}

				
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}

				public Boolean DESCRIPTIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPTIONIsKey(){
				    return false;
				}
				public Integer DESCRIPTIONLength(){
				    return null;
				}
				public Integer DESCRIPTIONPrecision(){
				    return null;
				}
				public String DESCRIPTIONDefault(){
				
					return null;
				
				}
				public String DESCRIPTIONComment(){
				
				    return "";
				
				}
				public String DESCRIPTIONPattern(){
				
					return "";
				
				}
				public String DESCRIPTIONOriginalDbColumnName(){
				
					return "DESCRIPTION";
				
				}

				
			    public Integer STOPPED;

				public Integer getSTOPPED () {
					return this.STOPPED;
				}

				public Boolean STOPPEDIsNullable(){
				    return true;
				}
				public Boolean STOPPEDIsKey(){
				    return false;
				}
				public Integer STOPPEDLength(){
				    return null;
				}
				public Integer STOPPEDPrecision(){
				    return null;
				}
				public String STOPPEDDefault(){
				
					return null;
				
				}
				public String STOPPEDComment(){
				
				    return "";
				
				}
				public String STOPPEDPattern(){
				
					return "";
				
				}
				public String STOPPEDOriginalDbColumnName(){
				
					return "STOPPED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CTSkinPn = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CTSkinPn = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CTSkinPn,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CTSkinPn,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CTSkinPn="+CTSkinPn);
		sb.append(",VALUE="+VALUE);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STOPPED="+String.valueOf(STOPPED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(CTSkinPn == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CTSkinPn);
            			}
            		
        			sb.append("|");
        		
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(DESCRIPTION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DESCRIPTION);
            			}
            		
        			sb.append("|");
        		
        				if(STOPPED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOPPED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSkinPn_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetCTSkinPn_1_row2Struct implements routines.system.IPersistableRow<EQGetCTSkinPn_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}

				public Boolean DESCRIPTIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPTIONIsKey(){
				    return false;
				}
				public Integer DESCRIPTIONLength(){
				    return null;
				}
				public Integer DESCRIPTIONPrecision(){
				    return null;
				}
				public String DESCRIPTIONDefault(){
				
					return null;
				
				}
				public String DESCRIPTIONComment(){
				
				    return "";
				
				}
				public String DESCRIPTIONPattern(){
				
					return "";
				
				}
				public String DESCRIPTIONOriginalDbColumnName(){
				
					return "DESCRIPTION";
				
				}

				
			    public Integer STOPPED;

				public Integer getSTOPPED () {
					return this.STOPPED;
				}

				public Boolean STOPPEDIsNullable(){
				    return true;
				}
				public Boolean STOPPEDIsKey(){
				    return false;
				}
				public Integer STOPPEDLength(){
				    return null;
				}
				public Integer STOPPEDPrecision(){
				    return null;
				}
				public String STOPPEDDefault(){
				
					return null;
				
				}
				public String STOPPEDComment(){
				
				    return "";
				
				}
				public String STOPPEDPattern(){
				
					return "";
				
				}
				public String STOPPEDOriginalDbColumnName(){
				
					return "STOPPED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALUE="+VALUE);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STOPPED="+String.valueOf(STOPPED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(DESCRIPTION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DESCRIPTION);
            			}
            		
        			sb.append("|");
        		
        				if(STOPPED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOPPED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSkinPn_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCTSkinPn_1_tAzureSynapseInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCTSkinPn_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCTSkinPn_1_tAzureSynapseInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCTSkinPn_1_row2Struct EQGetCTSkinPn_1_row2 = new EQGetCTSkinPn_1_row2Struct();
EQGetCTSkinPn_1_out1Struct EQGetCTSkinPn_1_out1 = new EQGetCTSkinPn_1_out1Struct();





	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSkinPn_1_out1");
			
		int tos_count_EQGetCTSkinPn_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSkinPn_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("CTSkinPn")+"}]");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetCTSkinPn_1_tWriteJSONField_2");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSkinPn_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSkinPn_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetCTSkinPn_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetCTSkinPn_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetCTSkinPn_1_row3Struct> listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetCTSkinPn_1_row3Struct>();
							
	
					class ThreadXMLField_EQGetCTSkinPn_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetCTSkinPn_1_row3Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetCTSkinPn_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetCTSkinPn_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetCTSkinPn_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetCTSkinPn_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetCTSkinPn_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetCTSkinPn_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetCTSkinPn_1_tWriteJSONField_2_Out txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetCTSkinPn_1_tWriteJSONField_2_Out(listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetCTSkinPn_1_tWriteJSONField_2_Out = es.submit(txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetCTSkinPn_1_tWriteJSONField_2_Out", future_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out nestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out();

EQGetCTSkinPn_1_out1Struct  rowStructOutput_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new EQGetCTSkinPn_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetCTSkinPn_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetCTSkinPn_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetCTSkinPn_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetCTSkinPn_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetCTSkinPn_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetCTSkinPn_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetCTSkinPn_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSkinPn_1_tMap_1", false);
		start_Hash.put("EQGetCTSkinPn_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSkinPn_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSkinPn_1_row2");
			
		int tos_count_EQGetCTSkinPn_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSkinPn_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSkinPn_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetCTSkinPn_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetCTSkinPn_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetCTSkinPn_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetCTSkinPn_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetCTSkinPn_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetCTSkinPn_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tMap_1 - "  + (log4jParamters_EQGetCTSkinPn_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSkinPn_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSkinPn_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetCTSkinPn_1_row2_EQGetCTSkinPn_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetCTSkinPn_1_out1_EQGetCTSkinPn_1_tMap_1 = 0;
				
EQGetCTSkinPn_1_out1Struct EQGetCTSkinPn_1_out1_tmp = new EQGetCTSkinPn_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetCTSkinPn_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSkinPn_1_tAzureSynapseInput_2", false);
		start_Hash.put("EQGetCTSkinPn_1_tAzureSynapseInput_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSkinPn_1_tAzureSynapseInput_2";
	
	
		int tos_count_EQGetCTSkinPn_1_tAzureSynapseInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSkinPn_1_tAzureSynapseInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2 = new StringBuilder();
                    log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("Parameters:");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("TABLE" + " = " + "\"EQGetCTSkinPn\"");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetCTSkinPn;\"");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("VALUE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DESCRIPTION")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("STOPPED")+"}]");
                        log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - "  + (log4jParamters_EQGetCTSkinPn_1_tAzureSynapseInput_2) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSkinPn_1_tAzureSynapseInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSkinPn_1_tAzureSynapseInput_2", "tAzureSynapseInput_2", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetCTSkinPn_1_tAzureSynapseInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetCTSkinPn_1_tAzureSynapseInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetCTSkinPn_1_tAzureSynapseInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetCTSkinPn_1_tAzureSynapseInput_2, talendToDBArray_EQGetCTSkinPn_1_tAzureSynapseInput_2); 
		    int nb_line_EQGetCTSkinPn_1_tAzureSynapseInput_2 = 0;
		    java.sql.Connection conn_EQGetCTSkinPn_1_tAzureSynapseInput_2 = null;
				String driverClass_EQGetCTSkinPn_1_tAzureSynapseInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetCTSkinPn_1_tAzureSynapseInput_2 = java.lang.Class.forName(driverClass_EQGetCTSkinPn_1_tAzureSynapseInput_2);
				String dbUser_EQGetCTSkinPn_1_tAzureSynapseInput_2 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetCTSkinPn_1_tAzureSynapseInput_2 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetCTSkinPn_1_tAzureSynapseInput_2 = decryptedPassword_EQGetCTSkinPn_1_tAzureSynapseInput_2;
				
		    String port_EQGetCTSkinPn_1_tAzureSynapseInput_2 = "1433";
		    String dbname_EQGetCTSkinPn_1_tAzureSynapseInput_2 = context.Azure_DW_DB ;		    
		    String url_EQGetCTSkinPn_1_tAzureSynapseInput_2 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetCTSkinPn_1_tAzureSynapseInput_2)) {
		    	url_EQGetCTSkinPn_1_tAzureSynapseInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetCTSkinPn_1_tAzureSynapseInput_2)) {		    
		    	url_EQGetCTSkinPn_1_tAzureSynapseInput_2 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetCTSkinPn_1_tAzureSynapseInput_2 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetCTSkinPn_1_tAzureSynapseInput_2 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Driver ClassName: "+driverClass_EQGetCTSkinPn_1_tAzureSynapseInput_2+".");
			
	    		log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Connection attempt to '" + url_EQGetCTSkinPn_1_tAzureSynapseInput_2 + "' with the username '" + dbUser_EQGetCTSkinPn_1_tAzureSynapseInput_2 + "'.");
			
				conn_EQGetCTSkinPn_1_tAzureSynapseInput_2 = java.sql.DriverManager.getConnection(url_EQGetCTSkinPn_1_tAzureSynapseInput_2,dbUser_EQGetCTSkinPn_1_tAzureSynapseInput_2,dbPwd_EQGetCTSkinPn_1_tAzureSynapseInput_2);
	    		log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Connection to '" + url_EQGetCTSkinPn_1_tAzureSynapseInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetCTSkinPn_1_tAzureSynapseInput_2 = conn_EQGetCTSkinPn_1_tAzureSynapseInput_2.createStatement();

		    String dbquery_EQGetCTSkinPn_1_tAzureSynapseInput_2 = "SELECT * FROM ITG.EQGetCTSkinPn;";
		    
	    		log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Executing the query: '" + dbquery_EQGetCTSkinPn_1_tAzureSynapseInput_2 + "'.");
			

            	globalMap.put("EQGetCTSkinPn_1_tAzureSynapseInput_2_QUERY",dbquery_EQGetCTSkinPn_1_tAzureSynapseInput_2);
		    java.sql.ResultSet rs_EQGetCTSkinPn_1_tAzureSynapseInput_2 = null;

		    try {
		    	rs_EQGetCTSkinPn_1_tAzureSynapseInput_2 = stmt_EQGetCTSkinPn_1_tAzureSynapseInput_2.executeQuery(dbquery_EQGetCTSkinPn_1_tAzureSynapseInput_2);
		    	java.sql.ResultSetMetaData rsmd_EQGetCTSkinPn_1_tAzureSynapseInput_2 = rs_EQGetCTSkinPn_1_tAzureSynapseInput_2.getMetaData();
		    	int colQtyInRs_EQGetCTSkinPn_1_tAzureSynapseInput_2 = rsmd_EQGetCTSkinPn_1_tAzureSynapseInput_2.getColumnCount();

		    String tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2 = null;
		    
		    
		    	log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Retrieving records from the database.");
		    
		    while (rs_EQGetCTSkinPn_1_tAzureSynapseInput_2.next()) {
		        nb_line_EQGetCTSkinPn_1_tAzureSynapseInput_2++;
		        
							if(colQtyInRs_EQGetCTSkinPn_1_tAzureSynapseInput_2 < 1) {
								EQGetCTSkinPn_1_row2.VALUE = null;
							} else {
	                         		
           		tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2 = rs_EQGetCTSkinPn_1_tAzureSynapseInput_2.getString(1);
            if(tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetCTSkinPn_1_tAzureSynapseInput_2 .contains(rsmd_EQGetCTSkinPn_1_tAzureSynapseInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCTSkinPn_1_row2.VALUE = FormatterUtils.formatUnwithE(tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2);
            	} else {
                	EQGetCTSkinPn_1_row2.VALUE = tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetCTSkinPn_1_row2.VALUE = null;
            }
		                    }
							if(colQtyInRs_EQGetCTSkinPn_1_tAzureSynapseInput_2 < 2) {
								EQGetCTSkinPn_1_row2.DESCRIPTION = null;
							} else {
	                         		
           		tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2 = rs_EQGetCTSkinPn_1_tAzureSynapseInput_2.getString(2);
            if(tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetCTSkinPn_1_tAzureSynapseInput_2 .contains(rsmd_EQGetCTSkinPn_1_tAzureSynapseInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCTSkinPn_1_row2.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2);
            	} else {
                	EQGetCTSkinPn_1_row2.DESCRIPTION = tmpContent_EQGetCTSkinPn_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetCTSkinPn_1_row2.DESCRIPTION = null;
            }
		                    }
							if(colQtyInRs_EQGetCTSkinPn_1_tAzureSynapseInput_2 < 3) {
								EQGetCTSkinPn_1_row2.STOPPED = null;
							} else {
		                          
            EQGetCTSkinPn_1_row2.STOPPED = rs_EQGetCTSkinPn_1_tAzureSynapseInput_2.getInt(3);
            if(rs_EQGetCTSkinPn_1_tAzureSynapseInput_2.wasNull()){
                    EQGetCTSkinPn_1_row2.STOPPED = null;
            }
		                    }
					
						log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Retrieving the record " + nb_line_EQGetCTSkinPn_1_tAzureSynapseInput_2 + ".");
					





 



/**
 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 begin ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tAzureSynapseInput_2";
	
	

 


	tos_count_EQGetCTSkinPn_1_tAzureSynapseInput_2++;

/**
 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 main ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 process_data_begin ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSkinPn_1_row2","EQGetCTSkinPn_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetCTSkinPn_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSkinPn_1_row2 - " + (EQGetCTSkinPn_1_row2==null? "": EQGetCTSkinPn_1_row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetCTSkinPn_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetCTSkinPn_1_tMap_1 = false;
		boolean mainRowRejected_EQGetCTSkinPn_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetCTSkinPn_1_out1 = null;


// # Output table : 'EQGetCTSkinPn_1_out1'
count_EQGetCTSkinPn_1_out1_EQGetCTSkinPn_1_tMap_1++;

EQGetCTSkinPn_1_out1_tmp.CTSkinPn = "X";
EQGetCTSkinPn_1_out1_tmp.VALUE = EQGetCTSkinPn_1_row2.VALUE;
EQGetCTSkinPn_1_out1_tmp.DESCRIPTION = EQGetCTSkinPn_1_row2.DESCRIPTION;
EQGetCTSkinPn_1_out1_tmp.STOPPED = EQGetCTSkinPn_1_row2.STOPPED ;
EQGetCTSkinPn_1_out1 = EQGetCTSkinPn_1_out1_tmp;
log.debug("EQGetCTSkinPn_1_tMap_1 - Outputting the record " + count_EQGetCTSkinPn_1_out1_EQGetCTSkinPn_1_tMap_1 + " of the output table 'EQGetCTSkinPn_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetCTSkinPn_1_tMap_1 = false;










 


	tos_count_EQGetCTSkinPn_1_tMap_1++;

/**
 * [EQGetCTSkinPn_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tMap_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetCTSkinPn_1_out1"
if(EQGetCTSkinPn_1_out1 != null) { 



	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSkinPn_1_out1","EQGetCTSkinPn_1_tMap_1","tMap_1","tMap","EQGetCTSkinPn_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSkinPn_1_out1 - " + (EQGetCTSkinPn_1_out1==null? "": EQGetCTSkinPn_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_Out++;
				log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetCTSkinPn_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetCTSkinPn_1_tWriteJSONField_2_Out helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetCTSkinPn_1_tWriteJSONField_2_Out();

	valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("CTSkinPn", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.CTSkinPn != null?
            EQGetCTSkinPn_1_out1.CTSkinPn.toString():null
		)));
	arraysValueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("CTSkinPn", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.CTSkinPn != null?
            EQGetCTSkinPn_1_out1.CTSkinPn.toString():null
		)));
	valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("VALUE", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.VALUE != null?
            EQGetCTSkinPn_1_out1.VALUE.toString():null
		)));
	arraysValueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("VALUE", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.VALUE != null?
            EQGetCTSkinPn_1_out1.VALUE.toString():null
		)));
	valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("DESCRIPTION", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.DESCRIPTION != null?
            EQGetCTSkinPn_1_out1.DESCRIPTION.toString():null
		)));
	arraysValueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("DESCRIPTION", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.DESCRIPTION != null?
            EQGetCTSkinPn_1_out1.DESCRIPTION.toString():null
		)));
	valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("STOPPED", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.STOPPED != null?
            EQGetCTSkinPn_1_out1.STOPPED.toString():null
		)));
	arraysValueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.put("STOPPED", helper_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSkinPn_1_out1.STOPPED != null?
            EQGetCTSkinPn_1_out1.STOPPED.toString():null
		)));
		String strTemp_EQGetCTSkinPn_1_tWriteJSONField_2_Out = "";		strTemp_EQGetCTSkinPn_1_tWriteJSONField_2_Out = strTemp_EQGetCTSkinPn_1_tWriteJSONField_2_Out + valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("CTSkinPn")
							+ valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("CTSkinPn").length();
	if(strCompCache_EQGetCTSkinPn_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetCTSkinPn_1_tWriteJSONField_2_Out=strTemp_EQGetCTSkinPn_1_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetCTSkinPn_1_tWriteJSONField_2_Out.equals(strTemp_EQGetCTSkinPn_1_tWriteJSONField_2_Out)){	  
    		nestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCTSkinPn_1_tWriteJSONField_2_Out, format_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
			output_EQGetCTSkinPn_1_tWriteJSONField_2_Out.write(doc_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
		    output_EQGetCTSkinPn_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetCTSkinPn_1_row3Struct row_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new EQGetCTSkinPn_1_row3Struct();
						  
					     		row_EQGetCTSkinPn_1_tWriteJSONField_2_Out.body = strWriter_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out.add(row_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
					
		    doc_EQGetCTSkinPn_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetCTSkinPn_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetCTSkinPn_1_tWriteJSONField_2_Out=0;i_EQGetCTSkinPn_1_tWriteJSONField_2_Out<orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out.length;i_EQGetCTSkinPn_1_tWriteJSONField_2_Out++){
				orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out[i_EQGetCTSkinPn_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetCTSkinPn_1_tWriteJSONField_2_Out != null && groupbyList_EQGetCTSkinPn_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetCTSkinPn_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetCTSkinPn_1_tWriteJSONField_2_Out=strTemp_EQGetCTSkinPn_1_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetCTSkinPn_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetCTSkinPn_1_tWriteJSONField_2_Out) {
		needRoot_EQGetCTSkinPn_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetCTSkinPn_1_tWriteJSONField_2_Out = doc_EQGetCTSkinPn_1_tWriteJSONField_2_Out.addElement("CTSkinPn");
		subTreeRootParent_EQGetCTSkinPn_1_tWriteJSONField_2_Out = root_EQGetCTSkinPn_1_tWriteJSONField_2_Out;
		root4Group_EQGetCTSkinPn_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetCTSkinPn_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetCTSkinPn_1_tWriteJSONField_2_Out=root4Group_EQGetCTSkinPn_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetCTSkinPn_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("CTSkinPn");
        if(orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out.length){
        		orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetCTSkinPn_1_tWriteJSONField_2_Out.elements().add(orders_EQGetCTSkinPn_1_tWriteJSONField_2_Out[0]++,loop_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_EQGetCTSkinPn_1_tWriteJSONField_2_Out = loop_EQGetCTSkinPn_1_tWriteJSONField_2_Out.addElement("VALUE");
		if(
		valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("VALUE")!=null){
			nestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out .setText(loop_0_EQGetCTSkinPn_1_tWriteJSONField_2_Out,
		valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("VALUE"));
		}
		org.dom4j.Element loop_1_EQGetCTSkinPn_1_tWriteJSONField_2_Out = loop_EQGetCTSkinPn_1_tWriteJSONField_2_Out.addElement("DESCRIPTION");
		if(
		valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("DESCRIPTION")!=null){
			nestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out .setText(loop_1_EQGetCTSkinPn_1_tWriteJSONField_2_Out,
		valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("DESCRIPTION"));
		}
		org.dom4j.Element loop_2_EQGetCTSkinPn_1_tWriteJSONField_2_Out = loop_EQGetCTSkinPn_1_tWriteJSONField_2_Out.addElement("STOPPED");
		if(
		valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("STOPPED")!=null){
			nestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out .setText(loop_2_EQGetCTSkinPn_1_tWriteJSONField_2_Out,
		valueMap_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get("STOPPED"));
            loop_2_EQGetCTSkinPn_1_tWriteJSONField_2_Out.addAttribute("type", "number");
		}

 


	tos_count_EQGetCTSkinPn_1_tWriteJSONField_2_Out++;

/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "EQGetCTSkinPn_1_out1"




	
	/**
	 * [EQGetCTSkinPn_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tMap_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tAzureSynapseInput_2";
	
	

	}
}finally{
	if (rs_EQGetCTSkinPn_1_tAzureSynapseInput_2 != null) {
		rs_EQGetCTSkinPn_1_tAzureSynapseInput_2.close();
	}
	if (stmt_EQGetCTSkinPn_1_tAzureSynapseInput_2 != null) {
		stmt_EQGetCTSkinPn_1_tAzureSynapseInput_2.close();
	}
		if(conn_EQGetCTSkinPn_1_tAzureSynapseInput_2 != null && !conn_EQGetCTSkinPn_1_tAzureSynapseInput_2.isClosed()) {
			
	    		log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Closing the connection to the database.");
			
			conn_EQGetCTSkinPn_1_tAzureSynapseInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetCTSkinPn_1_tAzureSynapseInput_2_NB_LINE",nb_line_EQGetCTSkinPn_1_tAzureSynapseInput_2);
	    		log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - Retrieved records count: "+nb_line_EQGetCTSkinPn_1_tAzureSynapseInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tAzureSynapseInput_2 - "  + ("Done.") );

ok_Hash.put("EQGetCTSkinPn_1_tAzureSynapseInput_2", true);
end_Hash.put("EQGetCTSkinPn_1_tAzureSynapseInput_2", System.currentTimeMillis());




/**
 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 end ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetCTSkinPn_1_tMap_1 - Written records count in the table 'EQGetCTSkinPn_1_out1': " + count_EQGetCTSkinPn_1_out1_EQGetCTSkinPn_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSkinPn_1_row2",2,0,
			 			"EQGetCTSkinPn_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetCTSkinPn_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetCTSkinPn_1_tMap_1", true);
end_Hash.put("EQGetCTSkinPn_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetCTSkinPn_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetCTSkinPn_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCTSkinPn_1_tWriteJSONField_2_Out, format_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
	output_EQGetCTSkinPn_1_tWriteJSONField_2_Out.write(doc_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
    output_EQGetCTSkinPn_1_tWriteJSONField_2_Out.close();
					EQGetCTSkinPn_1_row3Struct row_EQGetCTSkinPn_1_tWriteJSONField_2_Out = new EQGetCTSkinPn_1_row3Struct();
						  
					     		row_EQGetCTSkinPn_1_tWriteJSONField_2_Out.body = strWriter_EQGetCTSkinPn_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out.add(row_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_Out);
globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetCTSkinPn_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetCTSkinPn_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSkinPn_1_out1",2,0,
			 			"EQGetCTSkinPn_1_tMap_1","tMap_1","tMap","EQGetCTSkinPn_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCTSkinPn_1_tAzureSynapseInput_2 finally ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tMap_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetCTSkinPn_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetCTSkinPn_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCTSkinPn_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetCTSkinPn_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetCTSkinPn_1_tWriteJSONField_2_Out");
	if (future_EQGetCTSkinPn_1_tWriteJSONField_2_Out != null) {
		future_EQGetCTSkinPn_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCTSkinPn_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCTSolidSurfacePn_1_out1Struct implements routines.system.IPersistableRow<EQGetCTSolidSurfacePn_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String CTSolidSurfacePn;

				public String getCTSolidSurfacePn () {
					return this.CTSolidSurfacePn;
				}

				public Boolean CTSolidSurfacePnIsNullable(){
				    return true;
				}
				public Boolean CTSolidSurfacePnIsKey(){
				    return false;
				}
				public Integer CTSolidSurfacePnLength(){
				    return null;
				}
				public Integer CTSolidSurfacePnPrecision(){
				    return null;
				}
				public String CTSolidSurfacePnDefault(){
				
					return null;
				
				}
				public String CTSolidSurfacePnComment(){
				
				    return "";
				
				}
				public String CTSolidSurfacePnPattern(){
				
					return "";
				
				}
				public String CTSolidSurfacePnOriginalDbColumnName(){
				
					return "CTSolidSurfacePn";
				
				}

				
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}

				public Boolean DESCRIPTIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPTIONIsKey(){
				    return false;
				}
				public Integer DESCRIPTIONLength(){
				    return null;
				}
				public Integer DESCRIPTIONPrecision(){
				    return null;
				}
				public String DESCRIPTIONDefault(){
				
					return null;
				
				}
				public String DESCRIPTIONComment(){
				
				    return "";
				
				}
				public String DESCRIPTIONPattern(){
				
					return "";
				
				}
				public String DESCRIPTIONOriginalDbColumnName(){
				
					return "DESCRIPTION";
				
				}

				
			    public Integer STOPPED;

				public Integer getSTOPPED () {
					return this.STOPPED;
				}

				public Boolean STOPPEDIsNullable(){
				    return true;
				}
				public Boolean STOPPEDIsKey(){
				    return false;
				}
				public Integer STOPPEDLength(){
				    return null;
				}
				public Integer STOPPEDPrecision(){
				    return null;
				}
				public String STOPPEDDefault(){
				
					return null;
				
				}
				public String STOPPEDComment(){
				
				    return "";
				
				}
				public String STOPPEDPattern(){
				
					return "";
				
				}
				public String STOPPEDOriginalDbColumnName(){
				
					return "STOPPED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CTSolidSurfacePn = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.CTSolidSurfacePn = readString(dis);
					
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CTSolidSurfacePn,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CTSolidSurfacePn,dos);
					
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CTSolidSurfacePn="+CTSolidSurfacePn);
		sb.append(",VALUE="+VALUE);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STOPPED="+String.valueOf(STOPPED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(CTSolidSurfacePn == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CTSolidSurfacePn);
            			}
            		
        			sb.append("|");
        		
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(DESCRIPTION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DESCRIPTION);
            			}
            		
        			sb.append("|");
        		
        				if(STOPPED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOPPED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSolidSurfacePn_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetCTSolidSurfacePn_1_row2Struct implements routines.system.IPersistableRow<EQGetCTSolidSurfacePn_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String VALUE;

				public String getVALUE () {
					return this.VALUE;
				}

				public Boolean VALUEIsNullable(){
				    return true;
				}
				public Boolean VALUEIsKey(){
				    return false;
				}
				public Integer VALUELength(){
				    return null;
				}
				public Integer VALUEPrecision(){
				    return null;
				}
				public String VALUEDefault(){
				
					return null;
				
				}
				public String VALUEComment(){
				
				    return "";
				
				}
				public String VALUEPattern(){
				
					return "";
				
				}
				public String VALUEOriginalDbColumnName(){
				
					return "VALUE";
				
				}

				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}

				public Boolean DESCRIPTIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPTIONIsKey(){
				    return false;
				}
				public Integer DESCRIPTIONLength(){
				    return null;
				}
				public Integer DESCRIPTIONPrecision(){
				    return null;
				}
				public String DESCRIPTIONDefault(){
				
					return null;
				
				}
				public String DESCRIPTIONComment(){
				
				    return "";
				
				}
				public String DESCRIPTIONPattern(){
				
					return "";
				
				}
				public String DESCRIPTIONOriginalDbColumnName(){
				
					return "DESCRIPTION";
				
				}

				
			    public Integer STOPPED;

				public Integer getSTOPPED () {
					return this.STOPPED;
				}

				public Boolean STOPPEDIsNullable(){
				    return true;
				}
				public Boolean STOPPEDIsKey(){
				    return false;
				}
				public Integer STOPPEDLength(){
				    return null;
				}
				public Integer STOPPEDPrecision(){
				    return null;
				}
				public String STOPPEDDefault(){
				
					return null;
				
				}
				public String STOPPEDComment(){
				
				    return "";
				
				}
				public String STOPPEDPattern(){
				
					return "";
				
				}
				public String STOPPEDOriginalDbColumnName(){
				
					return "STOPPED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.VALUE = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
						this.STOPPED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VALUE,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// Integer
				
						writeInteger(this.STOPPED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALUE="+VALUE);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STOPPED="+String.valueOf(STOPPED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(VALUE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALUE);
            			}
            		
        			sb.append("|");
        		
        				if(DESCRIPTION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DESCRIPTION);
            			}
            		
        			sb.append("|");
        		
        				if(STOPPED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOPPED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSolidSurfacePn_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCTSolidSurfacePn_1_row2Struct EQGetCTSolidSurfacePn_1_row2 = new EQGetCTSolidSurfacePn_1_row2Struct();
EQGetCTSolidSurfacePn_1_out1Struct EQGetCTSolidSurfacePn_1_out1 = new EQGetCTSolidSurfacePn_1_out1Struct();





	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSolidSurfacePn_1_out1");
			
		int tos_count_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("CTSolidSurfacePn")+"}]");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetCTSolidSurfacePn_1_tWriteJSONField_2");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetCTSolidSurfacePn_1_row3Struct> listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetCTSolidSurfacePn_1_row3Struct>();
							
	
					class ThreadXMLField_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetCTSolidSurfacePn_1_row3Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetCTSolidSurfacePn_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out(listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = es.submit(txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out", future_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out nestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out();

EQGetCTSolidSurfacePn_1_out1Struct  rowStructOutput_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new EQGetCTSolidSurfacePn_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetCTSolidSurfacePn_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSolidSurfacePn_1_tMap_1", false);
		start_Hash.put("EQGetCTSolidSurfacePn_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSolidSurfacePn_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSolidSurfacePn_1_row2");
			
		int tos_count_EQGetCTSolidSurfacePn_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSolidSurfacePn_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tMap_1 - "  + (log4jParamters_EQGetCTSolidSurfacePn_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSolidSurfacePn_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSolidSurfacePn_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetCTSolidSurfacePn_1_row2_EQGetCTSolidSurfacePn_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetCTSolidSurfacePn_1_out1_EQGetCTSolidSurfacePn_1_tMap_1 = 0;
				
EQGetCTSolidSurfacePn_1_out1Struct EQGetCTSolidSurfacePn_1_out1_tmp = new EQGetCTSolidSurfacePn_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetCTSolidSurfacePn_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2", false);
		start_Hash.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2";
	
	
		int tos_count_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = new StringBuilder();
                    log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("Parameters:");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("TABLE" + " = " + "\"EQGetCTSolidSurfacePn\"");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetCTSolidSurfacePn;\"");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("VALUE")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DESCRIPTION")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("STOPPED")+"}]");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - "  + (log4jParamters_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2", "tAzureSynapseInput_2", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2, talendToDBArray_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2); 
		    int nb_line_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = 0;
		    java.sql.Connection conn_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = null;
				String driverClass_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = java.lang.Class.forName(driverClass_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2);
				String dbUser_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = decryptedPassword_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2;
				
		    String port_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = "1433";
		    String dbname_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = context.Azure_DW_DB ;		    
		    String url_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2)) {
		    	url_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2)) {		    
		    	url_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Driver ClassName: "+driverClass_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2+".");
			
	    		log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Connection attempt to '" + url_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 + "' with the username '" + dbUser_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 + "'.");
			
				conn_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = java.sql.DriverManager.getConnection(url_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2,dbUser_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2,dbPwd_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2);
	    		log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Connection to '" + url_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = conn_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.createStatement();

		    String dbquery_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = "SELECT * FROM ITG.EQGetCTSolidSurfacePn;";
		    
	    		log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Executing the query: '" + dbquery_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 + "'.");
			

            	globalMap.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_QUERY",dbquery_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2);
		    java.sql.ResultSet rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = null;

		    try {
		    	rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = stmt_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.executeQuery(dbquery_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2);
		    	java.sql.ResultSetMetaData rsmd_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.getMetaData();
		    	int colQtyInRs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = rsmd_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.getColumnCount();

		    String tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = null;
		    
		    
		    	log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Retrieving records from the database.");
		    
		    while (rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.next()) {
		        nb_line_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2++;
		        
							if(colQtyInRs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 < 1) {
								EQGetCTSolidSurfacePn_1_row2.VALUE = null;
							} else {
	                         		
           		tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.getString(1);
            if(tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 .contains(rsmd_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCTSolidSurfacePn_1_row2.VALUE = FormatterUtils.formatUnwithE(tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2);
            	} else {
                	EQGetCTSolidSurfacePn_1_row2.VALUE = tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetCTSolidSurfacePn_1_row2.VALUE = null;
            }
		                    }
							if(colQtyInRs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 < 2) {
								EQGetCTSolidSurfacePn_1_row2.DESCRIPTION = null;
							} else {
	                         		
           		tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 = rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.getString(2);
            if(tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 .contains(rsmd_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetCTSolidSurfacePn_1_row2.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2);
            	} else {
                	EQGetCTSolidSurfacePn_1_row2.DESCRIPTION = tmpContent_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetCTSolidSurfacePn_1_row2.DESCRIPTION = null;
            }
		                    }
							if(colQtyInRs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 < 3) {
								EQGetCTSolidSurfacePn_1_row2.STOPPED = null;
							} else {
		                          
            EQGetCTSolidSurfacePn_1_row2.STOPPED = rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.getInt(3);
            if(rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.wasNull()){
                    EQGetCTSolidSurfacePn_1_row2.STOPPED = null;
            }
		                    }
					
						log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Retrieving the record " + nb_line_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 + ".");
					





 



/**
 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 begin ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2";
	
	

 


	tos_count_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2++;

/**
 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 main ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 process_data_begin ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSolidSurfacePn_1_row2","EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetCTSolidSurfacePn_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSolidSurfacePn_1_row2 - " + (EQGetCTSolidSurfacePn_1_row2==null? "": EQGetCTSolidSurfacePn_1_row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetCTSolidSurfacePn_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetCTSolidSurfacePn_1_tMap_1 = false;
		boolean mainRowRejected_EQGetCTSolidSurfacePn_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetCTSolidSurfacePn_1_out1 = null;


// # Output table : 'EQGetCTSolidSurfacePn_1_out1'
count_EQGetCTSolidSurfacePn_1_out1_EQGetCTSolidSurfacePn_1_tMap_1++;

EQGetCTSolidSurfacePn_1_out1_tmp.CTSolidSurfacePn = "X";
EQGetCTSolidSurfacePn_1_out1_tmp.VALUE = EQGetCTSolidSurfacePn_1_row2.VALUE;
EQGetCTSolidSurfacePn_1_out1_tmp.DESCRIPTION = EQGetCTSolidSurfacePn_1_row2.DESCRIPTION;
EQGetCTSolidSurfacePn_1_out1_tmp.STOPPED = EQGetCTSolidSurfacePn_1_row2.STOPPED ;
EQGetCTSolidSurfacePn_1_out1 = EQGetCTSolidSurfacePn_1_out1_tmp;
log.debug("EQGetCTSolidSurfacePn_1_tMap_1 - Outputting the record " + count_EQGetCTSolidSurfacePn_1_out1_EQGetCTSolidSurfacePn_1_tMap_1 + " of the output table 'EQGetCTSolidSurfacePn_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetCTSolidSurfacePn_1_tMap_1 = false;










 


	tos_count_EQGetCTSolidSurfacePn_1_tMap_1++;

/**
 * [EQGetCTSolidSurfacePn_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tMap_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetCTSolidSurfacePn_1_out1"
if(EQGetCTSolidSurfacePn_1_out1 != null) { 



	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSolidSurfacePn_1_out1","EQGetCTSolidSurfacePn_1_tMap_1","tMap_1","tMap","EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSolidSurfacePn_1_out1 - " + (EQGetCTSolidSurfacePn_1_out1==null? "": EQGetCTSolidSurfacePn_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out++;
				log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out();

	valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("CTSolidSurfacePn", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.CTSolidSurfacePn != null?
            EQGetCTSolidSurfacePn_1_out1.CTSolidSurfacePn.toString():null
		)));
	arraysValueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("CTSolidSurfacePn", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.CTSolidSurfacePn != null?
            EQGetCTSolidSurfacePn_1_out1.CTSolidSurfacePn.toString():null
		)));
	valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("VALUE", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.VALUE != null?
            EQGetCTSolidSurfacePn_1_out1.VALUE.toString():null
		)));
	arraysValueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("VALUE", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.VALUE != null?
            EQGetCTSolidSurfacePn_1_out1.VALUE.toString():null
		)));
	valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("DESCRIPTION", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.DESCRIPTION != null?
            EQGetCTSolidSurfacePn_1_out1.DESCRIPTION.toString():null
		)));
	arraysValueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("DESCRIPTION", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.DESCRIPTION != null?
            EQGetCTSolidSurfacePn_1_out1.DESCRIPTION.toString():null
		)));
	valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("STOPPED", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.STOPPED != null?
            EQGetCTSolidSurfacePn_1_out1.STOPPED.toString():null
		)));
	arraysValueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.put("STOPPED", helper_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString(
	(
		EQGetCTSolidSurfacePn_1_out1.STOPPED != null?
            EQGetCTSolidSurfacePn_1_out1.STOPPED.toString():null
		)));
		String strTemp_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = "";		strTemp_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = strTemp_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out + valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("CTSolidSurfacePn")
							+ valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("CTSolidSurfacePn").length();
	if(strCompCache_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out=strTemp_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.equals(strTemp_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out)){	  
    		nestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out, format_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
			output_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.write(doc_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
		    output_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetCTSolidSurfacePn_1_row3Struct row_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new EQGetCTSolidSurfacePn_1_row3Struct();
						  
					     		row_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.body = strWriter_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.add(row_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
					
		    doc_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out=0;i_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out<orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.length;i_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out++){
				orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out[i_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out != null && groupbyList_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out=strTemp_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out) {
		needRoot_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = doc_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.addElement("CTSolidSurfacePn");
		subTreeRootParent_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = root_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out;
		root4Group_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out=root4Group_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("CTSolidSurfacePn");
        if(orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.length){
        		orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.elements().add(orders_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out[0]++,loop_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = loop_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.addElement("VALUE");
		if(
		valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("VALUE")!=null){
			nestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out .setText(loop_0_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out,
		valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("VALUE"));
		}
		org.dom4j.Element loop_1_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = loop_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.addElement("DESCRIPTION");
		if(
		valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("DESCRIPTION")!=null){
			nestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out .setText(loop_1_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out,
		valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("DESCRIPTION"));
		}
		org.dom4j.Element loop_2_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = loop_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.addElement("STOPPED");
		if(
		valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("STOPPED")!=null){
			nestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out .setText(loop_2_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out,
		valueMap_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get("STOPPED"));
            loop_2_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.addAttribute("type", "number");
		}

 


	tos_count_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out++;

/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "EQGetCTSolidSurfacePn_1_out1"




	
	/**
	 * [EQGetCTSolidSurfacePn_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tMap_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2";
	
	

	}
}finally{
	if (rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 != null) {
		rs_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.close();
	}
	if (stmt_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 != null) {
		stmt_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.close();
	}
		if(conn_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 != null && !conn_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.isClosed()) {
			
	    		log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Closing the connection to the database.");
			
			conn_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_NB_LINE",nb_line_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2);
	    		log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - Retrieved records count: "+nb_line_EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 - "  + ("Done.") );

ok_Hash.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2", true);
end_Hash.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2", System.currentTimeMillis());




/**
 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 end ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetCTSolidSurfacePn_1_tMap_1 - Written records count in the table 'EQGetCTSolidSurfacePn_1_out1': " + count_EQGetCTSolidSurfacePn_1_out1_EQGetCTSolidSurfacePn_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSolidSurfacePn_1_row2",2,0,
			 			"EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetCTSolidSurfacePn_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetCTSolidSurfacePn_1_tMap_1", true);
end_Hash.put("EQGetCTSolidSurfacePn_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetCTSolidSurfacePn_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out, format_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
	output_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.write(doc_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
    output_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.close();
					EQGetCTSolidSurfacePn_1_row3Struct row_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = new EQGetCTSolidSurfacePn_1_row3Struct();
						  
					     		row_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.body = strWriter_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.add(row_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out);
globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSolidSurfacePn_1_out1",2,0,
			 			"EQGetCTSolidSurfacePn_1_tMap_1","tMap_1","tMap","EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2 finally ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tMap_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out");
	if (future_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out != null) {
		future_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetDwgNo_1_row1Struct implements routines.system.IPersistableRow<EQGetDwgNo_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String DISPLAYPRODUCTNUMBER;

				public String getDISPLAYPRODUCTNUMBER () {
					return this.DISPLAYPRODUCTNUMBER;
				}

				public Boolean DISPLAYPRODUCTNUMBERIsNullable(){
				    return true;
				}
				public Boolean DISPLAYPRODUCTNUMBERIsKey(){
				    return false;
				}
				public Integer DISPLAYPRODUCTNUMBERLength(){
				    return null;
				}
				public Integer DISPLAYPRODUCTNUMBERPrecision(){
				    return null;
				}
				public String DISPLAYPRODUCTNUMBERDefault(){
				
					return null;
				
				}
				public String DISPLAYPRODUCTNUMBERComment(){
				
				    return "";
				
				}
				public String DISPLAYPRODUCTNUMBERPattern(){
				
					return "";
				
				}
				public String DISPLAYPRODUCTNUMBEROriginalDbColumnName(){
				
					return "DISPLAYPRODUCTNUMBER";
				
				}

				
			    public String DRAWINGNO;

				public String getDRAWINGNO () {
					return this.DRAWINGNO;
				}

				public Boolean DRAWINGNOIsNullable(){
				    return true;
				}
				public Boolean DRAWINGNOIsKey(){
				    return false;
				}
				public Integer DRAWINGNOLength(){
				    return null;
				}
				public Integer DRAWINGNOPrecision(){
				    return null;
				}
				public String DRAWINGNODefault(){
				
					return null;
				
				}
				public String DRAWINGNOComment(){
				
				    return "";
				
				}
				public String DRAWINGNOPattern(){
				
					return "";
				
				}
				public String DRAWINGNOOriginalDbColumnName(){
				
					return "DRAWINGNO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
					this.DRAWINGNO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
					this.DRAWINGNO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.DRAWINGNO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.DRAWINGNO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DISPLAYPRODUCTNUMBER="+DISPLAYPRODUCTNUMBER);
		sb.append(",DRAWINGNO="+DRAWINGNO);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(DISPLAYPRODUCTNUMBER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPLAYPRODUCTNUMBER);
            			}
            		
        			sb.append("|");
        		
        				if(DRAWINGNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DRAWINGNO);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetDwgNo_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetDwgNo_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetDwgNo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetDwgNo_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetDwgNo_1_row1Struct EQGetDwgNo_1_row1 = new EQGetDwgNo_1_row1Struct();




	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetDwgNo_1_row1");
			
		int tos_count_EQGetDwgNo_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetDwgNo_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetDwgNo_1_tWriteJSONField_1");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetDwgNo_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetDwgNo_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetDwgNo_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetDwgNo_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetDwgNo_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetDwgNo_1_row5Struct> listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetDwgNo_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetDwgNo_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetDwgNo_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetDwgNo_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetDwgNo_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetDwgNo_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetDwgNo_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetDwgNo_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetDwgNo_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetDwgNo_1_tWriteJSONField_1_Out txf_EQGetDwgNo_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetDwgNo_1_tWriteJSONField_1_Out(listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetDwgNo_1_tWriteJSONField_1_Out = es.submit(txf_EQGetDwgNo_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetDwgNo_1_tWriteJSONField_1_Out", future_EQGetDwgNo_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetDwgNo_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetDwgNo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out nestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out();

EQGetDwgNo_1_row1Struct  rowStructOutput_EQGetDwgNo_1_tWriteJSONField_1_Out = new EQGetDwgNo_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetDwgNo_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetDwgNo_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetDwgNo_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetDwgNo_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetDwgNo_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetDwgNo_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetDwgNo_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetDwgNo_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetDwgNo_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetDwgNo_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetDwgNo_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetDwgNo_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetDwgNo_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetDwgNo_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetDwgNo\"");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetDwgNo WHERE DISPLAYPRODUCTNUMBER = '\"+((String)globalMap.get(\"EQGetDwgNo.displayProductNumber\"))+\"';\"");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("DISPLAYPRODUCTNUMBER")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("DRAWINGNO")+"}]");
                        log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetDwgNo_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetDwgNo_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetDwgNo_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetDwgNo_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetDwgNo_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetDwgNo_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetDwgNo_1_tAzureSynapseInput_1, talendToDBArray_EQGetDwgNo_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetDwgNo_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetDwgNo_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetDwgNo_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetDwgNo_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetDwgNo_1_tAzureSynapseInput_1);
				String dbUser_EQGetDwgNo_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetDwgNo_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetDwgNo_1_tAzureSynapseInput_1 = decryptedPassword_EQGetDwgNo_1_tAzureSynapseInput_1;
				
		    String port_EQGetDwgNo_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetDwgNo_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetDwgNo_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetDwgNo_1_tAzureSynapseInput_1)) {
		    	url_EQGetDwgNo_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetDwgNo_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetDwgNo_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetDwgNo_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetDwgNo_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetDwgNo_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetDwgNo_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetDwgNo_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetDwgNo_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetDwgNo_1_tAzureSynapseInput_1,dbUser_EQGetDwgNo_1_tAzureSynapseInput_1,dbPwd_EQGetDwgNo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetDwgNo_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetDwgNo_1_tAzureSynapseInput_1 = conn_EQGetDwgNo_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetDwgNo_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetDwgNo WHERE DISPLAYPRODUCTNUMBER = '"+((String)globalMap.get("EQGetDwgNo.displayProductNumber"))+"';";
		    
	    		log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetDwgNo_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetDwgNo_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetDwgNo_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetDwgNo_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetDwgNo_1_tAzureSynapseInput_1 = stmt_EQGetDwgNo_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetDwgNo_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetDwgNo_1_tAzureSynapseInput_1 = rs_EQGetDwgNo_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetDwgNo_1_tAzureSynapseInput_1 = rsmd_EQGetDwgNo_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetDwgNo_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetDwgNo_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetDwgNo_1_tAzureSynapseInput_1 < 1) {
								EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER = null;
							} else {
	                         		
           		tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1 = rs_EQGetDwgNo_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetDwgNo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetDwgNo_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER = FormatterUtils.formatUnwithE(tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER = tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER = null;
            }
		                    }
							if(colQtyInRs_EQGetDwgNo_1_tAzureSynapseInput_1 < 2) {
								EQGetDwgNo_1_row1.DRAWINGNO = null;
							} else {
	                         		
           		tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1 = rs_EQGetDwgNo_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetDwgNo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetDwgNo_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetDwgNo_1_row1.DRAWINGNO = FormatterUtils.formatUnwithE(tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetDwgNo_1_row1.DRAWINGNO = tmpContent_EQGetDwgNo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetDwgNo_1_row1.DRAWINGNO = null;
            }
		                    }
					
						log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetDwgNo_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetDwgNo_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetDwgNo_1_tAzureSynapseInput_1++;

/**
 * [EQGetDwgNo_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetDwgNo_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetDwgNo_1_row1","EQGetDwgNo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetDwgNo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetDwgNo_1_row1 - " + (EQGetDwgNo_1_row1==null? "": EQGetDwgNo_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetDwgNo_1_tWriteJSONField_1_Out++;
				log.debug("EQGetDwgNo_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetDwgNo_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetDwgNo_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetDwgNo_1_tWriteJSONField_1_Out helper_EQGetDwgNo_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetDwgNo_1_tWriteJSONField_1_Out();

	valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetDwgNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	arraysValueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetDwgNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetDwgNo_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.put("DRAWINGNO", helper_EQGetDwgNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetDwgNo_1_row1.DRAWINGNO != null?
            EQGetDwgNo_1_row1.DRAWINGNO.toString():null
		)));
	arraysValueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.put("DRAWINGNO", helper_EQGetDwgNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetDwgNo_1_row1.DRAWINGNO != null?
            EQGetDwgNo_1_row1.DRAWINGNO.toString():null
		)));
		String strTemp_EQGetDwgNo_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetDwgNo_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetDwgNo_1_tWriteJSONField_1_Out=strTemp_EQGetDwgNo_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetDwgNo_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetDwgNo_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetDwgNo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetDwgNo_1_tWriteJSONField_1_Out, format_EQGetDwgNo_1_tWriteJSONField_1_Out);
			output_EQGetDwgNo_1_tWriteJSONField_1_Out.write(doc_EQGetDwgNo_1_tWriteJSONField_1_Out);
		    output_EQGetDwgNo_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetDwgNo_1_row5Struct row_EQGetDwgNo_1_tWriteJSONField_1_Out = new EQGetDwgNo_1_row5Struct();
						  
					     		row_EQGetDwgNo_1_tWriteJSONField_1_Out.body = strWriter_EQGetDwgNo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out.add(row_EQGetDwgNo_1_tWriteJSONField_1_Out);
					
		    doc_EQGetDwgNo_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetDwgNo_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetDwgNo_1_tWriteJSONField_1_Out=0;i_EQGetDwgNo_1_tWriteJSONField_1_Out<orders_EQGetDwgNo_1_tWriteJSONField_1_Out.length;i_EQGetDwgNo_1_tWriteJSONField_1_Out++){
				orders_EQGetDwgNo_1_tWriteJSONField_1_Out[i_EQGetDwgNo_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetDwgNo_1_tWriteJSONField_1_Out != null && groupbyList_EQGetDwgNo_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetDwgNo_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetDwgNo_1_tWriteJSONField_1_Out=strTemp_EQGetDwgNo_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetDwgNo_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetDwgNo_1_tWriteJSONField_1_Out) {
		needRoot_EQGetDwgNo_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetDwgNo_1_tWriteJSONField_1_Out = doc_EQGetDwgNo_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetDwgNo_1_tWriteJSONField_1_Out = root_EQGetDwgNo_1_tWriteJSONField_1_Out;
		org.dom4j.Element root_0_EQGetDwgNo_1_tWriteJSONField_1_Out = root_EQGetDwgNo_1_tWriteJSONField_1_Out.addElement("DRAWINGNO");
		if(
		valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.get("DRAWINGNO")!=null){
			nestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out .setText(root_0_EQGetDwgNo_1_tWriteJSONField_1_Out,
		valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.get("DRAWINGNO"));
		}
		root4Group_EQGetDwgNo_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetDwgNo_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetDwgNo_1_tWriteJSONField_1_Out=root4Group_EQGetDwgNo_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetDwgNo_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("DISPLAYPRODUCTNUMBER");
        if(orders_EQGetDwgNo_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetDwgNo_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetDwgNo_1_tWriteJSONField_1_Out.length){
        		orders_EQGetDwgNo_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetDwgNo_1_tWriteJSONField_1_Out.elements().add(orders_EQGetDwgNo_1_tWriteJSONField_1_Out[0]++,loop_EQGetDwgNo_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.get("DISPLAYPRODUCTNUMBER")!=null){
			nestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out .setText(loop_EQGetDwgNo_1_tWriteJSONField_1_Out,
		valueMap_EQGetDwgNo_1_tWriteJSONField_1_Out.get("DISPLAYPRODUCTNUMBER"));
		}

 


	tos_count_EQGetDwgNo_1_tWriteJSONField_1_Out++;

/**
 * [EQGetDwgNo_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetDwgNo_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetDwgNo_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetDwgNo_1_tAzureSynapseInput_1 != null) {
		rs_EQGetDwgNo_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetDwgNo_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetDwgNo_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetDwgNo_1_tAzureSynapseInput_1 != null && !conn_EQGetDwgNo_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetDwgNo_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetDwgNo_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetDwgNo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetDwgNo_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetDwgNo_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetDwgNo_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetDwgNo_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetDwgNo_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetDwgNo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetDwgNo_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetDwgNo_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetDwgNo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetDwgNo_1_tWriteJSONField_1_Out, format_EQGetDwgNo_1_tWriteJSONField_1_Out);
	output_EQGetDwgNo_1_tWriteJSONField_1_Out.write(doc_EQGetDwgNo_1_tWriteJSONField_1_Out);
    output_EQGetDwgNo_1_tWriteJSONField_1_Out.close();
					EQGetDwgNo_1_row5Struct row_EQGetDwgNo_1_tWriteJSONField_1_Out = new EQGetDwgNo_1_row5Struct();
						  
					     		row_EQGetDwgNo_1_tWriteJSONField_1_Out.body = strWriter_EQGetDwgNo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out.add(row_EQGetDwgNo_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetDwgNo_1_tWriteJSONField_1_Out);
globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetDwgNo_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetDwgNo_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetDwgNo_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetDwgNo_1_row1",2,0,
			 			"EQGetDwgNo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetDwgNo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetDwgNo_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetDwgNo_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetDwgNo_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetDwgNo_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetDwgNo_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetDwgNo_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetDwgNo_1_tWriteJSONField_1_Out");
	if (future_EQGetDwgNo_1_tWriteJSONField_1_Out != null) {
		future_EQGetDwgNo_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetDwgNo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetItemDesc_1_row1Struct implements routines.system.IPersistableRow<EQGetItemDesc_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String DISPLAYPRODUCTNUMBER;

				public String getDISPLAYPRODUCTNUMBER () {
					return this.DISPLAYPRODUCTNUMBER;
				}

				public Boolean DISPLAYPRODUCTNUMBERIsNullable(){
				    return true;
				}
				public Boolean DISPLAYPRODUCTNUMBERIsKey(){
				    return false;
				}
				public Integer DISPLAYPRODUCTNUMBERLength(){
				    return null;
				}
				public Integer DISPLAYPRODUCTNUMBERPrecision(){
				    return null;
				}
				public String DISPLAYPRODUCTNUMBERDefault(){
				
					return null;
				
				}
				public String DISPLAYPRODUCTNUMBERComment(){
				
				    return "";
				
				}
				public String DISPLAYPRODUCTNUMBERPattern(){
				
					return "";
				
				}
				public String DISPLAYPRODUCTNUMBEROriginalDbColumnName(){
				
					return "DISPLAYPRODUCTNUMBER";
				
				}

				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}

				public Boolean NAMEIsNullable(){
				    return true;
				}
				public Boolean NAMEIsKey(){
				    return false;
				}
				public Integer NAMELength(){
				    return null;
				}
				public Integer NAMEPrecision(){
				    return null;
				}
				public String NAMEDefault(){
				
					return null;
				
				}
				public String NAMEComment(){
				
				    return "";
				
				}
				public String NAMEPattern(){
				
					return "";
				
				}
				public String NAMEOriginalDbColumnName(){
				
					return "NAME";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
					this.NAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
					this.NAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DISPLAYPRODUCTNUMBER="+DISPLAYPRODUCTNUMBER);
		sb.append(",NAME="+NAME);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(DISPLAYPRODUCTNUMBER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPLAYPRODUCTNUMBER);
            			}
            		
        			sb.append("|");
        		
        				if(NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NAME);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetItemDesc_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetItemDesc_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetItemDesc_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetItemDesc_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetItemDesc_1_row1Struct EQGetItemDesc_1_row1 = new EQGetItemDesc_1_row1Struct();




	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetItemDesc_1_row1");
			
		int tos_count_EQGetItemDesc_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetItemDesc_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetItemDesc_1_tWriteJSONField_1");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetItemDesc_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetItemDesc_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetItemDesc_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetItemDesc_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetItemDesc_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetItemDesc_1_row5Struct> listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetItemDesc_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetItemDesc_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetItemDesc_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetItemDesc_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetItemDesc_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetItemDesc_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetItemDesc_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetItemDesc_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetItemDesc_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetItemDesc_1_tWriteJSONField_1_Out txf_EQGetItemDesc_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetItemDesc_1_tWriteJSONField_1_Out(listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetItemDesc_1_tWriteJSONField_1_Out = es.submit(txf_EQGetItemDesc_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetItemDesc_1_tWriteJSONField_1_Out", future_EQGetItemDesc_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetItemDesc_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetItemDesc_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetItemDesc_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetItemDesc_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetItemDesc_1_tWriteJSONField_1_Out nestXMLTool_EQGetItemDesc_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetItemDesc_1_tWriteJSONField_1_Out();

EQGetItemDesc_1_row1Struct  rowStructOutput_EQGetItemDesc_1_tWriteJSONField_1_Out = new EQGetItemDesc_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetItemDesc_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetItemDesc_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetItemDesc_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetItemDesc_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetItemDesc_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetItemDesc_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetItemDesc_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetItemDesc_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetItemDesc_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetItemDesc_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetItemDesc_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetItemDesc_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetItemDesc_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetItemDesc_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetItemDesc\"");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetItemDesc WHERE DISPLAYPRODUCTNUMBER = '\" + ((String)globalMap.get(\"EQGetItemDesc.displayProductNumber\"))+ \"';\"");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("DISPLAYPRODUCTNUMBER")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("NAME")+"}]");
                        log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetItemDesc_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetItemDesc_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetItemDesc_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetItemDesc_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetItemDesc_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetItemDesc_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetItemDesc_1_tAzureSynapseInput_1, talendToDBArray_EQGetItemDesc_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetItemDesc_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetItemDesc_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetItemDesc_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetItemDesc_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetItemDesc_1_tAzureSynapseInput_1);
				String dbUser_EQGetItemDesc_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetItemDesc_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetItemDesc_1_tAzureSynapseInput_1 = decryptedPassword_EQGetItemDesc_1_tAzureSynapseInput_1;
				
		    String port_EQGetItemDesc_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetItemDesc_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetItemDesc_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetItemDesc_1_tAzureSynapseInput_1)) {
		    	url_EQGetItemDesc_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetItemDesc_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetItemDesc_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetItemDesc_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetItemDesc_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetItemDesc_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetItemDesc_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetItemDesc_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetItemDesc_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetItemDesc_1_tAzureSynapseInput_1,dbUser_EQGetItemDesc_1_tAzureSynapseInput_1,dbPwd_EQGetItemDesc_1_tAzureSynapseInput_1);
	    		log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetItemDesc_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetItemDesc_1_tAzureSynapseInput_1 = conn_EQGetItemDesc_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetItemDesc_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetItemDesc WHERE DISPLAYPRODUCTNUMBER = '" + ((String)globalMap.get("EQGetItemDesc.displayProductNumber"))+ "';";
		    
	    		log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetItemDesc_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetItemDesc_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetItemDesc_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetItemDesc_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetItemDesc_1_tAzureSynapseInput_1 = stmt_EQGetItemDesc_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetItemDesc_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetItemDesc_1_tAzureSynapseInput_1 = rs_EQGetItemDesc_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetItemDesc_1_tAzureSynapseInput_1 = rsmd_EQGetItemDesc_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetItemDesc_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetItemDesc_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetItemDesc_1_tAzureSynapseInput_1 < 1) {
								EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER = null;
							} else {
	                         		
           		tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1 = rs_EQGetItemDesc_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetItemDesc_1_tAzureSynapseInput_1 .contains(rsmd_EQGetItemDesc_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER = FormatterUtils.formatUnwithE(tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1);
            	} else {
                	EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER = tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER = null;
            }
		                    }
							if(colQtyInRs_EQGetItemDesc_1_tAzureSynapseInput_1 < 2) {
								EQGetItemDesc_1_row1.NAME = null;
							} else {
	                         		
           		tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1 = rs_EQGetItemDesc_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetItemDesc_1_tAzureSynapseInput_1 .contains(rsmd_EQGetItemDesc_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetItemDesc_1_row1.NAME = FormatterUtils.formatUnwithE(tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1);
            	} else {
                	EQGetItemDesc_1_row1.NAME = tmpContent_EQGetItemDesc_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetItemDesc_1_row1.NAME = null;
            }
		                    }
					
						log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetItemDesc_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetItemDesc_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetItemDesc_1_tAzureSynapseInput_1++;

/**
 * [EQGetItemDesc_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetItemDesc_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetItemDesc_1_row1","EQGetItemDesc_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetItemDesc_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetItemDesc_1_row1 - " + (EQGetItemDesc_1_row1==null? "": EQGetItemDesc_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetItemDesc_1_tWriteJSONField_1_Out++;
				log.debug("EQGetItemDesc_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetItemDesc_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetItemDesc_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetItemDesc_1_tWriteJSONField_1_Out helper_EQGetItemDesc_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetItemDesc_1_tWriteJSONField_1_Out();

	valueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetItemDesc_1_tWriteJSONField_1_Out.toString(
	(
		EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	arraysValueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetItemDesc_1_tWriteJSONField_1_Out.toString(
	(
		EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetItemDesc_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	valueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.put("NAME", helper_EQGetItemDesc_1_tWriteJSONField_1_Out.toString(
	(
		EQGetItemDesc_1_row1.NAME != null?
            EQGetItemDesc_1_row1.NAME.toString():null
		)));
	arraysValueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.put("NAME", helper_EQGetItemDesc_1_tWriteJSONField_1_Out.toString(
	(
		EQGetItemDesc_1_row1.NAME != null?
            EQGetItemDesc_1_row1.NAME.toString():null
		)));
		String strTemp_EQGetItemDesc_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetItemDesc_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetItemDesc_1_tWriteJSONField_1_Out=strTemp_EQGetItemDesc_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetItemDesc_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetItemDesc_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetItemDesc_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetItemDesc_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetItemDesc_1_tWriteJSONField_1_Out, format_EQGetItemDesc_1_tWriteJSONField_1_Out);
			output_EQGetItemDesc_1_tWriteJSONField_1_Out.write(doc_EQGetItemDesc_1_tWriteJSONField_1_Out);
		    output_EQGetItemDesc_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetItemDesc_1_row5Struct row_EQGetItemDesc_1_tWriteJSONField_1_Out = new EQGetItemDesc_1_row5Struct();
						  
					     		row_EQGetItemDesc_1_tWriteJSONField_1_Out.body = strWriter_EQGetItemDesc_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out.add(row_EQGetItemDesc_1_tWriteJSONField_1_Out);
					
		    doc_EQGetItemDesc_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetItemDesc_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetItemDesc_1_tWriteJSONField_1_Out=0;i_EQGetItemDesc_1_tWriteJSONField_1_Out<orders_EQGetItemDesc_1_tWriteJSONField_1_Out.length;i_EQGetItemDesc_1_tWriteJSONField_1_Out++){
				orders_EQGetItemDesc_1_tWriteJSONField_1_Out[i_EQGetItemDesc_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetItemDesc_1_tWriteJSONField_1_Out != null && groupbyList_EQGetItemDesc_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetItemDesc_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetItemDesc_1_tWriteJSONField_1_Out=strTemp_EQGetItemDesc_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetItemDesc_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetItemDesc_1_tWriteJSONField_1_Out) {
		needRoot_EQGetItemDesc_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetItemDesc_1_tWriteJSONField_1_Out = doc_EQGetItemDesc_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetItemDesc_1_tWriteJSONField_1_Out = root_EQGetItemDesc_1_tWriteJSONField_1_Out;
		root4Group_EQGetItemDesc_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetItemDesc_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetItemDesc_1_tWriteJSONField_1_Out=root4Group_EQGetItemDesc_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetItemDesc_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("NAME");
        if(orders_EQGetItemDesc_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetItemDesc_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetItemDesc_1_tWriteJSONField_1_Out.length){
        		orders_EQGetItemDesc_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetItemDesc_1_tWriteJSONField_1_Out.elements().add(orders_EQGetItemDesc_1_tWriteJSONField_1_Out[0]++,loop_EQGetItemDesc_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.get("NAME")!=null){
			nestXMLTool_EQGetItemDesc_1_tWriteJSONField_1_Out .setText(loop_EQGetItemDesc_1_tWriteJSONField_1_Out,
		valueMap_EQGetItemDesc_1_tWriteJSONField_1_Out.get("NAME"));
		}

 


	tos_count_EQGetItemDesc_1_tWriteJSONField_1_Out++;

/**
 * [EQGetItemDesc_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetItemDesc_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetItemDesc_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetItemDesc_1_tAzureSynapseInput_1 != null) {
		rs_EQGetItemDesc_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetItemDesc_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetItemDesc_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetItemDesc_1_tAzureSynapseInput_1 != null && !conn_EQGetItemDesc_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetItemDesc_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetItemDesc_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetItemDesc_1_tAzureSynapseInput_1);
	    		log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetItemDesc_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetItemDesc_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetItemDesc_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetItemDesc_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetItemDesc_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetItemDesc_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetItemDesc_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetItemDesc_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetItemDesc_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetItemDesc_1_tWriteJSONField_1_Out, format_EQGetItemDesc_1_tWriteJSONField_1_Out);
	output_EQGetItemDesc_1_tWriteJSONField_1_Out.write(doc_EQGetItemDesc_1_tWriteJSONField_1_Out);
    output_EQGetItemDesc_1_tWriteJSONField_1_Out.close();
					EQGetItemDesc_1_row5Struct row_EQGetItemDesc_1_tWriteJSONField_1_Out = new EQGetItemDesc_1_row5Struct();
						  
					     		row_EQGetItemDesc_1_tWriteJSONField_1_Out.body = strWriter_EQGetItemDesc_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out.add(row_EQGetItemDesc_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetItemDesc_1_tWriteJSONField_1_Out);
globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetItemDesc_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetItemDesc_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetItemDesc_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetItemDesc_1_row1",2,0,
			 			"EQGetItemDesc_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetItemDesc_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetItemDesc_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetItemDesc_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetItemDesc_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetItemDesc_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetItemDesc_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetItemDesc_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetItemDesc_1_tWriteJSONField_1_Out");
	if (future_EQGetItemDesc_1_tWriteJSONField_1_Out != null) {
		future_EQGetItemDesc_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetItemDesc_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetParentLine_1_row1Struct implements routines.system.IPersistableRow<EQGetParentLine_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}

				public Boolean ITEMIDIsNullable(){
				    return true;
				}
				public Boolean ITEMIDIsKey(){
				    return false;
				}
				public Integer ITEMIDLength(){
				    return null;
				}
				public Integer ITEMIDPrecision(){
				    return null;
				}
				public String ITEMIDDefault(){
				
					return null;
				
				}
				public String ITEMIDComment(){
				
				    return "";
				
				}
				public String ITEMIDPattern(){
				
					return "";
				
				}
				public String ITEMIDOriginalDbColumnName(){
				
					return "ITEMID";
				
				}

				
			    public String SALESID;

				public String getSALESID () {
					return this.SALESID;
				}

				public Boolean SALESIDIsNullable(){
				    return true;
				}
				public Boolean SALESIDIsKey(){
				    return false;
				}
				public Integer SALESIDLength(){
				    return null;
				}
				public Integer SALESIDPrecision(){
				    return null;
				}
				public String SALESIDDefault(){
				
					return null;
				
				}
				public String SALESIDComment(){
				
				    return "";
				
				}
				public String SALESIDPattern(){
				
					return "";
				
				}
				public String SALESIDOriginalDbColumnName(){
				
					return "SALESID";
				
				}

				
			    public Float LINENUM;

				public Float getLINENUM () {
					return this.LINENUM;
				}

				public Boolean LINENUMIsNullable(){
				    return true;
				}
				public Boolean LINENUMIsKey(){
				    return false;
				}
				public Integer LINENUMLength(){
				    return null;
				}
				public Integer LINENUMPrecision(){
				    return null;
				}
				public String LINENUMDefault(){
				
					return null;
				
				}
				public String LINENUMComment(){
				
				    return "";
				
				}
				public String LINENUMPattern(){
				
					return "";
				
				}
				public String LINENUMOriginalDbColumnName(){
				
					return "LINENUM";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.SALESID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINENUM = null;
           				} else {
           			    	this.LINENUM = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.SALESID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINENUM = null;
           				} else {
           			    	this.LINENUM = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.SALESID,dos);
					
					// Float
				
						if(this.LINENUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.LINENUM);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.SALESID,dos);
					
					// Float
				
						if(this.LINENUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.LINENUM);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",SALESID="+SALESID);
		sb.append(",LINENUM="+String.valueOf(LINENUM));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ITEMID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEMID);
            			}
            		
        			sb.append("|");
        		
        				if(SALESID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SALESID);
            			}
            		
        			sb.append("|");
        		
        				if(LINENUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LINENUM);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetParentLine_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetParentLine_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetParentLine_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetParentLine_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetParentLine_1_row1Struct EQGetParentLine_1_row1 = new EQGetParentLine_1_row1Struct();




	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetParentLine_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetParentLine_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetParentLine_1_row1");
			
		int tos_count_EQGetParentLine_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetParentLine_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetParentLine_1_tWriteJSONField_1");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetParentLine_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetParentLine_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetParentLine_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetParentLine_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetParentLine_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetParentLine_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetParentLine_1_row5Struct> listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetParentLine_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetParentLine_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetParentLine_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetParentLine_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetParentLine_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetParentLine_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetParentLine_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetParentLine_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetParentLine_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetParentLine_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetParentLine_1_tWriteJSONField_1_Out txf_EQGetParentLine_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetParentLine_1_tWriteJSONField_1_Out(listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetParentLine_1_tWriteJSONField_1_Out = es.submit(txf_EQGetParentLine_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetParentLine_1_tWriteJSONField_1_Out", future_EQGetParentLine_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetParentLine_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetParentLine_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetParentLine_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetParentLine_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetParentLine_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetParentLine_1_tWriteJSONField_1_Out nestXMLTool_EQGetParentLine_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetParentLine_1_tWriteJSONField_1_Out();

EQGetParentLine_1_row1Struct  rowStructOutput_EQGetParentLine_1_tWriteJSONField_1_Out = new EQGetParentLine_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetParentLine_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetParentLine_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetParentLine_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetParentLine_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetParentLine_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetParentLine_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetParentLine_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetParentLine_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetParentLine_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetParentLine_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetParentLine_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetParentLine_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetParentLine_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetParentLine_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetParentLine\"");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetParentLine WHERE salesId='\" + ((String)globalMap.get(\"EQGetParentLine.salesId\")) + \"' AND lineNum=\" +((String)globalMap.get(\"EQGetParentLine.lineNum\"))+ \";\"");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ITEMID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("SALESID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("LINENUM")+"}]");
                        log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetParentLine_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetParentLine_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetParentLine_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetParentLine_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetParentLine_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetParentLine_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetParentLine_1_tAzureSynapseInput_1, talendToDBArray_EQGetParentLine_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetParentLine_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetParentLine_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetParentLine_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetParentLine_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetParentLine_1_tAzureSynapseInput_1);
				String dbUser_EQGetParentLine_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetParentLine_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetParentLine_1_tAzureSynapseInput_1 = decryptedPassword_EQGetParentLine_1_tAzureSynapseInput_1;
				
		    String port_EQGetParentLine_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetParentLine_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetParentLine_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetParentLine_1_tAzureSynapseInput_1)) {
		    	url_EQGetParentLine_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetParentLine_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetParentLine_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetParentLine_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetParentLine_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetParentLine_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetParentLine_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetParentLine_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetParentLine_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetParentLine_1_tAzureSynapseInput_1,dbUser_EQGetParentLine_1_tAzureSynapseInput_1,dbPwd_EQGetParentLine_1_tAzureSynapseInput_1);
	    		log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetParentLine_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetParentLine_1_tAzureSynapseInput_1 = conn_EQGetParentLine_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetParentLine_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetParentLine WHERE salesId='" + ((String)globalMap.get("EQGetParentLine.salesId")) + "' AND lineNum=" +((String)globalMap.get("EQGetParentLine.lineNum"))+ ";";
		    
	    		log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetParentLine_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetParentLine_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetParentLine_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetParentLine_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetParentLine_1_tAzureSynapseInput_1 = stmt_EQGetParentLine_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetParentLine_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetParentLine_1_tAzureSynapseInput_1 = rs_EQGetParentLine_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetParentLine_1_tAzureSynapseInput_1 = rsmd_EQGetParentLine_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetParentLine_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetParentLine_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetParentLine_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetParentLine_1_tAzureSynapseInput_1 < 1) {
								EQGetParentLine_1_row1.ITEMID = null;
							} else {
	                         		
           		tmpContent_EQGetParentLine_1_tAzureSynapseInput_1 = rs_EQGetParentLine_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetParentLine_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetParentLine_1_tAzureSynapseInput_1 .contains(rsmd_EQGetParentLine_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetParentLine_1_row1.ITEMID = FormatterUtils.formatUnwithE(tmpContent_EQGetParentLine_1_tAzureSynapseInput_1);
            	} else {
                	EQGetParentLine_1_row1.ITEMID = tmpContent_EQGetParentLine_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetParentLine_1_row1.ITEMID = null;
            }
		                    }
							if(colQtyInRs_EQGetParentLine_1_tAzureSynapseInput_1 < 2) {
								EQGetParentLine_1_row1.SALESID = null;
							} else {
	                         		
           		tmpContent_EQGetParentLine_1_tAzureSynapseInput_1 = rs_EQGetParentLine_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetParentLine_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetParentLine_1_tAzureSynapseInput_1 .contains(rsmd_EQGetParentLine_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetParentLine_1_row1.SALESID = FormatterUtils.formatUnwithE(tmpContent_EQGetParentLine_1_tAzureSynapseInput_1);
            	} else {
                	EQGetParentLine_1_row1.SALESID = tmpContent_EQGetParentLine_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetParentLine_1_row1.SALESID = null;
            }
		                    }
							if(colQtyInRs_EQGetParentLine_1_tAzureSynapseInput_1 < 3) {
								EQGetParentLine_1_row1.LINENUM = null;
							} else {
		                          
            EQGetParentLine_1_row1.LINENUM = rs_EQGetParentLine_1_tAzureSynapseInput_1.getFloat(3);
            if(rs_EQGetParentLine_1_tAzureSynapseInput_1.wasNull()){
                    EQGetParentLine_1_row1.LINENUM = null;
            }
		                    }
					
						log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetParentLine_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetParentLine_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetParentLine_1_tAzureSynapseInput_1++;

/**
 * [EQGetParentLine_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetParentLine_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetParentLine_1_row1","EQGetParentLine_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetParentLine_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetParentLine_1_row1 - " + (EQGetParentLine_1_row1==null? "": EQGetParentLine_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetParentLine_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetParentLine_1_tWriteJSONField_1_Out++;
				log.debug("EQGetParentLine_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetParentLine_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetParentLine_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetParentLine_1_tWriteJSONField_1_Out helper_EQGetParentLine_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetParentLine_1_tWriteJSONField_1_Out();

	valueMap_EQGetParentLine_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetParentLine_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetParentLine_1_tWriteJSONField_1_Out.put("ITEMID", helper_EQGetParentLine_1_tWriteJSONField_1_Out.toString(
	(
		EQGetParentLine_1_row1.ITEMID != null?
            EQGetParentLine_1_row1.ITEMID.toString():null
		)));
	arraysValueMap_EQGetParentLine_1_tWriteJSONField_1_Out.put("ITEMID", helper_EQGetParentLine_1_tWriteJSONField_1_Out.toString(
	(
		EQGetParentLine_1_row1.ITEMID != null?
            EQGetParentLine_1_row1.ITEMID.toString():null
		)));
	valueMap_EQGetParentLine_1_tWriteJSONField_1_Out.put("SALESID", helper_EQGetParentLine_1_tWriteJSONField_1_Out.toString(
	(
		EQGetParentLine_1_row1.SALESID != null?
            EQGetParentLine_1_row1.SALESID.toString():null
		)));
	arraysValueMap_EQGetParentLine_1_tWriteJSONField_1_Out.put("SALESID", helper_EQGetParentLine_1_tWriteJSONField_1_Out.toString(
	(
		EQGetParentLine_1_row1.SALESID != null?
            EQGetParentLine_1_row1.SALESID.toString():null
		)));
	valueMap_EQGetParentLine_1_tWriteJSONField_1_Out.put("LINENUM", helper_EQGetParentLine_1_tWriteJSONField_1_Out.toString(
	(
		EQGetParentLine_1_row1.LINENUM != null?
            EQGetParentLine_1_row1.LINENUM.toString():null
		)));
	arraysValueMap_EQGetParentLine_1_tWriteJSONField_1_Out.put("LINENUM", helper_EQGetParentLine_1_tWriteJSONField_1_Out.toString(
	(
		EQGetParentLine_1_row1.LINENUM != null?
            EQGetParentLine_1_row1.LINENUM.toString():null
		)));
		String strTemp_EQGetParentLine_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetParentLine_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetParentLine_1_tWriteJSONField_1_Out=strTemp_EQGetParentLine_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetParentLine_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetParentLine_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetParentLine_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetParentLine_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetParentLine_1_tWriteJSONField_1_Out, format_EQGetParentLine_1_tWriteJSONField_1_Out);
			output_EQGetParentLine_1_tWriteJSONField_1_Out.write(doc_EQGetParentLine_1_tWriteJSONField_1_Out);
		    output_EQGetParentLine_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetParentLine_1_row5Struct row_EQGetParentLine_1_tWriteJSONField_1_Out = new EQGetParentLine_1_row5Struct();
						  
					     		row_EQGetParentLine_1_tWriteJSONField_1_Out.body = strWriter_EQGetParentLine_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out.add(row_EQGetParentLine_1_tWriteJSONField_1_Out);
					
		    doc_EQGetParentLine_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetParentLine_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetParentLine_1_tWriteJSONField_1_Out=0;i_EQGetParentLine_1_tWriteJSONField_1_Out<orders_EQGetParentLine_1_tWriteJSONField_1_Out.length;i_EQGetParentLine_1_tWriteJSONField_1_Out++){
				orders_EQGetParentLine_1_tWriteJSONField_1_Out[i_EQGetParentLine_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetParentLine_1_tWriteJSONField_1_Out != null && groupbyList_EQGetParentLine_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetParentLine_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetParentLine_1_tWriteJSONField_1_Out=strTemp_EQGetParentLine_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetParentLine_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetParentLine_1_tWriteJSONField_1_Out) {
		needRoot_EQGetParentLine_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetParentLine_1_tWriteJSONField_1_Out = doc_EQGetParentLine_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetParentLine_1_tWriteJSONField_1_Out = root_EQGetParentLine_1_tWriteJSONField_1_Out;
		root4Group_EQGetParentLine_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetParentLine_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetParentLine_1_tWriteJSONField_1_Out=root4Group_EQGetParentLine_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetParentLine_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("ITEMID");
        if(orders_EQGetParentLine_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetParentLine_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetParentLine_1_tWriteJSONField_1_Out.length){
        		orders_EQGetParentLine_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetParentLine_1_tWriteJSONField_1_Out.elements().add(orders_EQGetParentLine_1_tWriteJSONField_1_Out[0]++,loop_EQGetParentLine_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetParentLine_1_tWriteJSONField_1_Out.get("ITEMID")!=null){
			nestXMLTool_EQGetParentLine_1_tWriteJSONField_1_Out .setText(loop_EQGetParentLine_1_tWriteJSONField_1_Out,
		valueMap_EQGetParentLine_1_tWriteJSONField_1_Out.get("ITEMID"));
		}

 


	tos_count_EQGetParentLine_1_tWriteJSONField_1_Out++;

/**
 * [EQGetParentLine_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetParentLine_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetParentLine_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetParentLine_1_tAzureSynapseInput_1 != null) {
		rs_EQGetParentLine_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetParentLine_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetParentLine_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetParentLine_1_tAzureSynapseInput_1 != null && !conn_EQGetParentLine_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetParentLine_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetParentLine_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetParentLine_1_tAzureSynapseInput_1);
	    		log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetParentLine_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetParentLine_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetParentLine_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetParentLine_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetParentLine_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetParentLine_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetParentLine_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetParentLine_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetParentLine_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetParentLine_1_tWriteJSONField_1_Out, format_EQGetParentLine_1_tWriteJSONField_1_Out);
	output_EQGetParentLine_1_tWriteJSONField_1_Out.write(doc_EQGetParentLine_1_tWriteJSONField_1_Out);
    output_EQGetParentLine_1_tWriteJSONField_1_Out.close();
					EQGetParentLine_1_row5Struct row_EQGetParentLine_1_tWriteJSONField_1_Out = new EQGetParentLine_1_row5Struct();
						  
					     		row_EQGetParentLine_1_tWriteJSONField_1_Out.body = strWriter_EQGetParentLine_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out.add(row_EQGetParentLine_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetParentLine_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetParentLine_1_tWriteJSONField_1_Out);
globalMap.put("EQGetParentLine_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetParentLine_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetParentLine_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetParentLine_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetParentLine_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetParentLine_1_row1",2,0,
			 			"EQGetParentLine_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetParentLine_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetParentLine_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetParentLine_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetParentLine_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetParentLine_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetParentLine_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetParentLine_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetParentLine_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetParentLine_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetParentLine_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetParentLine_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetParentLine_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetParentLine_1_tWriteJSONField_1_Out");
	if (future_EQGetParentLine_1_tWriteJSONField_1_Out != null) {
		future_EQGetParentLine_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetParentLine_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetPriceGroupTier_1_outStruct implements routines.system.IPersistableRow<EQGetPriceGroupTier_1_outStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String PriceGroupTier;

				public String getPriceGroupTier () {
					return this.PriceGroupTier;
				}

				public Boolean PriceGroupTierIsNullable(){
				    return true;
				}
				public Boolean PriceGroupTierIsKey(){
				    return false;
				}
				public Integer PriceGroupTierLength(){
				    return null;
				}
				public Integer PriceGroupTierPrecision(){
				    return null;
				}
				public String PriceGroupTierDefault(){
				
					return null;
				
				}
				public String PriceGroupTierComment(){
				
				    return "";
				
				}
				public String PriceGroupTierPattern(){
				
					return "";
				
				}
				public String PriceGroupTierOriginalDbColumnName(){
				
					return "PriceGroupTier";
				
				}

				
			    public String ACCOUNTNUM;

				public String getACCOUNTNUM () {
					return this.ACCOUNTNUM;
				}

				public Boolean ACCOUNTNUMIsNullable(){
				    return true;
				}
				public Boolean ACCOUNTNUMIsKey(){
				    return false;
				}
				public Integer ACCOUNTNUMLength(){
				    return null;
				}
				public Integer ACCOUNTNUMPrecision(){
				    return null;
				}
				public String ACCOUNTNUMDefault(){
				
					return null;
				
				}
				public String ACCOUNTNUMComment(){
				
				    return "";
				
				}
				public String ACCOUNTNUMPattern(){
				
					return "";
				
				}
				public String ACCOUNTNUMOriginalDbColumnName(){
				
					return "ACCOUNTNUM";
				
				}

				
			    public String PRICEGROUP;

				public String getPRICEGROUP () {
					return this.PRICEGROUP;
				}

				public Boolean PRICEGROUPIsNullable(){
				    return true;
				}
				public Boolean PRICEGROUPIsKey(){
				    return false;
				}
				public Integer PRICEGROUPLength(){
				    return null;
				}
				public Integer PRICEGROUPPrecision(){
				    return null;
				}
				public String PRICEGROUPDefault(){
				
					return null;
				
				}
				public String PRICEGROUPComment(){
				
				    return "";
				
				}
				public String PRICEGROUPPattern(){
				
					return "";
				
				}
				public String PRICEGROUPOriginalDbColumnName(){
				
					return "PRICEGROUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.PriceGroupTier = readString(dis);
					
					this.ACCOUNTNUM = readString(dis);
					
					this.PRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.PriceGroupTier = readString(dis);
					
					this.ACCOUNTNUM = readString(dis);
					
					this.PRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PriceGroupTier,dos);
					
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.PRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PriceGroupTier,dos);
					
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.PRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PriceGroupTier="+PriceGroupTier);
		sb.append(",ACCOUNTNUM="+ACCOUNTNUM);
		sb.append(",PRICEGROUP="+PRICEGROUP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(PriceGroupTier == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PriceGroupTier);
            			}
            		
        			sb.append("|");
        		
        				if(ACCOUNTNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACCOUNTNUM);
            			}
            		
        			sb.append("|");
        		
        				if(PRICEGROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICEGROUP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetPriceGroupTier_1_outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetPriceGroupTier_1_row1Struct implements routines.system.IPersistableRow<EQGetPriceGroupTier_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ACCOUNTNUM;

				public String getACCOUNTNUM () {
					return this.ACCOUNTNUM;
				}

				public Boolean ACCOUNTNUMIsNullable(){
				    return true;
				}
				public Boolean ACCOUNTNUMIsKey(){
				    return false;
				}
				public Integer ACCOUNTNUMLength(){
				    return null;
				}
				public Integer ACCOUNTNUMPrecision(){
				    return null;
				}
				public String ACCOUNTNUMDefault(){
				
					return null;
				
				}
				public String ACCOUNTNUMComment(){
				
				    return "";
				
				}
				public String ACCOUNTNUMPattern(){
				
					return "";
				
				}
				public String ACCOUNTNUMOriginalDbColumnName(){
				
					return "ACCOUNTNUM";
				
				}

				
			    public String PRICEGROUP;

				public String getPRICEGROUP () {
					return this.PRICEGROUP;
				}

				public Boolean PRICEGROUPIsNullable(){
				    return true;
				}
				public Boolean PRICEGROUPIsKey(){
				    return false;
				}
				public Integer PRICEGROUPLength(){
				    return null;
				}
				public Integer PRICEGROUPPrecision(){
				    return null;
				}
				public String PRICEGROUPDefault(){
				
					return null;
				
				}
				public String PRICEGROUPComment(){
				
				    return "";
				
				}
				public String PRICEGROUPPattern(){
				
					return "";
				
				}
				public String PRICEGROUPOriginalDbColumnName(){
				
					return "PRICEGROUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ACCOUNTNUM = readString(dis);
					
					this.PRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ACCOUNTNUM = readString(dis);
					
					this.PRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.PRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.PRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ACCOUNTNUM="+ACCOUNTNUM);
		sb.append(",PRICEGROUP="+PRICEGROUP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ACCOUNTNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACCOUNTNUM);
            			}
            		
        			sb.append("|");
        		
        				if(PRICEGROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICEGROUP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetPriceGroupTier_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetPriceGroupTier_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetPriceGroupTier_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetPriceGroupTier_1_row1Struct EQGetPriceGroupTier_1_row1 = new EQGetPriceGroupTier_1_row1Struct();
EQGetPriceGroupTier_1_outStruct EQGetPriceGroupTier_1_out = new EQGetPriceGroupTier_1_outStruct();





	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetPriceGroupTier_1_out");
			
		int tos_count_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetPriceGroupTier_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("PriceGroupTier")+"}]");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetPriceGroupTier_1_tWriteJSONField_1");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetPriceGroupTier_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetPriceGroupTier_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetPriceGroupTier_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetPriceGroupTier_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetPriceGroupTier_1_row5Struct> listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetPriceGroupTier_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetPriceGroupTier_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetPriceGroupTier_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetPriceGroupTier_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetPriceGroupTier_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetPriceGroupTier_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetPriceGroupTier_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetPriceGroupTier_1_tWriteJSONField_1_Out txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetPriceGroupTier_1_tWriteJSONField_1_Out(listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = es.submit(txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetPriceGroupTier_1_tWriteJSONField_1_Out", future_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetPriceGroupTier_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetPriceGroupTier_1_tWriteJSONField_1_Out nestXMLTool_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetPriceGroupTier_1_tWriteJSONField_1_Out();

EQGetPriceGroupTier_1_outStruct  rowStructOutput_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new EQGetPriceGroupTier_1_outStruct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetPriceGroupTier_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetPriceGroupTier_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetPriceGroupTier_1_tMap_1", false);
		start_Hash.put("EQGetPriceGroupTier_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetPriceGroupTier_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetPriceGroupTier_1_row1");
			
		int tos_count_EQGetPriceGroupTier_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetPriceGroupTier_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetPriceGroupTier_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetPriceGroupTier_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetPriceGroupTier_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetPriceGroupTier_1_tMap_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetPriceGroupTier_1_tMap_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetPriceGroupTier_1_tMap_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetPriceGroupTier_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tMap_1 - "  + (log4jParamters_EQGetPriceGroupTier_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetPriceGroupTier_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetPriceGroupTier_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetPriceGroupTier_1_row1_EQGetPriceGroupTier_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetPriceGroupTier_1_out_EQGetPriceGroupTier_1_tMap_1 = 0;
				
EQGetPriceGroupTier_1_outStruct EQGetPriceGroupTier_1_out_tmp = new EQGetPriceGroupTier_1_outStruct();
// ###############################

        
        



        









 



/**
 * [EQGetPriceGroupTier_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetPriceGroupTier_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetPriceGroupTier_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetPriceGroupTier\"");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetPriceGroupTier WHERE ACCOUNTNUM= '\"+((String)globalMap.get(\"EQGetPriceGroupTier.accountNum\"))+\"';\"");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ACCOUNTNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("PRICEGROUP")+"}]");
                        log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetPriceGroupTier_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetPriceGroupTier_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetPriceGroupTier_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetPriceGroupTier_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetPriceGroupTier_1_tAzureSynapseInput_1, talendToDBArray_EQGetPriceGroupTier_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetPriceGroupTier_1_tAzureSynapseInput_1);
				String dbUser_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = decryptedPassword_EQGetPriceGroupTier_1_tAzureSynapseInput_1;
				
		    String port_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetPriceGroupTier_1_tAzureSynapseInput_1)) {
		    	url_EQGetPriceGroupTier_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetPriceGroupTier_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetPriceGroupTier_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetPriceGroupTier_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetPriceGroupTier_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetPriceGroupTier_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetPriceGroupTier_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetPriceGroupTier_1_tAzureSynapseInput_1,dbUser_EQGetPriceGroupTier_1_tAzureSynapseInput_1,dbPwd_EQGetPriceGroupTier_1_tAzureSynapseInput_1);
	    		log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetPriceGroupTier_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = conn_EQGetPriceGroupTier_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetPriceGroupTier WHERE ACCOUNTNUM= '"+((String)globalMap.get("EQGetPriceGroupTier.accountNum"))+"';";
		    
	    		log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetPriceGroupTier_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetPriceGroupTier_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = stmt_EQGetPriceGroupTier_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetPriceGroupTier_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = rsmd_EQGetPriceGroupTier_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetPriceGroupTier_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetPriceGroupTier_1_tAzureSynapseInput_1 < 1) {
								EQGetPriceGroupTier_1_row1.ACCOUNTNUM = null;
							} else {
	                         		
           		tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetPriceGroupTier_1_tAzureSynapseInput_1 .contains(rsmd_EQGetPriceGroupTier_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetPriceGroupTier_1_row1.ACCOUNTNUM = FormatterUtils.formatUnwithE(tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1);
            	} else {
                	EQGetPriceGroupTier_1_row1.ACCOUNTNUM = tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetPriceGroupTier_1_row1.ACCOUNTNUM = null;
            }
		                    }
							if(colQtyInRs_EQGetPriceGroupTier_1_tAzureSynapseInput_1 < 2) {
								EQGetPriceGroupTier_1_row1.PRICEGROUP = null;
							} else {
	                         		
           		tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1 = rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetPriceGroupTier_1_tAzureSynapseInput_1 .contains(rsmd_EQGetPriceGroupTier_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetPriceGroupTier_1_row1.PRICEGROUP = FormatterUtils.formatUnwithE(tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1);
            	} else {
                	EQGetPriceGroupTier_1_row1.PRICEGROUP = tmpContent_EQGetPriceGroupTier_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetPriceGroupTier_1_row1.PRICEGROUP = null;
            }
		                    }
					
						log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetPriceGroupTier_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetPriceGroupTier_1_tAzureSynapseInput_1++;

/**
 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetPriceGroupTier_1_row1","EQGetPriceGroupTier_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetPriceGroupTier_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetPriceGroupTier_1_row1 - " + (EQGetPriceGroupTier_1_row1==null? "": EQGetPriceGroupTier_1_row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetPriceGroupTier_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetPriceGroupTier_1_tMap_1 = false;
		boolean mainRowRejected_EQGetPriceGroupTier_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetPriceGroupTier_1_out = null;


// # Output table : 'EQGetPriceGroupTier_1_out'
count_EQGetPriceGroupTier_1_out_EQGetPriceGroupTier_1_tMap_1++;

EQGetPriceGroupTier_1_out_tmp.PriceGroupTier = "x";
EQGetPriceGroupTier_1_out_tmp.ACCOUNTNUM = EQGetPriceGroupTier_1_row1.ACCOUNTNUM;
EQGetPriceGroupTier_1_out_tmp.PRICEGROUP = EQGetPriceGroupTier_1_row1.PRICEGROUP;
EQGetPriceGroupTier_1_out = EQGetPriceGroupTier_1_out_tmp;
log.debug("EQGetPriceGroupTier_1_tMap_1 - Outputting the record " + count_EQGetPriceGroupTier_1_out_EQGetPriceGroupTier_1_tMap_1 + " of the output table 'EQGetPriceGroupTier_1_out'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetPriceGroupTier_1_tMap_1 = false;










 


	tos_count_EQGetPriceGroupTier_1_tMap_1++;

/**
 * [EQGetPriceGroupTier_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tMap_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetPriceGroupTier_1_out"
if(EQGetPriceGroupTier_1_out != null) { 



	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetPriceGroupTier_1_out","EQGetPriceGroupTier_1_tMap_1","tMap_1","tMap","EQGetPriceGroupTier_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetPriceGroupTier_1_out - " + (EQGetPriceGroupTier_1_out==null? "": EQGetPriceGroupTier_1_out.toLogString()));
    			}
    		

	if(txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_Out++;
				log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out helper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out();

	valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.put("PriceGroupTier", helper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString(
	(
		EQGetPriceGroupTier_1_out.PriceGroupTier != null?
            EQGetPriceGroupTier_1_out.PriceGroupTier.toString():null
		)));
	arraysValueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.put("PriceGroupTier", helper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString(
	(
		EQGetPriceGroupTier_1_out.PriceGroupTier != null?
            EQGetPriceGroupTier_1_out.PriceGroupTier.toString():null
		)));
	valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.put("ACCOUNTNUM", helper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString(
	(
		EQGetPriceGroupTier_1_out.ACCOUNTNUM != null?
            EQGetPriceGroupTier_1_out.ACCOUNTNUM.toString():null
		)));
	arraysValueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.put("ACCOUNTNUM", helper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString(
	(
		EQGetPriceGroupTier_1_out.ACCOUNTNUM != null?
            EQGetPriceGroupTier_1_out.ACCOUNTNUM.toString():null
		)));
	valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.put("PRICEGROUP", helper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString(
	(
		EQGetPriceGroupTier_1_out.PRICEGROUP != null?
            EQGetPriceGroupTier_1_out.PRICEGROUP.toString():null
		)));
	arraysValueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.put("PRICEGROUP", helper_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString(
	(
		EQGetPriceGroupTier_1_out.PRICEGROUP != null?
            EQGetPriceGroupTier_1_out.PRICEGROUP.toString():null
		)));
		String strTemp_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = "";		strTemp_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = strTemp_EQGetPriceGroupTier_1_tWriteJSONField_1_Out + valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.get("PriceGroupTier")
							+ valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.get("PriceGroupTier").length();
	if(strCompCache_EQGetPriceGroupTier_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetPriceGroupTier_1_tWriteJSONField_1_Out=strTemp_EQGetPriceGroupTier_1_tWriteJSONField_1_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.equals(strTemp_EQGetPriceGroupTier_1_tWriteJSONField_1_Out)){	  
    		nestXMLTool_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetPriceGroupTier_1_tWriteJSONField_1_Out, format_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
			output_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.write(doc_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
		    output_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetPriceGroupTier_1_row5Struct row_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new EQGetPriceGroupTier_1_row5Struct();
						  
					     		row_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.body = strWriter_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.add(row_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
					
		    doc_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetPriceGroupTier_1_tWriteJSONField_1_Out=0;i_EQGetPriceGroupTier_1_tWriteJSONField_1_Out<orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.length;i_EQGetPriceGroupTier_1_tWriteJSONField_1_Out++){
				orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out[i_EQGetPriceGroupTier_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetPriceGroupTier_1_tWriteJSONField_1_Out != null && groupbyList_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetPriceGroupTier_1_tWriteJSONField_1_Out=strTemp_EQGetPriceGroupTier_1_tWriteJSONField_1_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetPriceGroupTier_1_tWriteJSONField_1_Out) {
		needRoot_EQGetPriceGroupTier_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = doc_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.addElement("PriceGroupTier");
		subTreeRootParent_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = root_EQGetPriceGroupTier_1_tWriteJSONField_1_Out;
		root4Group_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetPriceGroupTier_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetPriceGroupTier_1_tWriteJSONField_1_Out=root4Group_EQGetPriceGroupTier_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("PriceGroupTier");
        if(orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.length){
        		orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.elements().add(orders_EQGetPriceGroupTier_1_tWriteJSONField_1_Out[0]++,loop_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
		org.dom4j.Element loop_0_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = loop_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.addElement("PRICEGROUP");
		if(
		valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.get("PRICEGROUP")!=null){
			nestXMLTool_EQGetPriceGroupTier_1_tWriteJSONField_1_Out .setText(loop_0_EQGetPriceGroupTier_1_tWriteJSONField_1_Out,
		valueMap_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.get("PRICEGROUP"));
		}

 


	tos_count_EQGetPriceGroupTier_1_tWriteJSONField_1_Out++;

/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out process_data_end ] stop
 */

} // End of branch "EQGetPriceGroupTier_1_out"




	
	/**
	 * [EQGetPriceGroupTier_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tMap_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1 != null) {
		rs_EQGetPriceGroupTier_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetPriceGroupTier_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetPriceGroupTier_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetPriceGroupTier_1_tAzureSynapseInput_1 != null && !conn_EQGetPriceGroupTier_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetPriceGroupTier_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetPriceGroupTier_1_tAzureSynapseInput_1);
	    		log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetPriceGroupTier_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetPriceGroupTier_1_tMap_1 - Written records count in the table 'EQGetPriceGroupTier_1_out': " + count_EQGetPriceGroupTier_1_out_EQGetPriceGroupTier_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetPriceGroupTier_1_row1",2,0,
			 			"EQGetPriceGroupTier_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetPriceGroupTier_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetPriceGroupTier_1_tMap_1", true);
end_Hash.put("EQGetPriceGroupTier_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetPriceGroupTier_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetPriceGroupTier_1_tWriteJSONField_1_Out, format_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
	output_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.write(doc_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
    output_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.close();
					EQGetPriceGroupTier_1_row5Struct row_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = new EQGetPriceGroupTier_1_row5Struct();
						  
					     		row_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.body = strWriter_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.add(row_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_Out);
globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetPriceGroupTier_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetPriceGroupTier_1_out",2,0,
			 			"EQGetPriceGroupTier_1_tMap_1","tMap_1","tMap","EQGetPriceGroupTier_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tMap_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetPriceGroupTier_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetPriceGroupTier_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetPriceGroupTier_1_tWriteJSONField_1_Out");
	if (future_EQGetPriceGroupTier_1_tWriteJSONField_1_Out != null) {
		future_EQGetPriceGroupTier_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetPriceGroupTier_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetProdOrders_1_out1Struct implements routines.system.IPersistableRow<EQGetProdOrders_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ProdOrders;

				public String getProdOrders () {
					return this.ProdOrders;
				}

				public Boolean ProdOrdersIsNullable(){
				    return true;
				}
				public Boolean ProdOrdersIsKey(){
				    return false;
				}
				public Integer ProdOrdersLength(){
				    return null;
				}
				public Integer ProdOrdersPrecision(){
				    return null;
				}
				public String ProdOrdersDefault(){
				
					return null;
				
				}
				public String ProdOrdersComment(){
				
				    return "";
				
				}
				public String ProdOrdersPattern(){
				
					return "";
				
				}
				public String ProdOrdersOriginalDbColumnName(){
				
					return "ProdOrders";
				
				}

				
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}

				public Boolean ITEMIDIsNullable(){
				    return true;
				}
				public Boolean ITEMIDIsKey(){
				    return false;
				}
				public Integer ITEMIDLength(){
				    return null;
				}
				public Integer ITEMIDPrecision(){
				    return null;
				}
				public String ITEMIDDefault(){
				
					return null;
				
				}
				public String ITEMIDComment(){
				
				    return "";
				
				}
				public String ITEMIDPattern(){
				
					return "";
				
				}
				public String ITEMIDOriginalDbColumnName(){
				
					return "ITEMID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ProdOrders = readString(dis);
					
					this.ITEMID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ProdOrders = readString(dis);
					
					this.ITEMID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProdOrders,dos);
					
					// String
				
						writeString(this.ITEMID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProdOrders,dos);
					
					// String
				
						writeString(this.ITEMID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProdOrders="+ProdOrders);
		sb.append(",ITEMID="+ITEMID);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ProdOrders == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ProdOrders);
            			}
            		
        			sb.append("|");
        		
        				if(ITEMID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEMID);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetProdOrders_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetProdOrders_1_row1Struct implements routines.system.IPersistableRow<EQGetProdOrders_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}

				public Boolean ITEMIDIsNullable(){
				    return true;
				}
				public Boolean ITEMIDIsKey(){
				    return false;
				}
				public Integer ITEMIDLength(){
				    return null;
				}
				public Integer ITEMIDPrecision(){
				    return null;
				}
				public String ITEMIDDefault(){
				
					return null;
				
				}
				public String ITEMIDComment(){
				
				    return "";
				
				}
				public String ITEMIDPattern(){
				
					return "";
				
				}
				public String ITEMIDOriginalDbColumnName(){
				
					return "ITEMID";
				
				}

				
			    public String CONFIGUREITEMMASTER;

				public String getCONFIGUREITEMMASTER () {
					return this.CONFIGUREITEMMASTER;
				}

				public Boolean CONFIGUREITEMMASTERIsNullable(){
				    return true;
				}
				public Boolean CONFIGUREITEMMASTERIsKey(){
				    return false;
				}
				public Integer CONFIGUREITEMMASTERLength(){
				    return null;
				}
				public Integer CONFIGUREITEMMASTERPrecision(){
				    return null;
				}
				public String CONFIGUREITEMMASTERDefault(){
				
					return null;
				
				}
				public String CONFIGUREITEMMASTERComment(){
				
				    return "";
				
				}
				public String CONFIGUREITEMMASTERPattern(){
				
					return "";
				
				}
				public String CONFIGUREITEMMASTEROriginalDbColumnName(){
				
					return "CONFIGUREITEMMASTER";
				
				}

				
			    public String INVENTLOCATIONID;

				public String getINVENTLOCATIONID () {
					return this.INVENTLOCATIONID;
				}

				public Boolean INVENTLOCATIONIDIsNullable(){
				    return true;
				}
				public Boolean INVENTLOCATIONIDIsKey(){
				    return false;
				}
				public Integer INVENTLOCATIONIDLength(){
				    return null;
				}
				public Integer INVENTLOCATIONIDPrecision(){
				    return null;
				}
				public String INVENTLOCATIONIDDefault(){
				
					return null;
				
				}
				public String INVENTLOCATIONIDComment(){
				
				    return "";
				
				}
				public String INVENTLOCATIONIDPattern(){
				
					return "";
				
				}
				public String INVENTLOCATIONIDOriginalDbColumnName(){
				
					return "INVENTLOCATIONID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.CONFIGUREITEMMASTER = readString(dis);
					
					this.INVENTLOCATIONID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.CONFIGUREITEMMASTER = readString(dis);
					
					this.INVENTLOCATIONID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.CONFIGUREITEMMASTER,dos);
					
					// String
				
						writeString(this.INVENTLOCATIONID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.CONFIGUREITEMMASTER,dos);
					
					// String
				
						writeString(this.INVENTLOCATIONID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",CONFIGUREITEMMASTER="+CONFIGUREITEMMASTER);
		sb.append(",INVENTLOCATIONID="+INVENTLOCATIONID);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ITEMID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEMID);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIGUREITEMMASTER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIGUREITEMMASTER);
            			}
            		
        			sb.append("|");
        		
        				if(INVENTLOCATIONID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INVENTLOCATIONID);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetProdOrders_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetProdOrders_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetProdOrders_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetProdOrders_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetProdOrders_1_row1Struct EQGetProdOrders_1_row1 = new EQGetProdOrders_1_row1Struct();
EQGetProdOrders_1_out1Struct EQGetProdOrders_1_out1 = new EQGetProdOrders_1_out1Struct();





	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetProdOrders_1_out1");
			
		int tos_count_EQGetProdOrders_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetProdOrders_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("ProdOrders")+"}]");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetProdOrders_1_tWriteJSONField_2");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetProdOrders_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetProdOrders_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetProdOrders_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetProdOrders_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetProdOrders_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetProdOrders_1_row6Struct> listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetProdOrders_1_row6Struct>();
							
	
					class ThreadXMLField_EQGetProdOrders_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetProdOrders_1_row6Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetProdOrders_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetProdOrders_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetProdOrders_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetProdOrders_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetProdOrders_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetProdOrders_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetProdOrders_1_tWriteJSONField_2_Out txf_EQGetProdOrders_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetProdOrders_1_tWriteJSONField_2_Out(listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetProdOrders_1_tWriteJSONField_2_Out = es.submit(txf_EQGetProdOrders_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetProdOrders_1_tWriteJSONField_2_Out", future_EQGetProdOrders_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetProdOrders_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetProdOrders_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetProdOrders_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetProdOrders_1_tWriteJSONField_2_Out nestXMLTool_EQGetProdOrders_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetProdOrders_1_tWriteJSONField_2_Out();

EQGetProdOrders_1_out1Struct  rowStructOutput_EQGetProdOrders_1_tWriteJSONField_2_Out = new EQGetProdOrders_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetProdOrders_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetProdOrders_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetProdOrders_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetProdOrders_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetProdOrders_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetProdOrders_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetProdOrders_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetProdOrders_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetProdOrders_1_tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetProdOrders_1_tMap_2", false);
		start_Hash.put("EQGetProdOrders_1_tMap_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetProdOrders_1_tMap_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetProdOrders_1_row1");
			
		int tos_count_EQGetProdOrders_1_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetProdOrders_1_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetProdOrders_1_tMap_2 = new StringBuilder();
                    log4jParamters_EQGetProdOrders_1_tMap_2.append("Parameters:");
                            log4jParamters_EQGetProdOrders_1_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetProdOrders_1_tMap_2.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetProdOrders_1_tMap_2.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetProdOrders_1_tMap_2.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetProdOrders_1_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tMap_2 - "  + (log4jParamters_EQGetProdOrders_1_tMap_2) );
                    } 
                } 
            new BytesLimit65535_EQGetProdOrders_1_tMap_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetProdOrders_1_tMap_2", "tMap_2", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetProdOrders_1_row1_EQGetProdOrders_1_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetProdOrders_1_out1_EQGetProdOrders_1_tMap_2 = 0;
				
EQGetProdOrders_1_out1Struct EQGetProdOrders_1_out1_tmp = new EQGetProdOrders_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetProdOrders_1_tMap_2 begin ] stop
 */



	
	/**
	 * [EQGetProdOrders_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetProdOrders_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetProdOrders_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetProdOrders_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetProdOrders_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetProdOrders_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetProdOrders\"");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT DISTINCT TOP (50) *  FROM ITG.EQGetProdOrders WHERE CONFIGUREITEMMASTER = '\"+((String)globalMap.get(\"EQGetProdOrders.configureItemMaster\")) +\"' AND INVENTLOCATIONID = '\" +((String)globalMap.get(\"EQGetProdOrders.inventLocationId\")) +\"';\"");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ITEMID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CONFIGUREITEMMASTER")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("INVENTLOCATIONID")+"}]");
                        log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetProdOrders_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetProdOrders_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetProdOrders_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetProdOrders_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetProdOrders_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetProdOrders_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetProdOrders_1_tAzureSynapseInput_1, talendToDBArray_EQGetProdOrders_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetProdOrders_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetProdOrders_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetProdOrders_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetProdOrders_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetProdOrders_1_tAzureSynapseInput_1);
				String dbUser_EQGetProdOrders_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetProdOrders_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetProdOrders_1_tAzureSynapseInput_1 = decryptedPassword_EQGetProdOrders_1_tAzureSynapseInput_1;
				
		    String port_EQGetProdOrders_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetProdOrders_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetProdOrders_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetProdOrders_1_tAzureSynapseInput_1)) {
		    	url_EQGetProdOrders_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetProdOrders_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetProdOrders_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetProdOrders_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetProdOrders_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetProdOrders_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetProdOrders_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetProdOrders_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetProdOrders_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetProdOrders_1_tAzureSynapseInput_1,dbUser_EQGetProdOrders_1_tAzureSynapseInput_1,dbPwd_EQGetProdOrders_1_tAzureSynapseInput_1);
	    		log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetProdOrders_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetProdOrders_1_tAzureSynapseInput_1 = conn_EQGetProdOrders_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetProdOrders_1_tAzureSynapseInput_1 = "SELECT DISTINCT TOP (50) *  FROM ITG.EQGetProdOrders WHERE CONFIGUREITEMMASTER = '"+((String)globalMap.get("EQGetProdOrders.configureItemMaster")) +"' AND INVENTLOCATIONID = '" +((String)globalMap.get("EQGetProdOrders.inventLocationId")) +"';";
		    
	    		log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetProdOrders_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetProdOrders_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetProdOrders_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetProdOrders_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetProdOrders_1_tAzureSynapseInput_1 = stmt_EQGetProdOrders_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetProdOrders_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetProdOrders_1_tAzureSynapseInput_1 = rs_EQGetProdOrders_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetProdOrders_1_tAzureSynapseInput_1 = rsmd_EQGetProdOrders_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetProdOrders_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetProdOrders_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetProdOrders_1_tAzureSynapseInput_1 < 1) {
								EQGetProdOrders_1_row1.ITEMID = null;
							} else {
	                         		
           		tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1 = rs_EQGetProdOrders_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetProdOrders_1_tAzureSynapseInput_1 .contains(rsmd_EQGetProdOrders_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetProdOrders_1_row1.ITEMID = FormatterUtils.formatUnwithE(tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1);
            	} else {
                	EQGetProdOrders_1_row1.ITEMID = tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetProdOrders_1_row1.ITEMID = null;
            }
		                    }
							if(colQtyInRs_EQGetProdOrders_1_tAzureSynapseInput_1 < 2) {
								EQGetProdOrders_1_row1.CONFIGUREITEMMASTER = null;
							} else {
	                         		
           		tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1 = rs_EQGetProdOrders_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetProdOrders_1_tAzureSynapseInput_1 .contains(rsmd_EQGetProdOrders_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetProdOrders_1_row1.CONFIGUREITEMMASTER = FormatterUtils.formatUnwithE(tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1);
            	} else {
                	EQGetProdOrders_1_row1.CONFIGUREITEMMASTER = tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetProdOrders_1_row1.CONFIGUREITEMMASTER = null;
            }
		                    }
							if(colQtyInRs_EQGetProdOrders_1_tAzureSynapseInput_1 < 3) {
								EQGetProdOrders_1_row1.INVENTLOCATIONID = null;
							} else {
	                         		
           		tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1 = rs_EQGetProdOrders_1_tAzureSynapseInput_1.getString(3);
            if(tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetProdOrders_1_tAzureSynapseInput_1 .contains(rsmd_EQGetProdOrders_1_tAzureSynapseInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetProdOrders_1_row1.INVENTLOCATIONID = FormatterUtils.formatUnwithE(tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1);
            	} else {
                	EQGetProdOrders_1_row1.INVENTLOCATIONID = tmpContent_EQGetProdOrders_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetProdOrders_1_row1.INVENTLOCATIONID = null;
            }
		                    }
					
						log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetProdOrders_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetProdOrders_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetProdOrders_1_tAzureSynapseInput_1++;

/**
 * [EQGetProdOrders_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetProdOrders_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tMap_2 main ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tMap_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetProdOrders_1_row1","EQGetProdOrders_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetProdOrders_1_tMap_2","tMap_2","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetProdOrders_1_row1 - " + (EQGetProdOrders_1_row1==null? "": EQGetProdOrders_1_row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetProdOrders_1_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetProdOrders_1_tMap_2 = false;
		boolean mainRowRejected_EQGetProdOrders_1_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetProdOrders_1_out1 = null;


// # Output table : 'EQGetProdOrders_1_out1'
count_EQGetProdOrders_1_out1_EQGetProdOrders_1_tMap_2++;

EQGetProdOrders_1_out1_tmp.ProdOrders = "X";
EQGetProdOrders_1_out1_tmp.ITEMID = EQGetProdOrders_1_row1.ITEMID ;
EQGetProdOrders_1_out1 = EQGetProdOrders_1_out1_tmp;
log.debug("EQGetProdOrders_1_tMap_2 - Outputting the record " + count_EQGetProdOrders_1_out1_EQGetProdOrders_1_tMap_2 + " of the output table 'EQGetProdOrders_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetProdOrders_1_tMap_2 = false;










 


	tos_count_EQGetProdOrders_1_tMap_2++;

/**
 * [EQGetProdOrders_1_tMap_2 main ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tMap_2";
	
	

 



/**
 * [EQGetProdOrders_1_tMap_2 process_data_begin ] stop
 */
// Start of branch "EQGetProdOrders_1_out1"
if(EQGetProdOrders_1_out1 != null) { 



	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetProdOrders_1_out1","EQGetProdOrders_1_tMap_2","tMap_2","tMap","EQGetProdOrders_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetProdOrders_1_out1 - " + (EQGetProdOrders_1_out1==null? "": EQGetProdOrders_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetProdOrders_1_tWriteJSONField_2_Out++;
				log.debug("EQGetProdOrders_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetProdOrders_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetProdOrders_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetProdOrders_1_tWriteJSONField_2_Out helper_EQGetProdOrders_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetProdOrders_1_tWriteJSONField_2_Out();

	valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.put("ProdOrders", helper_EQGetProdOrders_1_tWriteJSONField_2_Out.toString(
	(
		EQGetProdOrders_1_out1.ProdOrders != null?
            EQGetProdOrders_1_out1.ProdOrders.toString():null
		)));
	arraysValueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.put("ProdOrders", helper_EQGetProdOrders_1_tWriteJSONField_2_Out.toString(
	(
		EQGetProdOrders_1_out1.ProdOrders != null?
            EQGetProdOrders_1_out1.ProdOrders.toString():null
		)));
	valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.put("ITEMID", helper_EQGetProdOrders_1_tWriteJSONField_2_Out.toString(
	(
		EQGetProdOrders_1_out1.ITEMID != null?
            EQGetProdOrders_1_out1.ITEMID.toString():null
		)));
	arraysValueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.put("ITEMID", helper_EQGetProdOrders_1_tWriteJSONField_2_Out.toString(
	(
		EQGetProdOrders_1_out1.ITEMID != null?
            EQGetProdOrders_1_out1.ITEMID.toString():null
		)));
		String strTemp_EQGetProdOrders_1_tWriteJSONField_2_Out = "";		strTemp_EQGetProdOrders_1_tWriteJSONField_2_Out = strTemp_EQGetProdOrders_1_tWriteJSONField_2_Out + valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.get("ProdOrders")
							+ valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.get("ProdOrders").length();
	if(strCompCache_EQGetProdOrders_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetProdOrders_1_tWriteJSONField_2_Out=strTemp_EQGetProdOrders_1_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetProdOrders_1_tWriteJSONField_2_Out.equals(strTemp_EQGetProdOrders_1_tWriteJSONField_2_Out)){	  
    		nestXMLTool_EQGetProdOrders_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetProdOrders_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetProdOrders_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetProdOrders_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetProdOrders_1_tWriteJSONField_2_Out, format_EQGetProdOrders_1_tWriteJSONField_2_Out);
			output_EQGetProdOrders_1_tWriteJSONField_2_Out.write(doc_EQGetProdOrders_1_tWriteJSONField_2_Out);
		    output_EQGetProdOrders_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetProdOrders_1_row6Struct row_EQGetProdOrders_1_tWriteJSONField_2_Out = new EQGetProdOrders_1_row6Struct();
						  
					     		row_EQGetProdOrders_1_tWriteJSONField_2_Out.body = strWriter_EQGetProdOrders_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out.add(row_EQGetProdOrders_1_tWriteJSONField_2_Out);
					
		    doc_EQGetProdOrders_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetProdOrders_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetProdOrders_1_tWriteJSONField_2_Out=0;i_EQGetProdOrders_1_tWriteJSONField_2_Out<orders_EQGetProdOrders_1_tWriteJSONField_2_Out.length;i_EQGetProdOrders_1_tWriteJSONField_2_Out++){
				orders_EQGetProdOrders_1_tWriteJSONField_2_Out[i_EQGetProdOrders_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetProdOrders_1_tWriteJSONField_2_Out != null && groupbyList_EQGetProdOrders_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetProdOrders_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetProdOrders_1_tWriteJSONField_2_Out=strTemp_EQGetProdOrders_1_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetProdOrders_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetProdOrders_1_tWriteJSONField_2_Out) {
		needRoot_EQGetProdOrders_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetProdOrders_1_tWriteJSONField_2_Out = doc_EQGetProdOrders_1_tWriteJSONField_2_Out.addElement("ProdOrders");
		subTreeRootParent_EQGetProdOrders_1_tWriteJSONField_2_Out = root_EQGetProdOrders_1_tWriteJSONField_2_Out;
		root4Group_EQGetProdOrders_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetProdOrders_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetProdOrders_1_tWriteJSONField_2_Out=root4Group_EQGetProdOrders_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetProdOrders_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("ProdOrders");
        if(orders_EQGetProdOrders_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetProdOrders_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetProdOrders_1_tWriteJSONField_2_Out.length){
        		orders_EQGetProdOrders_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetProdOrders_1_tWriteJSONField_2_Out.elements().add(orders_EQGetProdOrders_1_tWriteJSONField_2_Out[0]++,loop_EQGetProdOrders_1_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_EQGetProdOrders_1_tWriteJSONField_2_Out = loop_EQGetProdOrders_1_tWriteJSONField_2_Out.addElement("ITEMID");
		if(
		valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.get("ITEMID")!=null){
			nestXMLTool_EQGetProdOrders_1_tWriteJSONField_2_Out .setText(loop_0_EQGetProdOrders_1_tWriteJSONField_2_Out,
		valueMap_EQGetProdOrders_1_tWriteJSONField_2_Out.get("ITEMID"));
		}

 


	tos_count_EQGetProdOrders_1_tWriteJSONField_2_Out++;

/**
 * [EQGetProdOrders_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "EQGetProdOrders_1_out1"




	
	/**
	 * [EQGetProdOrders_1_tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tMap_2";
	
	

 



/**
 * [EQGetProdOrders_1_tMap_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetProdOrders_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetProdOrders_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetProdOrders_1_tAzureSynapseInput_1 != null) {
		rs_EQGetProdOrders_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetProdOrders_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetProdOrders_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetProdOrders_1_tAzureSynapseInput_1 != null && !conn_EQGetProdOrders_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetProdOrders_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetProdOrders_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetProdOrders_1_tAzureSynapseInput_1);
	    		log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetProdOrders_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetProdOrders_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetProdOrders_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetProdOrders_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tMap_2 end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetProdOrders_1_tMap_2 - Written records count in the table 'EQGetProdOrders_1_out1': " + count_EQGetProdOrders_1_out1_EQGetProdOrders_1_tMap_2 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetProdOrders_1_row1",2,0,
			 			"EQGetProdOrders_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetProdOrders_1_tMap_2","tMap_2","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tMap_2 - "  + ("Done.") );

ok_Hash.put("EQGetProdOrders_1_tMap_2", true);
end_Hash.put("EQGetProdOrders_1_tMap_2", System.currentTimeMillis());




/**
 * [EQGetProdOrders_1_tMap_2 end ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetProdOrders_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetProdOrders_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetProdOrders_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetProdOrders_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetProdOrders_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetProdOrders_1_tWriteJSONField_2_Out, format_EQGetProdOrders_1_tWriteJSONField_2_Out);
	output_EQGetProdOrders_1_tWriteJSONField_2_Out.write(doc_EQGetProdOrders_1_tWriteJSONField_2_Out);
    output_EQGetProdOrders_1_tWriteJSONField_2_Out.close();
					EQGetProdOrders_1_row6Struct row_EQGetProdOrders_1_tWriteJSONField_2_Out = new EQGetProdOrders_1_row6Struct();
						  
					     		row_EQGetProdOrders_1_tWriteJSONField_2_Out.body = strWriter_EQGetProdOrders_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out.add(row_EQGetProdOrders_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetProdOrders_1_tWriteJSONField_2_Out);
globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetProdOrders_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetProdOrders_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetProdOrders_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetProdOrders_1_out1",2,0,
			 			"EQGetProdOrders_1_tMap_2","tMap_2","tMap","EQGetProdOrders_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetProdOrders_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetProdOrders_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tMap_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tMap_2";
	
	

 



/**
 * [EQGetProdOrders_1_tMap_2 finally ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetProdOrders_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetProdOrders_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetProdOrders_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetProdOrders_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetProdOrders_1_tWriteJSONField_2_Out");
	if (future_EQGetProdOrders_1_tWriteJSONField_2_Out != null) {
		future_EQGetProdOrders_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetProdOrders_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetRRVendorNo_1_row1Struct implements routines.system.IPersistableRow<EQGetRRVendorNo_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String Part;

				public String getPart () {
					return this.Part;
				}

				public Boolean PartIsNullable(){
				    return true;
				}
				public Boolean PartIsKey(){
				    return false;
				}
				public Integer PartLength(){
				    return null;
				}
				public Integer PartPrecision(){
				    return null;
				}
				public String PartDefault(){
				
					return null;
				
				}
				public String PartComment(){
				
				    return "";
				
				}
				public String PartPattern(){
				
					return "";
				
				}
				public String PartOriginalDbColumnName(){
				
					return "Part";
				
				}

				
			    public String Site;

				public String getSite () {
					return this.Site;
				}

				public Boolean SiteIsNullable(){
				    return true;
				}
				public Boolean SiteIsKey(){
				    return false;
				}
				public Integer SiteLength(){
				    return null;
				}
				public Integer SitePrecision(){
				    return null;
				}
				public String SiteDefault(){
				
					return null;
				
				}
				public String SiteComment(){
				
				    return "";
				
				}
				public String SitePattern(){
				
					return "";
				
				}
				public String SiteOriginalDbColumnName(){
				
					return "Site";
				
				}

				
			    public String Supplier_ID;

				public String getSupplier_ID () {
					return this.Supplier_ID;
				}

				public Boolean Supplier_IDIsNullable(){
				    return true;
				}
				public Boolean Supplier_IDIsKey(){
				    return false;
				}
				public Integer Supplier_IDLength(){
				    return null;
				}
				public Integer Supplier_IDPrecision(){
				    return null;
				}
				public String Supplier_IDDefault(){
				
					return null;
				
				}
				public String Supplier_IDComment(){
				
				    return "";
				
				}
				public String Supplier_IDPattern(){
				
					return "";
				
				}
				public String Supplier_IDOriginalDbColumnName(){
				
					return "Supplier ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Part = readString(dis);
					
					this.Site = readString(dis);
					
					this.Supplier_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Part = readString(dis);
					
					this.Site = readString(dis);
					
					this.Supplier_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Part,dos);
					
					// String
				
						writeString(this.Site,dos);
					
					// String
				
						writeString(this.Supplier_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Part,dos);
					
					// String
				
						writeString(this.Site,dos);
					
					// String
				
						writeString(this.Supplier_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Part="+Part);
		sb.append(",Site="+Site);
		sb.append(",Supplier_ID="+Supplier_ID);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Part == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Part);
            			}
            		
        			sb.append("|");
        		
        				if(Site == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Site);
            			}
            		
        			sb.append("|");
        		
        				if(Supplier_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Supplier_ID);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetRRVendorNo_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetRRVendorNo_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetRRVendorNo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetRRVendorNo_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetRRVendorNo_1_row1Struct EQGetRRVendorNo_1_row1 = new EQGetRRVendorNo_1_row1Struct();




	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetRRVendorNo_1_row1");
			
		int tos_count_EQGetRRVendorNo_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetRRVendorNo_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetRRVendorNo_1_tWriteJSONField_1");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetRRVendorNo_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetRRVendorNo_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetRRVendorNo_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetRRVendorNo_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetRRVendorNo_1_row5Struct> listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetRRVendorNo_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetRRVendorNo_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetRRVendorNo_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetRRVendorNo_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetRRVendorNo_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetRRVendorNo_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetRRVendorNo_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetRRVendorNo_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetRRVendorNo_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetRRVendorNo_1_tWriteJSONField_1_Out txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetRRVendorNo_1_tWriteJSONField_1_Out(listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetRRVendorNo_1_tWriteJSONField_1_Out = es.submit(txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetRRVendorNo_1_tWriteJSONField_1_Out", future_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetRRVendorNo_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetRRVendorNo_1_tWriteJSONField_1_Out nestXMLTool_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetRRVendorNo_1_tWriteJSONField_1_Out();

EQGetRRVendorNo_1_row1Struct  rowStructOutput_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new EQGetRRVendorNo_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetRRVendorNo_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetRRVendorNo_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetRRVendorNo_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetRRVendorNo_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetRRVendorNo_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetRRVendorNo_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetRRVendorNo_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetRRVendorNo_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetRRVendorNo_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetRRVendorNo_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetRRVendorNo_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetRRVendorNo\"");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetRRVendorNo WHERE Site = '\"+((String)globalMap.get(\"EQGetRRVendorNo.site\"))+\"' AND Part = '\" +((String)globalMap.get(\"EQGetRRVendorNo.part\"))+ \"';\"");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("Part")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("Site")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("Supplier_ID")+"}]");
                        log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetRRVendorNo_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetRRVendorNo_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetRRVendorNo_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetRRVendorNo_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetRRVendorNo_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetRRVendorNo_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetRRVendorNo_1_tAzureSynapseInput_1, talendToDBArray_EQGetRRVendorNo_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetRRVendorNo_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetRRVendorNo_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetRRVendorNo_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetRRVendorNo_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetRRVendorNo_1_tAzureSynapseInput_1);
				String dbUser_EQGetRRVendorNo_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetRRVendorNo_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetRRVendorNo_1_tAzureSynapseInput_1 = decryptedPassword_EQGetRRVendorNo_1_tAzureSynapseInput_1;
				
		    String port_EQGetRRVendorNo_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetRRVendorNo_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetRRVendorNo_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetRRVendorNo_1_tAzureSynapseInput_1)) {
		    	url_EQGetRRVendorNo_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetRRVendorNo_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetRRVendorNo_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetRRVendorNo_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetRRVendorNo_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetRRVendorNo_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetRRVendorNo_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetRRVendorNo_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetRRVendorNo_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetRRVendorNo_1_tAzureSynapseInput_1,dbUser_EQGetRRVendorNo_1_tAzureSynapseInput_1,dbPwd_EQGetRRVendorNo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetRRVendorNo_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetRRVendorNo_1_tAzureSynapseInput_1 = conn_EQGetRRVendorNo_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetRRVendorNo_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetRRVendorNo WHERE Site = '"+((String)globalMap.get("EQGetRRVendorNo.site"))+"' AND Part = '" +((String)globalMap.get("EQGetRRVendorNo.part"))+ "';";
		    
	    		log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetRRVendorNo_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetRRVendorNo_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetRRVendorNo_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetRRVendorNo_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetRRVendorNo_1_tAzureSynapseInput_1 = stmt_EQGetRRVendorNo_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetRRVendorNo_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetRRVendorNo_1_tAzureSynapseInput_1 = rs_EQGetRRVendorNo_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetRRVendorNo_1_tAzureSynapseInput_1 = rsmd_EQGetRRVendorNo_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetRRVendorNo_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetRRVendorNo_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetRRVendorNo_1_tAzureSynapseInput_1 < 1) {
								EQGetRRVendorNo_1_row1.Part = null;
							} else {
	                         		
           		tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1 = rs_EQGetRRVendorNo_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetRRVendorNo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetRRVendorNo_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetRRVendorNo_1_row1.Part = FormatterUtils.formatUnwithE(tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetRRVendorNo_1_row1.Part = tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetRRVendorNo_1_row1.Part = null;
            }
		                    }
							if(colQtyInRs_EQGetRRVendorNo_1_tAzureSynapseInput_1 < 2) {
								EQGetRRVendorNo_1_row1.Site = null;
							} else {
	                         		
           		tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1 = rs_EQGetRRVendorNo_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetRRVendorNo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetRRVendorNo_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetRRVendorNo_1_row1.Site = FormatterUtils.formatUnwithE(tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetRRVendorNo_1_row1.Site = tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetRRVendorNo_1_row1.Site = null;
            }
		                    }
							if(colQtyInRs_EQGetRRVendorNo_1_tAzureSynapseInput_1 < 3) {
								EQGetRRVendorNo_1_row1.Supplier_ID = null;
							} else {
	                         		
           		tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1 = rs_EQGetRRVendorNo_1_tAzureSynapseInput_1.getString(3);
            if(tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetRRVendorNo_1_tAzureSynapseInput_1 .contains(rsmd_EQGetRRVendorNo_1_tAzureSynapseInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetRRVendorNo_1_row1.Supplier_ID = FormatterUtils.formatUnwithE(tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1);
            	} else {
                	EQGetRRVendorNo_1_row1.Supplier_ID = tmpContent_EQGetRRVendorNo_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetRRVendorNo_1_row1.Supplier_ID = null;
            }
		                    }
					
						log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetRRVendorNo_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetRRVendorNo_1_tAzureSynapseInput_1++;

/**
 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetRRVendorNo_1_row1","EQGetRRVendorNo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetRRVendorNo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetRRVendorNo_1_row1 - " + (EQGetRRVendorNo_1_row1==null? "": EQGetRRVendorNo_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_Out++;
				log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetRRVendorNo_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetRRVendorNo_1_tWriteJSONField_1_Out helper_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetRRVendorNo_1_tWriteJSONField_1_Out();

	valueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.put("Part", helper_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetRRVendorNo_1_row1.Part != null?
            EQGetRRVendorNo_1_row1.Part.toString():null
		)));
	arraysValueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.put("Part", helper_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetRRVendorNo_1_row1.Part != null?
            EQGetRRVendorNo_1_row1.Part.toString():null
		)));
	valueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.put("Site", helper_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetRRVendorNo_1_row1.Site != null?
            EQGetRRVendorNo_1_row1.Site.toString():null
		)));
	arraysValueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.put("Site", helper_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetRRVendorNo_1_row1.Site != null?
            EQGetRRVendorNo_1_row1.Site.toString():null
		)));
	valueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.put("Supplier_ID", helper_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetRRVendorNo_1_row1.Supplier_ID != null?
            EQGetRRVendorNo_1_row1.Supplier_ID.toString():null
		)));
	arraysValueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.put("Supplier_ID", helper_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString(
	(
		EQGetRRVendorNo_1_row1.Supplier_ID != null?
            EQGetRRVendorNo_1_row1.Supplier_ID.toString():null
		)));
		String strTemp_EQGetRRVendorNo_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetRRVendorNo_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetRRVendorNo_1_tWriteJSONField_1_Out=strTemp_EQGetRRVendorNo_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetRRVendorNo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetRRVendorNo_1_tWriteJSONField_1_Out, format_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
			output_EQGetRRVendorNo_1_tWriteJSONField_1_Out.write(doc_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
		    output_EQGetRRVendorNo_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetRRVendorNo_1_row5Struct row_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new EQGetRRVendorNo_1_row5Struct();
						  
					     		row_EQGetRRVendorNo_1_tWriteJSONField_1_Out.body = strWriter_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out.add(row_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
					
		    doc_EQGetRRVendorNo_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetRRVendorNo_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetRRVendorNo_1_tWriteJSONField_1_Out=0;i_EQGetRRVendorNo_1_tWriteJSONField_1_Out<orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out.length;i_EQGetRRVendorNo_1_tWriteJSONField_1_Out++){
				orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out[i_EQGetRRVendorNo_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetRRVendorNo_1_tWriteJSONField_1_Out != null && groupbyList_EQGetRRVendorNo_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetRRVendorNo_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetRRVendorNo_1_tWriteJSONField_1_Out=strTemp_EQGetRRVendorNo_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetRRVendorNo_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetRRVendorNo_1_tWriteJSONField_1_Out) {
		needRoot_EQGetRRVendorNo_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetRRVendorNo_1_tWriteJSONField_1_Out = doc_EQGetRRVendorNo_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetRRVendorNo_1_tWriteJSONField_1_Out = root_EQGetRRVendorNo_1_tWriteJSONField_1_Out;
		root4Group_EQGetRRVendorNo_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetRRVendorNo_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetRRVendorNo_1_tWriteJSONField_1_Out=root4Group_EQGetRRVendorNo_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetRRVendorNo_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("Supplier_ID");
        if(orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out.length){
        		orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetRRVendorNo_1_tWriteJSONField_1_Out.elements().add(orders_EQGetRRVendorNo_1_tWriteJSONField_1_Out[0]++,loop_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.get("Supplier_ID")!=null){
			nestXMLTool_EQGetRRVendorNo_1_tWriteJSONField_1_Out .setText(loop_EQGetRRVendorNo_1_tWriteJSONField_1_Out,
		valueMap_EQGetRRVendorNo_1_tWriteJSONField_1_Out.get("Supplier_ID"));
		}

 


	tos_count_EQGetRRVendorNo_1_tWriteJSONField_1_Out++;

/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetRRVendorNo_1_tAzureSynapseInput_1 != null) {
		rs_EQGetRRVendorNo_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetRRVendorNo_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetRRVendorNo_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetRRVendorNo_1_tAzureSynapseInput_1 != null && !conn_EQGetRRVendorNo_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetRRVendorNo_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetRRVendorNo_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetRRVendorNo_1_tAzureSynapseInput_1);
	    		log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetRRVendorNo_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetRRVendorNo_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetRRVendorNo_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetRRVendorNo_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetRRVendorNo_1_tWriteJSONField_1_Out, format_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
	output_EQGetRRVendorNo_1_tWriteJSONField_1_Out.write(doc_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
    output_EQGetRRVendorNo_1_tWriteJSONField_1_Out.close();
					EQGetRRVendorNo_1_row5Struct row_EQGetRRVendorNo_1_tWriteJSONField_1_Out = new EQGetRRVendorNo_1_row5Struct();
						  
					     		row_EQGetRRVendorNo_1_tWriteJSONField_1_Out.body = strWriter_EQGetRRVendorNo_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out.add(row_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_Out);
globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetRRVendorNo_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetRRVendorNo_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetRRVendorNo_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetRRVendorNo_1_row1",2,0,
			 			"EQGetRRVendorNo_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetRRVendorNo_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetRRVendorNo_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetRRVendorNo_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetRRVendorNo_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetRRVendorNo_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetRRVendorNo_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetRRVendorNo_1_tWriteJSONField_1_Out");
	if (future_EQGetRRVendorNo_1_tWriteJSONField_1_Out != null) {
		future_EQGetRRVendorNo_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetRRVendorNo_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetSecondaryPriceGroup_1_out1Struct implements routines.system.IPersistableRow<EQGetSecondaryPriceGroup_1_out1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String SecondaryPriceGroup;

				public String getSecondaryPriceGroup () {
					return this.SecondaryPriceGroup;
				}

				public Boolean SecondaryPriceGroupIsNullable(){
				    return true;
				}
				public Boolean SecondaryPriceGroupIsKey(){
				    return false;
				}
				public Integer SecondaryPriceGroupLength(){
				    return null;
				}
				public Integer SecondaryPriceGroupPrecision(){
				    return null;
				}
				public String SecondaryPriceGroupDefault(){
				
					return null;
				
				}
				public String SecondaryPriceGroupComment(){
				
				    return "";
				
				}
				public String SecondaryPriceGroupPattern(){
				
					return "";
				
				}
				public String SecondaryPriceGroupOriginalDbColumnName(){
				
					return "SecondaryPriceGroup";
				
				}

				
			    public String ACCOUNTNUM;

				public String getACCOUNTNUM () {
					return this.ACCOUNTNUM;
				}

				public Boolean ACCOUNTNUMIsNullable(){
				    return true;
				}
				public Boolean ACCOUNTNUMIsKey(){
				    return false;
				}
				public Integer ACCOUNTNUMLength(){
				    return null;
				}
				public Integer ACCOUNTNUMPrecision(){
				    return null;
				}
				public String ACCOUNTNUMDefault(){
				
					return null;
				
				}
				public String ACCOUNTNUMComment(){
				
				    return "";
				
				}
				public String ACCOUNTNUMPattern(){
				
					return "";
				
				}
				public String ACCOUNTNUMOriginalDbColumnName(){
				
					return "ACCOUNTNUM";
				
				}

				
			    public String LCISECONDARYPRICEGROUP;

				public String getLCISECONDARYPRICEGROUP () {
					return this.LCISECONDARYPRICEGROUP;
				}

				public Boolean LCISECONDARYPRICEGROUPIsNullable(){
				    return true;
				}
				public Boolean LCISECONDARYPRICEGROUPIsKey(){
				    return false;
				}
				public Integer LCISECONDARYPRICEGROUPLength(){
				    return null;
				}
				public Integer LCISECONDARYPRICEGROUPPrecision(){
				    return null;
				}
				public String LCISECONDARYPRICEGROUPDefault(){
				
					return null;
				
				}
				public String LCISECONDARYPRICEGROUPComment(){
				
				    return "";
				
				}
				public String LCISECONDARYPRICEGROUPPattern(){
				
					return "";
				
				}
				public String LCISECONDARYPRICEGROUPOriginalDbColumnName(){
				
					return "LCISECONDARYPRICEGROUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.SecondaryPriceGroup = readString(dis);
					
					this.ACCOUNTNUM = readString(dis);
					
					this.LCISECONDARYPRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.SecondaryPriceGroup = readString(dis);
					
					this.ACCOUNTNUM = readString(dis);
					
					this.LCISECONDARYPRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SecondaryPriceGroup,dos);
					
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.LCISECONDARYPRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SecondaryPriceGroup,dos);
					
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.LCISECONDARYPRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SecondaryPriceGroup="+SecondaryPriceGroup);
		sb.append(",ACCOUNTNUM="+ACCOUNTNUM);
		sb.append(",LCISECONDARYPRICEGROUP="+LCISECONDARYPRICEGROUP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SecondaryPriceGroup == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SecondaryPriceGroup);
            			}
            		
        			sb.append("|");
        		
        				if(ACCOUNTNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACCOUNTNUM);
            			}
            		
        			sb.append("|");
        		
        				if(LCISECONDARYPRICEGROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LCISECONDARYPRICEGROUP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSecondaryPriceGroup_1_out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetSecondaryPriceGroup_1_row2Struct implements routines.system.IPersistableRow<EQGetSecondaryPriceGroup_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ACCOUNTNUM;

				public String getACCOUNTNUM () {
					return this.ACCOUNTNUM;
				}

				public Boolean ACCOUNTNUMIsNullable(){
				    return true;
				}
				public Boolean ACCOUNTNUMIsKey(){
				    return false;
				}
				public Integer ACCOUNTNUMLength(){
				    return null;
				}
				public Integer ACCOUNTNUMPrecision(){
				    return null;
				}
				public String ACCOUNTNUMDefault(){
				
					return null;
				
				}
				public String ACCOUNTNUMComment(){
				
				    return "";
				
				}
				public String ACCOUNTNUMPattern(){
				
					return "";
				
				}
				public String ACCOUNTNUMOriginalDbColumnName(){
				
					return "ACCOUNTNUM";
				
				}

				
			    public String LCISECONDARYPRICEGROUP;

				public String getLCISECONDARYPRICEGROUP () {
					return this.LCISECONDARYPRICEGROUP;
				}

				public Boolean LCISECONDARYPRICEGROUPIsNullable(){
				    return true;
				}
				public Boolean LCISECONDARYPRICEGROUPIsKey(){
				    return false;
				}
				public Integer LCISECONDARYPRICEGROUPLength(){
				    return null;
				}
				public Integer LCISECONDARYPRICEGROUPPrecision(){
				    return null;
				}
				public String LCISECONDARYPRICEGROUPDefault(){
				
					return null;
				
				}
				public String LCISECONDARYPRICEGROUPComment(){
				
				    return "";
				
				}
				public String LCISECONDARYPRICEGROUPPattern(){
				
					return "";
				
				}
				public String LCISECONDARYPRICEGROUPOriginalDbColumnName(){
				
					return "LCISECONDARYPRICEGROUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ACCOUNTNUM = readString(dis);
					
					this.LCISECONDARYPRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ACCOUNTNUM = readString(dis);
					
					this.LCISECONDARYPRICEGROUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.LCISECONDARYPRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ACCOUNTNUM,dos);
					
					// String
				
						writeString(this.LCISECONDARYPRICEGROUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ACCOUNTNUM="+ACCOUNTNUM);
		sb.append(",LCISECONDARYPRICEGROUP="+LCISECONDARYPRICEGROUP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ACCOUNTNUM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACCOUNTNUM);
            			}
            		
        			sb.append("|");
        		
        				if(LCISECONDARYPRICEGROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LCISECONDARYPRICEGROUP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSecondaryPriceGroup_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetSecondaryPriceGroup_1_row2Struct EQGetSecondaryPriceGroup_1_row2 = new EQGetSecondaryPriceGroup_1_row2Struct();
EQGetSecondaryPriceGroup_1_out1Struct EQGetSecondaryPriceGroup_1_out1 = new EQGetSecondaryPriceGroup_1_out1Struct();





	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSecondaryPriceGroup_1_out1");
			
		int tos_count_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("SecondaryPriceGroup")+"}]");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetSecondaryPriceGroup_1_tWriteJSONField_2");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetSecondaryPriceGroup_1_row3Struct> listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetSecondaryPriceGroup_1_row3Struct>();
							
	
					class ThreadXMLField_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetSecondaryPriceGroup_1_row3Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetSecondaryPriceGroup_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out(listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = es.submit(txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out", future_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out nestXMLTool_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out();

EQGetSecondaryPriceGroup_1_out1Struct  rowStructOutput_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new EQGetSecondaryPriceGroup_1_out1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetSecondaryPriceGroup_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSecondaryPriceGroup_1_tMap_1", false);
		start_Hash.put("EQGetSecondaryPriceGroup_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetSecondaryPriceGroup_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSecondaryPriceGroup_1_row2");
			
		int tos_count_EQGetSecondaryPriceGroup_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSecondaryPriceGroup_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tMap_1 - "  + (log4jParamters_EQGetSecondaryPriceGroup_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetSecondaryPriceGroup_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSecondaryPriceGroup_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetSecondaryPriceGroup_1_row2_EQGetSecondaryPriceGroup_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetSecondaryPriceGroup_1_out1_EQGetSecondaryPriceGroup_1_tMap_1 = 0;
				
EQGetSecondaryPriceGroup_1_out1Struct EQGetSecondaryPriceGroup_1_out1_tmp = new EQGetSecondaryPriceGroup_1_out1Struct();
// ###############################

        
        



        









 



/**
 * [EQGetSecondaryPriceGroup_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2", false);
		start_Hash.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2";
	
	
		int tos_count_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = new StringBuilder();
                    log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("Parameters:");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("TABLE" + " = " + "\"EQGetSecondaryPriceGroup\"");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetSecondaryPriceGroup WHERE ACCOUNTNUM = '\"+((String)globalMap.get(\"EQGetSecondaryPriceGroup.accountNum\")) +\"';\"");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ACCOUNTNUM")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("LCISECONDARYPRICEGROUP")+"}]");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - "  + (log4jParamters_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2) );
                    } 
                } 
            new BytesLimit65535_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2", "tAzureSynapseInput_2", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2, talendToDBArray_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2); 
		    int nb_line_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = 0;
		    java.sql.Connection conn_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = null;
				String driverClass_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = java.lang.Class.forName(driverClass_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2);
				String dbUser_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = decryptedPassword_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2;
				
		    String port_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = "1433";
		    String dbname_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = context.Azure_DW_DB ;		    
		    String url_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2)) {
		    	url_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2)) {		    
		    	url_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Driver ClassName: "+driverClass_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2+".");
			
	    		log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Connection attempt to '" + url_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 + "' with the username '" + dbUser_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 + "'.");
			
				conn_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = java.sql.DriverManager.getConnection(url_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2,dbUser_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2,dbPwd_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2);
	    		log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Connection to '" + url_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = conn_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.createStatement();

		    String dbquery_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = "SELECT * FROM ITG.EQGetSecondaryPriceGroup WHERE ACCOUNTNUM = '"+((String)globalMap.get("EQGetSecondaryPriceGroup.accountNum")) +"';";
		    
	    		log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Executing the query: '" + dbquery_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 + "'.");
			

            	globalMap.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_QUERY",dbquery_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2);
		    java.sql.ResultSet rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = null;

		    try {
		    	rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = stmt_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.executeQuery(dbquery_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2);
		    	java.sql.ResultSetMetaData rsmd_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.getMetaData();
		    	int colQtyInRs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = rsmd_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.getColumnCount();

		    String tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = null;
		    
		    
		    	log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Retrieving records from the database.");
		    
		    while (rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.next()) {
		        nb_line_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2++;
		        
							if(colQtyInRs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 < 1) {
								EQGetSecondaryPriceGroup_1_row2.ACCOUNTNUM = null;
							} else {
	                         		
           		tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.getString(1);
            if(tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 .contains(rsmd_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetSecondaryPriceGroup_1_row2.ACCOUNTNUM = FormatterUtils.formatUnwithE(tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2);
            	} else {
                	EQGetSecondaryPriceGroup_1_row2.ACCOUNTNUM = tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetSecondaryPriceGroup_1_row2.ACCOUNTNUM = null;
            }
		                    }
							if(colQtyInRs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 < 2) {
								EQGetSecondaryPriceGroup_1_row2.LCISECONDARYPRICEGROUP = null;
							} else {
	                         		
           		tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 = rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.getString(2);
            if(tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 .contains(rsmd_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetSecondaryPriceGroup_1_row2.LCISECONDARYPRICEGROUP = FormatterUtils.formatUnwithE(tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2);
            	} else {
                	EQGetSecondaryPriceGroup_1_row2.LCISECONDARYPRICEGROUP = tmpContent_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetSecondaryPriceGroup_1_row2.LCISECONDARYPRICEGROUP = null;
            }
		                    }
					
						log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Retrieving the record " + nb_line_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 + ".");
					





 



/**
 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 begin ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 main ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2";
	
	

 


	tos_count_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2++;

/**
 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 main ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 process_data_begin ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSecondaryPriceGroup_1_row2","EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetSecondaryPriceGroup_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSecondaryPriceGroup_1_row2 - " + (EQGetSecondaryPriceGroup_1_row2==null? "": EQGetSecondaryPriceGroup_1_row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetSecondaryPriceGroup_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetSecondaryPriceGroup_1_tMap_1 = false;
		boolean mainRowRejected_EQGetSecondaryPriceGroup_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetSecondaryPriceGroup_1_out1 = null;


// # Output table : 'EQGetSecondaryPriceGroup_1_out1'
count_EQGetSecondaryPriceGroup_1_out1_EQGetSecondaryPriceGroup_1_tMap_1++;

EQGetSecondaryPriceGroup_1_out1_tmp.SecondaryPriceGroup = "X";
EQGetSecondaryPriceGroup_1_out1_tmp.ACCOUNTNUM = EQGetSecondaryPriceGroup_1_row2.ACCOUNTNUM ;
EQGetSecondaryPriceGroup_1_out1_tmp.LCISECONDARYPRICEGROUP = EQGetSecondaryPriceGroup_1_row2.LCISECONDARYPRICEGROUP ;
EQGetSecondaryPriceGroup_1_out1 = EQGetSecondaryPriceGroup_1_out1_tmp;
log.debug("EQGetSecondaryPriceGroup_1_tMap_1 - Outputting the record " + count_EQGetSecondaryPriceGroup_1_out1_EQGetSecondaryPriceGroup_1_tMap_1 + " of the output table 'EQGetSecondaryPriceGroup_1_out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetSecondaryPriceGroup_1_tMap_1 = false;










 


	tos_count_EQGetSecondaryPriceGroup_1_tMap_1++;

/**
 * [EQGetSecondaryPriceGroup_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tMap_1";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetSecondaryPriceGroup_1_out1"
if(EQGetSecondaryPriceGroup_1_out1 != null) { 



	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSecondaryPriceGroup_1_out1","EQGetSecondaryPriceGroup_1_tMap_1","tMap_1","tMap","EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSecondaryPriceGroup_1_out1 - " + (EQGetSecondaryPriceGroup_1_out1==null? "": EQGetSecondaryPriceGroup_1_out1.toLogString()));
    			}
    		

	if(txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out++;
				log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out helper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out();

	valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.put("SecondaryPriceGroup", helper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSecondaryPriceGroup_1_out1.SecondaryPriceGroup != null?
            EQGetSecondaryPriceGroup_1_out1.SecondaryPriceGroup.toString():null
		)));
	arraysValueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.put("SecondaryPriceGroup", helper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSecondaryPriceGroup_1_out1.SecondaryPriceGroup != null?
            EQGetSecondaryPriceGroup_1_out1.SecondaryPriceGroup.toString():null
		)));
	valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.put("ACCOUNTNUM", helper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSecondaryPriceGroup_1_out1.ACCOUNTNUM != null?
            EQGetSecondaryPriceGroup_1_out1.ACCOUNTNUM.toString():null
		)));
	arraysValueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.put("ACCOUNTNUM", helper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSecondaryPriceGroup_1_out1.ACCOUNTNUM != null?
            EQGetSecondaryPriceGroup_1_out1.ACCOUNTNUM.toString():null
		)));
	valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.put("LCISECONDARYPRICEGROUP", helper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSecondaryPriceGroup_1_out1.LCISECONDARYPRICEGROUP != null?
            EQGetSecondaryPriceGroup_1_out1.LCISECONDARYPRICEGROUP.toString():null
		)));
	arraysValueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.put("LCISECONDARYPRICEGROUP", helper_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSecondaryPriceGroup_1_out1.LCISECONDARYPRICEGROUP != null?
            EQGetSecondaryPriceGroup_1_out1.LCISECONDARYPRICEGROUP.toString():null
		)));
		String strTemp_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = "";		strTemp_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = strTemp_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out + valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.get("SecondaryPriceGroup")
							+ valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.get("SecondaryPriceGroup").length();
	if(strCompCache_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out=strTemp_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.equals(strTemp_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out)){	  
    		nestXMLTool_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out, format_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
			output_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.write(doc_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
		    output_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetSecondaryPriceGroup_1_row3Struct row_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new EQGetSecondaryPriceGroup_1_row3Struct();
						  
					     		row_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.body = strWriter_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.add(row_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
					
		    doc_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out=0;i_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out<orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.length;i_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out++){
				orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out[i_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out != null && groupbyList_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out=strTemp_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out) {
		needRoot_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = doc_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.addElement("SecondaryPriceGroup");
		subTreeRootParent_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = root_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out;
		root4Group_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out=root4Group_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("SecondaryPriceGroup");
        if(orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.length){
        		orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.elements().add(orders_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out[0]++,loop_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = loop_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.addElement("LCISECONDARYPRICEGROUP");
		if(
		valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.get("LCISECONDARYPRICEGROUP")!=null){
			nestXMLTool_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out .setText(loop_0_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out,
		valueMap_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.get("LCISECONDARYPRICEGROUP"));
		}

 


	tos_count_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out++;

/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "EQGetSecondaryPriceGroup_1_out1"




	
	/**
	 * [EQGetSecondaryPriceGroup_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tMap_1";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2";
	
	

	}
}finally{
	if (rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 != null) {
		rs_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.close();
	}
	if (stmt_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 != null) {
		stmt_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.close();
	}
		if(conn_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 != null && !conn_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.isClosed()) {
			
	    		log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Closing the connection to the database.");
			
			conn_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_NB_LINE",nb_line_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2);
	    		log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - Retrieved records count: "+nb_line_EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 - "  + ("Done.") );

ok_Hash.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2", true);
end_Hash.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2", System.currentTimeMillis());




/**
 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 end ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetSecondaryPriceGroup_1_tMap_1 - Written records count in the table 'EQGetSecondaryPriceGroup_1_out1': " + count_EQGetSecondaryPriceGroup_1_out1_EQGetSecondaryPriceGroup_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSecondaryPriceGroup_1_row2",2,0,
			 			"EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetSecondaryPriceGroup_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetSecondaryPriceGroup_1_tMap_1", true);
end_Hash.put("EQGetSecondaryPriceGroup_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetSecondaryPriceGroup_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out, format_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
	output_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.write(doc_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
    output_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.close();
					EQGetSecondaryPriceGroup_1_row3Struct row_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = new EQGetSecondaryPriceGroup_1_row3Struct();
						  
					     		row_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.body = strWriter_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.add(row_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out);
globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSecondaryPriceGroup_1_out1",2,0,
			 			"EQGetSecondaryPriceGroup_1_tMap_1","tMap_1","tMap","EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2 finally ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tMap_1";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out");
	if (future_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out != null) {
		future_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetSellTo_1_row2Struct implements routines.system.IPersistableRow<EQGetSellTo_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String INVOICEACCOUNT;

				public String getINVOICEACCOUNT () {
					return this.INVOICEACCOUNT;
				}

				public Boolean INVOICEACCOUNTIsNullable(){
				    return true;
				}
				public Boolean INVOICEACCOUNTIsKey(){
				    return false;
				}
				public Integer INVOICEACCOUNTLength(){
				    return null;
				}
				public Integer INVOICEACCOUNTPrecision(){
				    return null;
				}
				public String INVOICEACCOUNTDefault(){
				
					return null;
				
				}
				public String INVOICEACCOUNTComment(){
				
				    return "";
				
				}
				public String INVOICEACCOUNTPattern(){
				
					return "";
				
				}
				public String INVOICEACCOUNTOriginalDbColumnName(){
				
					return "INVOICEACCOUNT";
				
				}

				
			    public String COLLECTREFPRODID;

				public String getCOLLECTREFPRODID () {
					return this.COLLECTREFPRODID;
				}

				public Boolean COLLECTREFPRODIDIsNullable(){
				    return true;
				}
				public Boolean COLLECTREFPRODIDIsKey(){
				    return false;
				}
				public Integer COLLECTREFPRODIDLength(){
				    return null;
				}
				public Integer COLLECTREFPRODIDPrecision(){
				    return null;
				}
				public String COLLECTREFPRODIDDefault(){
				
					return null;
				
				}
				public String COLLECTREFPRODIDComment(){
				
				    return "";
				
				}
				public String COLLECTREFPRODIDPattern(){
				
					return "";
				
				}
				public String COLLECTREFPRODIDOriginalDbColumnName(){
				
					return "COLLECTREFPRODID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.INVOICEACCOUNT = readString(dis);
					
					this.COLLECTREFPRODID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.INVOICEACCOUNT = readString(dis);
					
					this.COLLECTREFPRODID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INVOICEACCOUNT,dos);
					
					// String
				
						writeString(this.COLLECTREFPRODID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.INVOICEACCOUNT,dos);
					
					// String
				
						writeString(this.COLLECTREFPRODID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INVOICEACCOUNT="+INVOICEACCOUNT);
		sb.append(",COLLECTREFPRODID="+COLLECTREFPRODID);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(INVOICEACCOUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INVOICEACCOUNT);
            			}
            		
        			sb.append("|");
        		
        				if(COLLECTREFPRODID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COLLECTREFPRODID);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSellTo_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetSellTo_1_tAzureSynapseInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetSellTo_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetSellTo_1_tAzureSynapseInput_2");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetSellTo_1_row2Struct EQGetSellTo_1_row2 = new EQGetSellTo_1_row2Struct();




	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSellTo_1_tWriteJSONField_2_Out", false);
		start_Hash.put("EQGetSellTo_1_tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSellTo_1_row2");
			
		int tos_count_EQGetSellTo_1_tWriteJSONField_2_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tWriteJSONField_2_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSellTo_1_tWriteJSONField_2_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out = new StringBuilder();
                    log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("Parameters:");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append("DESTINATION" + " = " + "EQGetSellTo_1_tWriteJSONField_2");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tWriteJSONField_2_Out - "  + (log4jParamters_EQGetSellTo_1_tWriteJSONField_2_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetSellTo_1_tWriteJSONField_2_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSellTo_1_tWriteJSONField_2_Out", "tWriteJSONField_2_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetSellTo_1_tWriteJSONField_2_Out = 0;
				boolean needRoot_EQGetSellTo_1_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_EQGetSellTo_1_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<EQGetSellTo_1_row3Struct> listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetSellTo_1_row3Struct>();
							
	
					class ThreadXMLField_EQGetSellTo_1_tWriteJSONField_2_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetSellTo_1_row3Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetSellTo_1_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetSellTo_1_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetSellTo_1_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetSellTo_1_tWriteJSONField_2_In", queue);
							globalMap.put("flows_EQGetSellTo_1_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetSellTo_1_tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetSellTo_1_tWriteJSONField_2_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetSellTo_1_tWriteJSONField_2_Out txf_EQGetSellTo_1_tWriteJSONField_2_Out = new ThreadXMLField_EQGetSellTo_1_tWriteJSONField_2_Out(listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetSellTo_1_tWriteJSONField_2_Out = es.submit(txf_EQGetSellTo_1_tWriteJSONField_2_Out);
					globalMap.put("wrtXMLFieldIn_EQGetSellTo_1_tWriteJSONField_2_Out", future_EQGetSellTo_1_tWriteJSONField_2_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetSellTo_1_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetSellTo_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetSellTo_1_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetSellTo_1_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetSellTo_1_tWriteJSONField_2_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetSellTo_1_tWriteJSONField_2_Out nestXMLTool_EQGetSellTo_1_tWriteJSONField_2_Out = new NestXMLTool_EQGetSellTo_1_tWriteJSONField_2_Out();

EQGetSellTo_1_row2Struct  rowStructOutput_EQGetSellTo_1_tWriteJSONField_2_Out = new EQGetSellTo_1_row2Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetSellTo_1_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetSellTo_1_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_EQGetSellTo_1_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetSellTo_1_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetSellTo_1_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_EQGetSellTo_1_tWriteJSONField_2_Out.setTrimText(false);
format_EQGetSellTo_1_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetSellTo_1_tWriteJSONField_2_Out = new int[1];

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [EQGetSellTo_1_tAzureSynapseInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSellTo_1_tAzureSynapseInput_2", false);
		start_Hash.put("EQGetSellTo_1_tAzureSynapseInput_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetSellTo_1_tAzureSynapseInput_2";
	
	
		int tos_count_EQGetSellTo_1_tAzureSynapseInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSellTo_1_tAzureSynapseInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2 = new StringBuilder();
                    log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("Parameters:");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("TABLE" + " = " + "\"EQGetSellTo\"");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetSellTo WHERE COLLECTREFPRODID = '\"+((String)globalMap.get(\"EQGetSellTo.collectRefProdId\"))+\"';\"");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                            log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("INVOICEACCOUNT")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("COLLECTREFPRODID")+"}]");
                        log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - "  + (log4jParamters_EQGetSellTo_1_tAzureSynapseInput_2) );
                    } 
                } 
            new BytesLimit65535_EQGetSellTo_1_tAzureSynapseInput_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSellTo_1_tAzureSynapseInput_2", "tAzureSynapseInput_2", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetSellTo_1_tAzureSynapseInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetSellTo_1_tAzureSynapseInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetSellTo_1_tAzureSynapseInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetSellTo_1_tAzureSynapseInput_2, talendToDBArray_EQGetSellTo_1_tAzureSynapseInput_2); 
		    int nb_line_EQGetSellTo_1_tAzureSynapseInput_2 = 0;
		    java.sql.Connection conn_EQGetSellTo_1_tAzureSynapseInput_2 = null;
				String driverClass_EQGetSellTo_1_tAzureSynapseInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetSellTo_1_tAzureSynapseInput_2 = java.lang.Class.forName(driverClass_EQGetSellTo_1_tAzureSynapseInput_2);
				String dbUser_EQGetSellTo_1_tAzureSynapseInput_2 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetSellTo_1_tAzureSynapseInput_2 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetSellTo_1_tAzureSynapseInput_2 = decryptedPassword_EQGetSellTo_1_tAzureSynapseInput_2;
				
		    String port_EQGetSellTo_1_tAzureSynapseInput_2 = "1433";
		    String dbname_EQGetSellTo_1_tAzureSynapseInput_2 = context.Azure_DW_DB ;		    
		    String url_EQGetSellTo_1_tAzureSynapseInput_2 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetSellTo_1_tAzureSynapseInput_2)) {
		    	url_EQGetSellTo_1_tAzureSynapseInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetSellTo_1_tAzureSynapseInput_2)) {		    
		    	url_EQGetSellTo_1_tAzureSynapseInput_2 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetSellTo_1_tAzureSynapseInput_2 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetSellTo_1_tAzureSynapseInput_2 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Driver ClassName: "+driverClass_EQGetSellTo_1_tAzureSynapseInput_2+".");
			
	    		log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Connection attempt to '" + url_EQGetSellTo_1_tAzureSynapseInput_2 + "' with the username '" + dbUser_EQGetSellTo_1_tAzureSynapseInput_2 + "'.");
			
				conn_EQGetSellTo_1_tAzureSynapseInput_2 = java.sql.DriverManager.getConnection(url_EQGetSellTo_1_tAzureSynapseInput_2,dbUser_EQGetSellTo_1_tAzureSynapseInput_2,dbPwd_EQGetSellTo_1_tAzureSynapseInput_2);
	    		log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Connection to '" + url_EQGetSellTo_1_tAzureSynapseInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetSellTo_1_tAzureSynapseInput_2 = conn_EQGetSellTo_1_tAzureSynapseInput_2.createStatement();

		    String dbquery_EQGetSellTo_1_tAzureSynapseInput_2 = "SELECT * FROM ITG.EQGetSellTo WHERE COLLECTREFPRODID = '"+((String)globalMap.get("EQGetSellTo.collectRefProdId"))+"';";
		    
	    		log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Executing the query: '" + dbquery_EQGetSellTo_1_tAzureSynapseInput_2 + "'.");
			

            	globalMap.put("EQGetSellTo_1_tAzureSynapseInput_2_QUERY",dbquery_EQGetSellTo_1_tAzureSynapseInput_2);
		    java.sql.ResultSet rs_EQGetSellTo_1_tAzureSynapseInput_2 = null;

		    try {
		    	rs_EQGetSellTo_1_tAzureSynapseInput_2 = stmt_EQGetSellTo_1_tAzureSynapseInput_2.executeQuery(dbquery_EQGetSellTo_1_tAzureSynapseInput_2);
		    	java.sql.ResultSetMetaData rsmd_EQGetSellTo_1_tAzureSynapseInput_2 = rs_EQGetSellTo_1_tAzureSynapseInput_2.getMetaData();
		    	int colQtyInRs_EQGetSellTo_1_tAzureSynapseInput_2 = rsmd_EQGetSellTo_1_tAzureSynapseInput_2.getColumnCount();

		    String tmpContent_EQGetSellTo_1_tAzureSynapseInput_2 = null;
		    
		    
		    	log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Retrieving records from the database.");
		    
		    while (rs_EQGetSellTo_1_tAzureSynapseInput_2.next()) {
		        nb_line_EQGetSellTo_1_tAzureSynapseInput_2++;
		        
							if(colQtyInRs_EQGetSellTo_1_tAzureSynapseInput_2 < 1) {
								EQGetSellTo_1_row2.INVOICEACCOUNT = null;
							} else {
	                         		
           		tmpContent_EQGetSellTo_1_tAzureSynapseInput_2 = rs_EQGetSellTo_1_tAzureSynapseInput_2.getString(1);
            if(tmpContent_EQGetSellTo_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetSellTo_1_tAzureSynapseInput_2 .contains(rsmd_EQGetSellTo_1_tAzureSynapseInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetSellTo_1_row2.INVOICEACCOUNT = FormatterUtils.formatUnwithE(tmpContent_EQGetSellTo_1_tAzureSynapseInput_2);
            	} else {
                	EQGetSellTo_1_row2.INVOICEACCOUNT = tmpContent_EQGetSellTo_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetSellTo_1_row2.INVOICEACCOUNT = null;
            }
		                    }
							if(colQtyInRs_EQGetSellTo_1_tAzureSynapseInput_2 < 2) {
								EQGetSellTo_1_row2.COLLECTREFPRODID = null;
							} else {
	                         		
           		tmpContent_EQGetSellTo_1_tAzureSynapseInput_2 = rs_EQGetSellTo_1_tAzureSynapseInput_2.getString(2);
            if(tmpContent_EQGetSellTo_1_tAzureSynapseInput_2 != null) {
            	if (talendToDBList_EQGetSellTo_1_tAzureSynapseInput_2 .contains(rsmd_EQGetSellTo_1_tAzureSynapseInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetSellTo_1_row2.COLLECTREFPRODID = FormatterUtils.formatUnwithE(tmpContent_EQGetSellTo_1_tAzureSynapseInput_2);
            	} else {
                	EQGetSellTo_1_row2.COLLECTREFPRODID = tmpContent_EQGetSellTo_1_tAzureSynapseInput_2;
                }
            } else {
                EQGetSellTo_1_row2.COLLECTREFPRODID = null;
            }
		                    }
					
						log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Retrieving the record " + nb_line_EQGetSellTo_1_tAzureSynapseInput_2 + ".");
					





 



/**
 * [EQGetSellTo_1_tAzureSynapseInput_2 begin ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tAzureSynapseInput_2 main ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tAzureSynapseInput_2";
	
	

 


	tos_count_EQGetSellTo_1_tAzureSynapseInput_2++;

/**
 * [EQGetSellTo_1_tAzureSynapseInput_2 main ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tAzureSynapseInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetSellTo_1_tAzureSynapseInput_2 process_data_begin ] stop
 */

	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSellTo_1_row2","EQGetSellTo_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetSellTo_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSellTo_1_row2 - " + (EQGetSellTo_1_row2==null? "": EQGetSellTo_1_row2.toLogString()));
    			}
    		

	if(txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_EQGetSellTo_1_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_EQGetSellTo_1_tWriteJSONField_2_Out++;
				log.debug("EQGetSellTo_1_tWriteJSONField_2_Out - Processing the record " + nb_line_EQGetSellTo_1_tWriteJSONField_2_Out + ".");
			
	class ToStringHelper_EQGetSellTo_1_tWriteJSONField_2_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetSellTo_1_tWriteJSONField_2_Out helper_EQGetSellTo_1_tWriteJSONField_2_Out = new ToStringHelper_EQGetSellTo_1_tWriteJSONField_2_Out();

	valueMap_EQGetSellTo_1_tWriteJSONField_2_Out.clear();
	arraysValueMap_EQGetSellTo_1_tWriteJSONField_2_Out.clear();
	valueMap_EQGetSellTo_1_tWriteJSONField_2_Out.put("INVOICEACCOUNT", helper_EQGetSellTo_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSellTo_1_row2.INVOICEACCOUNT != null?
            EQGetSellTo_1_row2.INVOICEACCOUNT.toString():null
		)));
	arraysValueMap_EQGetSellTo_1_tWriteJSONField_2_Out.put("INVOICEACCOUNT", helper_EQGetSellTo_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSellTo_1_row2.INVOICEACCOUNT != null?
            EQGetSellTo_1_row2.INVOICEACCOUNT.toString():null
		)));
	valueMap_EQGetSellTo_1_tWriteJSONField_2_Out.put("COLLECTREFPRODID", helper_EQGetSellTo_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSellTo_1_row2.COLLECTREFPRODID != null?
            EQGetSellTo_1_row2.COLLECTREFPRODID.toString():null
		)));
	arraysValueMap_EQGetSellTo_1_tWriteJSONField_2_Out.put("COLLECTREFPRODID", helper_EQGetSellTo_1_tWriteJSONField_2_Out.toString(
	(
		EQGetSellTo_1_row2.COLLECTREFPRODID != null?
            EQGetSellTo_1_row2.COLLECTREFPRODID.toString():null
		)));
		String strTemp_EQGetSellTo_1_tWriteJSONField_2_Out = "";
	if(strCompCache_EQGetSellTo_1_tWriteJSONField_2_Out==null){
		strCompCache_EQGetSellTo_1_tWriteJSONField_2_Out=strTemp_EQGetSellTo_1_tWriteJSONField_2_Out;
		
	}else{  
    		nestXMLTool_EQGetSellTo_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetSellTo_1_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetSellTo_1_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetSellTo_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetSellTo_1_tWriteJSONField_2_Out, format_EQGetSellTo_1_tWriteJSONField_2_Out);
			output_EQGetSellTo_1_tWriteJSONField_2_Out.write(doc_EQGetSellTo_1_tWriteJSONField_2_Out);
		    output_EQGetSellTo_1_tWriteJSONField_2_Out.close();
			
				  		  EQGetSellTo_1_row3Struct row_EQGetSellTo_1_tWriteJSONField_2_Out = new EQGetSellTo_1_row3Struct();
						  
					     		row_EQGetSellTo_1_tWriteJSONField_2_Out.body = strWriter_EQGetSellTo_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out.add(row_EQGetSellTo_1_tWriteJSONField_2_Out);
					
		    doc_EQGetSellTo_1_tWriteJSONField_2_Out.clearContent();
			needRoot_EQGetSellTo_1_tWriteJSONField_2_Out = true;
			for(int i_EQGetSellTo_1_tWriteJSONField_2_Out=0;i_EQGetSellTo_1_tWriteJSONField_2_Out<orders_EQGetSellTo_1_tWriteJSONField_2_Out.length;i_EQGetSellTo_1_tWriteJSONField_2_Out++){
				orders_EQGetSellTo_1_tWriteJSONField_2_Out[i_EQGetSellTo_1_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_EQGetSellTo_1_tWriteJSONField_2_Out != null && groupbyList_EQGetSellTo_1_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_EQGetSellTo_1_tWriteJSONField_2_Out.clear();
			}
			strCompCache_EQGetSellTo_1_tWriteJSONField_2_Out=strTemp_EQGetSellTo_1_tWriteJSONField_2_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetSellTo_1_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetSellTo_1_tWriteJSONField_2_Out) {
		needRoot_EQGetSellTo_1_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_EQGetSellTo_1_tWriteJSONField_2_Out = doc_EQGetSellTo_1_tWriteJSONField_2_Out.addElement("rootTag");
		subTreeRootParent_EQGetSellTo_1_tWriteJSONField_2_Out = root_EQGetSellTo_1_tWriteJSONField_2_Out;
		root4Group_EQGetSellTo_1_tWriteJSONField_2_Out = subTreeRootParent_EQGetSellTo_1_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_EQGetSellTo_1_tWriteJSONField_2_Out=root4Group_EQGetSellTo_1_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetSellTo_1_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("INVOICEACCOUNT");
        if(orders_EQGetSellTo_1_tWriteJSONField_2_Out[0]==0){
        	orders_EQGetSellTo_1_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_EQGetSellTo_1_tWriteJSONField_2_Out.length){
        		orders_EQGetSellTo_1_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_EQGetSellTo_1_tWriteJSONField_2_Out.elements().add(orders_EQGetSellTo_1_tWriteJSONField_2_Out[0]++,loop_EQGetSellTo_1_tWriteJSONField_2_Out);
		if(
		valueMap_EQGetSellTo_1_tWriteJSONField_2_Out.get("INVOICEACCOUNT")!=null){
			nestXMLTool_EQGetSellTo_1_tWriteJSONField_2_Out .setText(loop_EQGetSellTo_1_tWriteJSONField_2_Out,
		valueMap_EQGetSellTo_1_tWriteJSONField_2_Out.get("INVOICEACCOUNT"));
		}

 


	tos_count_EQGetSellTo_1_tWriteJSONField_2_Out++;

/**
 * [EQGetSellTo_1_tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_Out";
	
	

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetSellTo_1_tAzureSynapseInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetSellTo_1_tAzureSynapseInput_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tAzureSynapseInput_2 end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tAzureSynapseInput_2";
	
	

	}
}finally{
	if (rs_EQGetSellTo_1_tAzureSynapseInput_2 != null) {
		rs_EQGetSellTo_1_tAzureSynapseInput_2.close();
	}
	if (stmt_EQGetSellTo_1_tAzureSynapseInput_2 != null) {
		stmt_EQGetSellTo_1_tAzureSynapseInput_2.close();
	}
		if(conn_EQGetSellTo_1_tAzureSynapseInput_2 != null && !conn_EQGetSellTo_1_tAzureSynapseInput_2.isClosed()) {
			
	    		log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Closing the connection to the database.");
			
			conn_EQGetSellTo_1_tAzureSynapseInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetSellTo_1_tAzureSynapseInput_2_NB_LINE",nb_line_EQGetSellTo_1_tAzureSynapseInput_2);
	    		log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - Retrieved records count: "+nb_line_EQGetSellTo_1_tAzureSynapseInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tAzureSynapseInput_2 - "  + ("Done.") );

ok_Hash.put("EQGetSellTo_1_tAzureSynapseInput_2", true);
end_Hash.put("EQGetSellTo_1_tAzureSynapseInput_2", System.currentTimeMillis());




/**
 * [EQGetSellTo_1_tAzureSynapseInput_2 end ] stop
 */

	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_Out";
	
	

if(nb_line_EQGetSellTo_1_tWriteJSONField_2_Out > 0){  
    nestXMLTool_EQGetSellTo_1_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_EQGetSellTo_1_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetSellTo_1_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetSellTo_1_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetSellTo_1_tWriteJSONField_2_Out, format_EQGetSellTo_1_tWriteJSONField_2_Out);
	output_EQGetSellTo_1_tWriteJSONField_2_Out.write(doc_EQGetSellTo_1_tWriteJSONField_2_Out);
    output_EQGetSellTo_1_tWriteJSONField_2_Out.close();
					EQGetSellTo_1_row3Struct row_EQGetSellTo_1_tWriteJSONField_2_Out = new EQGetSellTo_1_row3Struct();
						  
					     		row_EQGetSellTo_1_tWriteJSONField_2_Out.body = strWriter_EQGetSellTo_1_tWriteJSONField_2_Out.toString();
					     		listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out.add(row_EQGetSellTo_1_tWriteJSONField_2_Out);
		    		

}
globalMap.put("EQGetSellTo_1_tWriteJSONField_2_Out_NB_LINE",nb_line_EQGetSellTo_1_tWriteJSONField_2_Out);
globalMap.put("EQGetSellTo_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out.hashCode()), "true");
	
		future_EQGetSellTo_1_tWriteJSONField_2_Out.get();
		
		if(txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_EQGetSellTo_1_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_EQGetSellTo_1_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetSellTo_1_tWriteJSONField_2_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSellTo_1_row2",2,0,
			 			"EQGetSellTo_1_tAzureSynapseInput_2","tAzureSynapseInput_2","tAzureSynapseInput","EQGetSellTo_1_tWriteJSONField_2_Out","tWriteJSONField_2_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tWriteJSONField_2_Out - "  + ("Done.") );

ok_Hash.put("EQGetSellTo_1_tWriteJSONField_2_Out", true);
end_Hash.put("EQGetSellTo_1_tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetSellTo_1_tWriteJSONField_2_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetSellTo_1_tAzureSynapseInput_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tAzureSynapseInput_2";
	
	

 



/**
 * [EQGetSellTo_1_tAzureSynapseInput_2 finally ] stop
 */

	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_Out";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_Out";
	
	

		java.util.Queue listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_EQGetSellTo_1_tWriteJSONField_2_In");
		if(resourceMap.get("finish_EQGetSellTo_1_tWriteJSONField_2_Out") == null){
			globalMap.put("EQGetSellTo_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out != null) {
		globalMap.put("EQGetSellTo_1_tWriteJSONField_2_In_FINISH" + (listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out==null?"":listGroupby_EQGetSellTo_1_tWriteJSONField_2_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetSellTo_1_tWriteJSONField_2_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetSellTo_1_tWriteJSONField_2_Out");
	if (future_EQGetSellTo_1_tWriteJSONField_2_Out != null) {
		future_EQGetSellTo_1_tWriteJSONField_2_Out.get();
	}

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetSellTo_1_tAzureSynapseInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetUOMConv_1_row1Struct implements routines.system.IPersistableRow<EQGetUOMConv_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String DISPLAYPRODUCTNUMBER;

				public String getDISPLAYPRODUCTNUMBER () {
					return this.DISPLAYPRODUCTNUMBER;
				}

				public Boolean DISPLAYPRODUCTNUMBERIsNullable(){
				    return true;
				}
				public Boolean DISPLAYPRODUCTNUMBERIsKey(){
				    return false;
				}
				public Integer DISPLAYPRODUCTNUMBERLength(){
				    return null;
				}
				public Integer DISPLAYPRODUCTNUMBERPrecision(){
				    return null;
				}
				public String DISPLAYPRODUCTNUMBERDefault(){
				
					return null;
				
				}
				public String DISPLAYPRODUCTNUMBERComment(){
				
				    return "";
				
				}
				public String DISPLAYPRODUCTNUMBERPattern(){
				
					return "";
				
				}
				public String DISPLAYPRODUCTNUMBEROriginalDbColumnName(){
				
					return "DISPLAYPRODUCTNUMBER";
				
				}

				
			    public Float FACTOR;

				public Float getFACTOR () {
					return this.FACTOR;
				}

				public Boolean FACTORIsNullable(){
				    return true;
				}
				public Boolean FACTORIsKey(){
				    return false;
				}
				public Integer FACTORLength(){
				    return null;
				}
				public Integer FACTORPrecision(){
				    return null;
				}
				public String FACTORDefault(){
				
					return null;
				
				}
				public String FACTORComment(){
				
				    return "";
				
				}
				public String FACTORPattern(){
				
					return "";
				
				}
				public String FACTOROriginalDbColumnName(){
				
					return "FACTOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FACTOR = null;
           				} else {
           			    	this.FACTOR = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FACTOR = null;
           				} else {
           			    	this.FACTOR = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// Float
				
						if(this.FACTOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.FACTOR);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// Float
				
						if(this.FACTOR == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.FACTOR);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DISPLAYPRODUCTNUMBER="+DISPLAYPRODUCTNUMBER);
		sb.append(",FACTOR="+String.valueOf(FACTOR));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(DISPLAYPRODUCTNUMBER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPLAYPRODUCTNUMBER);
            			}
            		
        			sb.append("|");
        		
        				if(FACTOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FACTOR);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetUOMConv_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetUOMConv_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetUOMConv_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetUOMConv_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetUOMConv_1_row1Struct EQGetUOMConv_1_row1 = new EQGetUOMConv_1_row1Struct();




	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetUOMConv_1_row1");
			
		int tos_count_EQGetUOMConv_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetUOMConv_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetUOMConv_1_tWriteJSONField_1");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetUOMConv_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetUOMConv_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetUOMConv_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetUOMConv_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetUOMConv_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetUOMConv_1_row5Struct> listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetUOMConv_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetUOMConv_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetUOMConv_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetUOMConv_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetUOMConv_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetUOMConv_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetUOMConv_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetUOMConv_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetUOMConv_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetUOMConv_1_tWriteJSONField_1_Out txf_EQGetUOMConv_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetUOMConv_1_tWriteJSONField_1_Out(listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetUOMConv_1_tWriteJSONField_1_Out = es.submit(txf_EQGetUOMConv_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetUOMConv_1_tWriteJSONField_1_Out", future_EQGetUOMConv_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetUOMConv_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetUOMConv_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetUOMConv_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetUOMConv_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetUOMConv_1_tWriteJSONField_1_Out nestXMLTool_EQGetUOMConv_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetUOMConv_1_tWriteJSONField_1_Out();

EQGetUOMConv_1_row1Struct  rowStructOutput_EQGetUOMConv_1_tWriteJSONField_1_Out = new EQGetUOMConv_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetUOMConv_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetUOMConv_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetUOMConv_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetUOMConv_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetUOMConv_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetUOMConv_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetUOMConv_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetUOMConv_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetUOMConv_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetUOMConv_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetUOMConv_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetUOMConv_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetUOMConv_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetUOMConv_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetUOMConv\"");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT * FROM ITG.EQGetUOMConv WHERE DISPLAYPRODUCTNUMBER= '\"+((String)globalMap.get(\"EQGetUOMConv.displayProductNumber\"))+\"';\"");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("DISPLAYPRODUCTNUMBER")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("FACTOR")+"}]");
                        log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetUOMConv_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetUOMConv_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetUOMConv_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetUOMConv_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetUOMConv_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetUOMConv_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetUOMConv_1_tAzureSynapseInput_1, talendToDBArray_EQGetUOMConv_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetUOMConv_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetUOMConv_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetUOMConv_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetUOMConv_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetUOMConv_1_tAzureSynapseInput_1);
				String dbUser_EQGetUOMConv_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetUOMConv_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetUOMConv_1_tAzureSynapseInput_1 = decryptedPassword_EQGetUOMConv_1_tAzureSynapseInput_1;
				
		    String port_EQGetUOMConv_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetUOMConv_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetUOMConv_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetUOMConv_1_tAzureSynapseInput_1)) {
		    	url_EQGetUOMConv_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetUOMConv_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetUOMConv_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetUOMConv_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetUOMConv_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetUOMConv_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetUOMConv_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetUOMConv_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetUOMConv_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetUOMConv_1_tAzureSynapseInput_1,dbUser_EQGetUOMConv_1_tAzureSynapseInput_1,dbPwd_EQGetUOMConv_1_tAzureSynapseInput_1);
	    		log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetUOMConv_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetUOMConv_1_tAzureSynapseInput_1 = conn_EQGetUOMConv_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetUOMConv_1_tAzureSynapseInput_1 = "SELECT * FROM ITG.EQGetUOMConv WHERE DISPLAYPRODUCTNUMBER= '"+((String)globalMap.get("EQGetUOMConv.displayProductNumber"))+"';";
		    
	    		log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetUOMConv_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetUOMConv_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetUOMConv_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetUOMConv_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetUOMConv_1_tAzureSynapseInput_1 = stmt_EQGetUOMConv_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetUOMConv_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetUOMConv_1_tAzureSynapseInput_1 = rs_EQGetUOMConv_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetUOMConv_1_tAzureSynapseInput_1 = rsmd_EQGetUOMConv_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetUOMConv_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetUOMConv_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetUOMConv_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetUOMConv_1_tAzureSynapseInput_1 < 1) {
								EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER = null;
							} else {
	                         		
           		tmpContent_EQGetUOMConv_1_tAzureSynapseInput_1 = rs_EQGetUOMConv_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetUOMConv_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetUOMConv_1_tAzureSynapseInput_1 .contains(rsmd_EQGetUOMConv_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER = FormatterUtils.formatUnwithE(tmpContent_EQGetUOMConv_1_tAzureSynapseInput_1);
            	} else {
                	EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER = tmpContent_EQGetUOMConv_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER = null;
            }
		                    }
							if(colQtyInRs_EQGetUOMConv_1_tAzureSynapseInput_1 < 2) {
								EQGetUOMConv_1_row1.FACTOR = null;
							} else {
		                          
            EQGetUOMConv_1_row1.FACTOR = rs_EQGetUOMConv_1_tAzureSynapseInput_1.getFloat(2);
            if(rs_EQGetUOMConv_1_tAzureSynapseInput_1.wasNull()){
                    EQGetUOMConv_1_row1.FACTOR = null;
            }
		                    }
					
						log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetUOMConv_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetUOMConv_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetUOMConv_1_tAzureSynapseInput_1++;

/**
 * [EQGetUOMConv_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetUOMConv_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetUOMConv_1_row1","EQGetUOMConv_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetUOMConv_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetUOMConv_1_row1 - " + (EQGetUOMConv_1_row1==null? "": EQGetUOMConv_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetUOMConv_1_tWriteJSONField_1_Out++;
				log.debug("EQGetUOMConv_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetUOMConv_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetUOMConv_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetUOMConv_1_tWriteJSONField_1_Out helper_EQGetUOMConv_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetUOMConv_1_tWriteJSONField_1_Out();

	valueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetUOMConv_1_tWriteJSONField_1_Out.toString(
	(
		EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	arraysValueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetUOMConv_1_tWriteJSONField_1_Out.toString(
	(
		EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetUOMConv_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	valueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.put("FACTOR", helper_EQGetUOMConv_1_tWriteJSONField_1_Out.toString(
	(
		EQGetUOMConv_1_row1.FACTOR != null?
            EQGetUOMConv_1_row1.FACTOR.toString():null
		)));
	arraysValueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.put("FACTOR", helper_EQGetUOMConv_1_tWriteJSONField_1_Out.toString(
	(
		EQGetUOMConv_1_row1.FACTOR != null?
            EQGetUOMConv_1_row1.FACTOR.toString():null
		)));
		String strTemp_EQGetUOMConv_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetUOMConv_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetUOMConv_1_tWriteJSONField_1_Out=strTemp_EQGetUOMConv_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetUOMConv_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetUOMConv_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetUOMConv_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetUOMConv_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetUOMConv_1_tWriteJSONField_1_Out, format_EQGetUOMConv_1_tWriteJSONField_1_Out);
			output_EQGetUOMConv_1_tWriteJSONField_1_Out.write(doc_EQGetUOMConv_1_tWriteJSONField_1_Out);
		    output_EQGetUOMConv_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetUOMConv_1_row5Struct row_EQGetUOMConv_1_tWriteJSONField_1_Out = new EQGetUOMConv_1_row5Struct();
						  
					     		row_EQGetUOMConv_1_tWriteJSONField_1_Out.body = strWriter_EQGetUOMConv_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out.add(row_EQGetUOMConv_1_tWriteJSONField_1_Out);
					
		    doc_EQGetUOMConv_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetUOMConv_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetUOMConv_1_tWriteJSONField_1_Out=0;i_EQGetUOMConv_1_tWriteJSONField_1_Out<orders_EQGetUOMConv_1_tWriteJSONField_1_Out.length;i_EQGetUOMConv_1_tWriteJSONField_1_Out++){
				orders_EQGetUOMConv_1_tWriteJSONField_1_Out[i_EQGetUOMConv_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetUOMConv_1_tWriteJSONField_1_Out != null && groupbyList_EQGetUOMConv_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetUOMConv_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetUOMConv_1_tWriteJSONField_1_Out=strTemp_EQGetUOMConv_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetUOMConv_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetUOMConv_1_tWriteJSONField_1_Out) {
		needRoot_EQGetUOMConv_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetUOMConv_1_tWriteJSONField_1_Out = doc_EQGetUOMConv_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetUOMConv_1_tWriteJSONField_1_Out = root_EQGetUOMConv_1_tWriteJSONField_1_Out;
		root4Group_EQGetUOMConv_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetUOMConv_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetUOMConv_1_tWriteJSONField_1_Out=root4Group_EQGetUOMConv_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetUOMConv_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("FACTOR");
        if(orders_EQGetUOMConv_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetUOMConv_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetUOMConv_1_tWriteJSONField_1_Out.length){
        		orders_EQGetUOMConv_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetUOMConv_1_tWriteJSONField_1_Out.elements().add(orders_EQGetUOMConv_1_tWriteJSONField_1_Out[0]++,loop_EQGetUOMConv_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.get("FACTOR")!=null){
			nestXMLTool_EQGetUOMConv_1_tWriteJSONField_1_Out .setText(loop_EQGetUOMConv_1_tWriteJSONField_1_Out,
		valueMap_EQGetUOMConv_1_tWriteJSONField_1_Out.get("FACTOR"));
            loop_EQGetUOMConv_1_tWriteJSONField_1_Out.addAttribute("type", "number");
		}

 


	tos_count_EQGetUOMConv_1_tWriteJSONField_1_Out++;

/**
 * [EQGetUOMConv_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetUOMConv_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetUOMConv_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetUOMConv_1_tAzureSynapseInput_1 != null) {
		rs_EQGetUOMConv_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetUOMConv_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetUOMConv_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetUOMConv_1_tAzureSynapseInput_1 != null && !conn_EQGetUOMConv_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetUOMConv_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetUOMConv_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetUOMConv_1_tAzureSynapseInput_1);
	    		log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetUOMConv_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetUOMConv_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetUOMConv_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetUOMConv_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetUOMConv_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetUOMConv_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetUOMConv_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetUOMConv_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetUOMConv_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetUOMConv_1_tWriteJSONField_1_Out, format_EQGetUOMConv_1_tWriteJSONField_1_Out);
	output_EQGetUOMConv_1_tWriteJSONField_1_Out.write(doc_EQGetUOMConv_1_tWriteJSONField_1_Out);
    output_EQGetUOMConv_1_tWriteJSONField_1_Out.close();
					EQGetUOMConv_1_row5Struct row_EQGetUOMConv_1_tWriteJSONField_1_Out = new EQGetUOMConv_1_row5Struct();
						  
					     		row_EQGetUOMConv_1_tWriteJSONField_1_Out.body = strWriter_EQGetUOMConv_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out.add(row_EQGetUOMConv_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetUOMConv_1_tWriteJSONField_1_Out);
globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetUOMConv_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetUOMConv_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetUOMConv_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetUOMConv_1_row1",2,0,
			 			"EQGetUOMConv_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetUOMConv_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetUOMConv_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetUOMConv_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetUOMConv_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetUOMConv_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetUOMConv_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetUOMConv_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetUOMConv_1_tWriteJSONField_1_Out");
	if (future_EQGetUOMConv_1_tWriteJSONField_1_Out != null) {
		future_EQGetUOMConv_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetUOMConv_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetValidItem_1_row1Struct implements routines.system.IPersistableRow<EQGetValidItem_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String DISPLAYPRODUCTNUMBER;

				public String getDISPLAYPRODUCTNUMBER () {
					return this.DISPLAYPRODUCTNUMBER;
				}

				public Boolean DISPLAYPRODUCTNUMBERIsNullable(){
				    return true;
				}
				public Boolean DISPLAYPRODUCTNUMBERIsKey(){
				    return false;
				}
				public Integer DISPLAYPRODUCTNUMBERLength(){
				    return null;
				}
				public Integer DISPLAYPRODUCTNUMBERPrecision(){
				    return null;
				}
				public String DISPLAYPRODUCTNUMBERDefault(){
				
					return null;
				
				}
				public String DISPLAYPRODUCTNUMBERComment(){
				
				    return "";
				
				}
				public String DISPLAYPRODUCTNUMBERPattern(){
				
					return "";
				
				}
				public String DISPLAYPRODUCTNUMBEROriginalDbColumnName(){
				
					return "DISPLAYPRODUCTNUMBER";
				
				}

				
			    public String VALIDITEM;

				public String getVALIDITEM () {
					return this.VALIDITEM;
				}

				public Boolean VALIDITEMIsNullable(){
				    return true;
				}
				public Boolean VALIDITEMIsKey(){
				    return false;
				}
				public Integer VALIDITEMLength(){
				    return null;
				}
				public Integer VALIDITEMPrecision(){
				    return null;
				}
				public String VALIDITEMDefault(){
				
					return null;
				
				}
				public String VALIDITEMComment(){
				
				    return "";
				
				}
				public String VALIDITEMPattern(){
				
					return "";
				
				}
				public String VALIDITEMOriginalDbColumnName(){
				
					return "VALIDITEM";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
					this.VALIDITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.DISPLAYPRODUCTNUMBER = readString(dis);
					
					this.VALIDITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.VALIDITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DISPLAYPRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.VALIDITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DISPLAYPRODUCTNUMBER="+DISPLAYPRODUCTNUMBER);
		sb.append(",VALIDITEM="+VALIDITEM);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(DISPLAYPRODUCTNUMBER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPLAYPRODUCTNUMBER);
            			}
            		
        			sb.append("|");
        		
        				if(VALIDITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VALIDITEM);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetValidItem_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetValidItem_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetValidItem_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetValidItem_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetValidItem_1_row1Struct EQGetValidItem_1_row1 = new EQGetValidItem_1_row1Struct();




	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetValidItem_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetValidItem_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetValidItem_1_row1");
			
		int tos_count_EQGetValidItem_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetValidItem_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetValidItem_1_tWriteJSONField_1");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetValidItem_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetValidItem_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetValidItem_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetValidItem_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetValidItem_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetValidItem_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetValidItem_1_row5Struct> listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetValidItem_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetValidItem_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetValidItem_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetValidItem_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetValidItem_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetValidItem_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetValidItem_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetValidItem_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetValidItem_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetValidItem_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetValidItem_1_tWriteJSONField_1_Out txf_EQGetValidItem_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetValidItem_1_tWriteJSONField_1_Out(listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetValidItem_1_tWriteJSONField_1_Out = es.submit(txf_EQGetValidItem_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetValidItem_1_tWriteJSONField_1_Out", future_EQGetValidItem_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetValidItem_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetValidItem_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetValidItem_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetValidItem_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetValidItem_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetValidItem_1_tWriteJSONField_1_Out nestXMLTool_EQGetValidItem_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetValidItem_1_tWriteJSONField_1_Out();

EQGetValidItem_1_row1Struct  rowStructOutput_EQGetValidItem_1_tWriteJSONField_1_Out = new EQGetValidItem_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetValidItem_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetValidItem_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetValidItem_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetValidItem_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetValidItem_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetValidItem_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetValidItem_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetValidItem_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetValidItem_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetValidItem_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetValidItem_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetValidItem_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetValidItem_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetValidItem_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetValidItem\"");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT TOP 1 DISPLAYPRODUCTNUMBER, VALIDITEM, SRT FROM  (  SELECT DISPLAYPRODUCTNUMBER, VALIDITEM, 0 AS SRT  FROM ITG.EQGetValidItem WHERE DISPLAYPRODUCTNUMBER = '\"+((String)globalMap.get(\"EQGetValidItem.displayProductNumber\"))+\"'  UNION ALL  SELECT '' AS DISPLAYPRODUCTNUMBER, 'F' AS VALIDITEM, 1 AS SRT  ) A   ORDER BY SRT  ;\"");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("DISPLAYPRODUCTNUMBER")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("VALIDITEM")+"}]");
                        log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetValidItem_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetValidItem_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetValidItem_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetValidItem_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetValidItem_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetValidItem_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetValidItem_1_tAzureSynapseInput_1, talendToDBArray_EQGetValidItem_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetValidItem_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetValidItem_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetValidItem_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetValidItem_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetValidItem_1_tAzureSynapseInput_1);
				String dbUser_EQGetValidItem_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetValidItem_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetValidItem_1_tAzureSynapseInput_1 = decryptedPassword_EQGetValidItem_1_tAzureSynapseInput_1;
				
		    String port_EQGetValidItem_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetValidItem_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetValidItem_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetValidItem_1_tAzureSynapseInput_1)) {
		    	url_EQGetValidItem_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetValidItem_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetValidItem_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetValidItem_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetValidItem_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetValidItem_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetValidItem_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetValidItem_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetValidItem_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetValidItem_1_tAzureSynapseInput_1,dbUser_EQGetValidItem_1_tAzureSynapseInput_1,dbPwd_EQGetValidItem_1_tAzureSynapseInput_1);
	    		log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetValidItem_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetValidItem_1_tAzureSynapseInput_1 = conn_EQGetValidItem_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetValidItem_1_tAzureSynapseInput_1 = "SELECT TOP 1 DISPLAYPRODUCTNUMBER, VALIDITEM, SRT FROM\n(\nSELECT DISPLAYPRODUCTNUMBER, VALIDITEM, 0 AS SRT\nFROM ITG.E"
+"QGetValidItem WHERE DISPLAYPRODUCTNUMBER = '"+((String)globalMap.get("EQGetValidItem.displayProductNumber"))+"'\nUNION ALL\nSELECT '' AS DISPLAYPRODUCTNUMBER, 'F' AS VALIDITEM, 1 AS SRT\n) A\n ORDER BY SRT\n;";
		    
	    		log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetValidItem_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetValidItem_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetValidItem_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetValidItem_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetValidItem_1_tAzureSynapseInput_1 = stmt_EQGetValidItem_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetValidItem_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetValidItem_1_tAzureSynapseInput_1 = rs_EQGetValidItem_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetValidItem_1_tAzureSynapseInput_1 = rsmd_EQGetValidItem_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetValidItem_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetValidItem_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetValidItem_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetValidItem_1_tAzureSynapseInput_1 < 1) {
								EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER = null;
							} else {
	                         		
           		tmpContent_EQGetValidItem_1_tAzureSynapseInput_1 = rs_EQGetValidItem_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetValidItem_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetValidItem_1_tAzureSynapseInput_1 .contains(rsmd_EQGetValidItem_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER = FormatterUtils.formatUnwithE(tmpContent_EQGetValidItem_1_tAzureSynapseInput_1);
            	} else {
                	EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER = tmpContent_EQGetValidItem_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER = null;
            }
		                    }
							if(colQtyInRs_EQGetValidItem_1_tAzureSynapseInput_1 < 2) {
								EQGetValidItem_1_row1.VALIDITEM = null;
							} else {
	                         		
           		tmpContent_EQGetValidItem_1_tAzureSynapseInput_1 = rs_EQGetValidItem_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetValidItem_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetValidItem_1_tAzureSynapseInput_1 .contains(rsmd_EQGetValidItem_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetValidItem_1_row1.VALIDITEM = FormatterUtils.formatUnwithE(tmpContent_EQGetValidItem_1_tAzureSynapseInput_1);
            	} else {
                	EQGetValidItem_1_row1.VALIDITEM = tmpContent_EQGetValidItem_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetValidItem_1_row1.VALIDITEM = null;
            }
		                    }
					
						log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetValidItem_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetValidItem_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetValidItem_1_tAzureSynapseInput_1++;

/**
 * [EQGetValidItem_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetValidItem_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetValidItem_1_row1","EQGetValidItem_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetValidItem_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetValidItem_1_row1 - " + (EQGetValidItem_1_row1==null? "": EQGetValidItem_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetValidItem_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetValidItem_1_tWriteJSONField_1_Out++;
				log.debug("EQGetValidItem_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetValidItem_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetValidItem_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetValidItem_1_tWriteJSONField_1_Out helper_EQGetValidItem_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetValidItem_1_tWriteJSONField_1_Out();

	valueMap_EQGetValidItem_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetValidItem_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetValidItem_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetValidItem_1_tWriteJSONField_1_Out.toString(
	(
		EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	arraysValueMap_EQGetValidItem_1_tWriteJSONField_1_Out.put("DISPLAYPRODUCTNUMBER", helper_EQGetValidItem_1_tWriteJSONField_1_Out.toString(
	(
		EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER != null?
            EQGetValidItem_1_row1.DISPLAYPRODUCTNUMBER.toString():null
		)));
	valueMap_EQGetValidItem_1_tWriteJSONField_1_Out.put("VALIDITEM", helper_EQGetValidItem_1_tWriteJSONField_1_Out.toString(
	(
		EQGetValidItem_1_row1.VALIDITEM != null?
            EQGetValidItem_1_row1.VALIDITEM.toString():null
		)));
	arraysValueMap_EQGetValidItem_1_tWriteJSONField_1_Out.put("VALIDITEM", helper_EQGetValidItem_1_tWriteJSONField_1_Out.toString(
	(
		EQGetValidItem_1_row1.VALIDITEM != null?
            EQGetValidItem_1_row1.VALIDITEM.toString():null
		)));
		String strTemp_EQGetValidItem_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetValidItem_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetValidItem_1_tWriteJSONField_1_Out=strTemp_EQGetValidItem_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetValidItem_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetValidItem_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetValidItem_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetValidItem_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetValidItem_1_tWriteJSONField_1_Out, format_EQGetValidItem_1_tWriteJSONField_1_Out);
			output_EQGetValidItem_1_tWriteJSONField_1_Out.write(doc_EQGetValidItem_1_tWriteJSONField_1_Out);
		    output_EQGetValidItem_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetValidItem_1_row5Struct row_EQGetValidItem_1_tWriteJSONField_1_Out = new EQGetValidItem_1_row5Struct();
						  
					     		row_EQGetValidItem_1_tWriteJSONField_1_Out.body = strWriter_EQGetValidItem_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out.add(row_EQGetValidItem_1_tWriteJSONField_1_Out);
					
		    doc_EQGetValidItem_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetValidItem_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetValidItem_1_tWriteJSONField_1_Out=0;i_EQGetValidItem_1_tWriteJSONField_1_Out<orders_EQGetValidItem_1_tWriteJSONField_1_Out.length;i_EQGetValidItem_1_tWriteJSONField_1_Out++){
				orders_EQGetValidItem_1_tWriteJSONField_1_Out[i_EQGetValidItem_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetValidItem_1_tWriteJSONField_1_Out != null && groupbyList_EQGetValidItem_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetValidItem_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetValidItem_1_tWriteJSONField_1_Out=strTemp_EQGetValidItem_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetValidItem_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetValidItem_1_tWriteJSONField_1_Out) {
		needRoot_EQGetValidItem_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetValidItem_1_tWriteJSONField_1_Out = doc_EQGetValidItem_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetValidItem_1_tWriteJSONField_1_Out = root_EQGetValidItem_1_tWriteJSONField_1_Out;
		root4Group_EQGetValidItem_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetValidItem_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetValidItem_1_tWriteJSONField_1_Out=root4Group_EQGetValidItem_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetValidItem_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("VALIDITEM");
        if(orders_EQGetValidItem_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetValidItem_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetValidItem_1_tWriteJSONField_1_Out.length){
        		orders_EQGetValidItem_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetValidItem_1_tWriteJSONField_1_Out.elements().add(orders_EQGetValidItem_1_tWriteJSONField_1_Out[0]++,loop_EQGetValidItem_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetValidItem_1_tWriteJSONField_1_Out.get("VALIDITEM")!=null){
			nestXMLTool_EQGetValidItem_1_tWriteJSONField_1_Out .setText(loop_EQGetValidItem_1_tWriteJSONField_1_Out,
		valueMap_EQGetValidItem_1_tWriteJSONField_1_Out.get("VALIDITEM"));
		}

 


	tos_count_EQGetValidItem_1_tWriteJSONField_1_Out++;

/**
 * [EQGetValidItem_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetValidItem_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetValidItem_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetValidItem_1_tAzureSynapseInput_1 != null) {
		rs_EQGetValidItem_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetValidItem_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetValidItem_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetValidItem_1_tAzureSynapseInput_1 != null && !conn_EQGetValidItem_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetValidItem_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetValidItem_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetValidItem_1_tAzureSynapseInput_1);
	    		log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetValidItem_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetValidItem_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetValidItem_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetValidItem_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetValidItem_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetValidItem_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetValidItem_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetValidItem_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetValidItem_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetValidItem_1_tWriteJSONField_1_Out, format_EQGetValidItem_1_tWriteJSONField_1_Out);
	output_EQGetValidItem_1_tWriteJSONField_1_Out.write(doc_EQGetValidItem_1_tWriteJSONField_1_Out);
    output_EQGetValidItem_1_tWriteJSONField_1_Out.close();
					EQGetValidItem_1_row5Struct row_EQGetValidItem_1_tWriteJSONField_1_Out = new EQGetValidItem_1_row5Struct();
						  
					     		row_EQGetValidItem_1_tWriteJSONField_1_Out.body = strWriter_EQGetValidItem_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out.add(row_EQGetValidItem_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetValidItem_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetValidItem_1_tWriteJSONField_1_Out);
globalMap.put("EQGetValidItem_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetValidItem_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetValidItem_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetValidItem_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetValidItem_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetValidItem_1_row1",2,0,
			 			"EQGetValidItem_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetValidItem_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetValidItem_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetValidItem_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetValidItem_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetValidItem_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetValidItem_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetValidItem_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetValidItem_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetValidItem_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetValidItem_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetValidItem_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetValidItem_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetValidItem_1_tWriteJSONField_1_Out");
	if (future_EQGetValidItem_1_tWriteJSONField_1_Out != null) {
		future_EQGetValidItem_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetValidItem_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetVariantState_1_row1Struct implements routines.system.IPersistableRow<EQGetVariantState_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String ItemID;

				public String getItemID () {
					return this.ItemID;
				}

				public Boolean ItemIDIsNullable(){
				    return true;
				}
				public Boolean ItemIDIsKey(){
				    return false;
				}
				public Integer ItemIDLength(){
				    return null;
				}
				public Integer ItemIDPrecision(){
				    return null;
				}
				public String ItemIDDefault(){
				
					return null;
				
				}
				public String ItemIDComment(){
				
				    return "";
				
				}
				public String ItemIDPattern(){
				
					return "";
				
				}
				public String ItemIDOriginalDbColumnName(){
				
					return "ItemID";
				
				}

				
			    public String VARIANT_STATE;

				public String getVARIANT_STATE () {
					return this.VARIANT_STATE;
				}

				public Boolean VARIANT_STATEIsNullable(){
				    return true;
				}
				public Boolean VARIANT_STATEIsKey(){
				    return false;
				}
				public Integer VARIANT_STATELength(){
				    return null;
				}
				public Integer VARIANT_STATEPrecision(){
				    return null;
				}
				public String VARIANT_STATEDefault(){
				
					return null;
				
				}
				public String VARIANT_STATEComment(){
				
				    return "";
				
				}
				public String VARIANT_STATEPattern(){
				
					return "";
				
				}
				public String VARIANT_STATEOriginalDbColumnName(){
				
					return "VARIANT_STATE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ItemID = readString(dis);
					
					this.VARIANT_STATE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.ItemID = readString(dis);
					
					this.VARIANT_STATE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ItemID,dos);
					
					// String
				
						writeString(this.VARIANT_STATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ItemID,dos);
					
					// String
				
						writeString(this.VARIANT_STATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ItemID="+ItemID);
		sb.append(",VARIANT_STATE="+VARIANT_STATE);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ItemID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ItemID);
            			}
            		
        			sb.append("|");
        		
        				if(VARIANT_STATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VARIANT_STATE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetVariantState_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetVariantState_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetVariantState_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetVariantState_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetVariantState_1_row1Struct EQGetVariantState_1_row1 = new EQGetVariantState_1_row1Struct();




	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetVariantState_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetVariantState_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetVariantState_1_row1");
			
		int tos_count_EQGetVariantState_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetVariantState_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetVariantState_1_tWriteJSONField_1");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetVariantState_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetVariantState_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetVariantState_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetVariantState_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetVariantState_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetVariantState_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetVariantState_1_row5Struct> listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetVariantState_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetVariantState_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetVariantState_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetVariantState_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetVariantState_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetVariantState_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetVariantState_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetVariantState_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetVariantState_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetVariantState_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetVariantState_1_tWriteJSONField_1_Out txf_EQGetVariantState_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetVariantState_1_tWriteJSONField_1_Out(listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetVariantState_1_tWriteJSONField_1_Out = es.submit(txf_EQGetVariantState_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetVariantState_1_tWriteJSONField_1_Out", future_EQGetVariantState_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetVariantState_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetVariantState_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetVariantState_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetVariantState_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetVariantState_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetVariantState_1_tWriteJSONField_1_Out nestXMLTool_EQGetVariantState_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetVariantState_1_tWriteJSONField_1_Out();

EQGetVariantState_1_row1Struct  rowStructOutput_EQGetVariantState_1_tWriteJSONField_1_Out = new EQGetVariantState_1_row1Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetVariantState_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetVariantState_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetVariantState_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetVariantState_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetVariantState_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetVariantState_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetVariantState_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetVariantState_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetVariantState_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetVariantState_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetVariantState_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetVariantState_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetVariantState_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetVariantState_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetVariantState\"");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT TOP 1 ItemID, VARIANT_STATE, SRT FROM  (  SELECT ItemID, VARIANT_STATE, 0 AS SRT  FROM ITG.EQGetVariantState WHERE ItemID = '\"+((String)globalMap.get(\"EQGetVariantState.itemId\"))+\"'  UNION ALL  SELECT '' AS ITEMID, 'NEW' AS VARIANT_STATE, 1 AS SRT  ) A   ORDER BY SRT  ;\"");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ItemID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("VARIANT_STATE")+"}]");
                        log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetVariantState_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetVariantState_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetVariantState_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetVariantState_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetVariantState_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetVariantState_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetVariantState_1_tAzureSynapseInput_1, talendToDBArray_EQGetVariantState_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetVariantState_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetVariantState_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetVariantState_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetVariantState_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetVariantState_1_tAzureSynapseInput_1);
				String dbUser_EQGetVariantState_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetVariantState_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetVariantState_1_tAzureSynapseInput_1 = decryptedPassword_EQGetVariantState_1_tAzureSynapseInput_1;
				
		    String port_EQGetVariantState_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetVariantState_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetVariantState_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetVariantState_1_tAzureSynapseInput_1)) {
		    	url_EQGetVariantState_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetVariantState_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetVariantState_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetVariantState_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetVariantState_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetVariantState_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetVariantState_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetVariantState_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetVariantState_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetVariantState_1_tAzureSynapseInput_1,dbUser_EQGetVariantState_1_tAzureSynapseInput_1,dbPwd_EQGetVariantState_1_tAzureSynapseInput_1);
	    		log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetVariantState_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetVariantState_1_tAzureSynapseInput_1 = conn_EQGetVariantState_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetVariantState_1_tAzureSynapseInput_1 = "SELECT TOP 1 ItemID, VARIANT_STATE, SRT FROM\n(\nSELECT ItemID, VARIANT_STATE, 0 AS SRT\nFROM ITG.EQGetVariantState WHE"
+"RE ItemID = '"+((String)globalMap.get("EQGetVariantState.itemId"))+"'\nUNION ALL\nSELECT '' AS ITEMID, 'NEW' AS VARIANT_STATE, 1 AS SRT\n) A\n ORDER BY SRT\n;";
		    
	    		log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetVariantState_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetVariantState_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetVariantState_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetVariantState_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetVariantState_1_tAzureSynapseInput_1 = stmt_EQGetVariantState_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetVariantState_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetVariantState_1_tAzureSynapseInput_1 = rs_EQGetVariantState_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetVariantState_1_tAzureSynapseInput_1 = rsmd_EQGetVariantState_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetVariantState_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetVariantState_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetVariantState_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetVariantState_1_tAzureSynapseInput_1 < 1) {
								EQGetVariantState_1_row1.ItemID = null;
							} else {
	                         		
           		tmpContent_EQGetVariantState_1_tAzureSynapseInput_1 = rs_EQGetVariantState_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetVariantState_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetVariantState_1_tAzureSynapseInput_1 .contains(rsmd_EQGetVariantState_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetVariantState_1_row1.ItemID = FormatterUtils.formatUnwithE(tmpContent_EQGetVariantState_1_tAzureSynapseInput_1);
            	} else {
                	EQGetVariantState_1_row1.ItemID = tmpContent_EQGetVariantState_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetVariantState_1_row1.ItemID = null;
            }
		                    }
							if(colQtyInRs_EQGetVariantState_1_tAzureSynapseInput_1 < 2) {
								EQGetVariantState_1_row1.VARIANT_STATE = null;
							} else {
	                         		
           		tmpContent_EQGetVariantState_1_tAzureSynapseInput_1 = rs_EQGetVariantState_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetVariantState_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetVariantState_1_tAzureSynapseInput_1 .contains(rsmd_EQGetVariantState_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetVariantState_1_row1.VARIANT_STATE = FormatterUtils.formatUnwithE(tmpContent_EQGetVariantState_1_tAzureSynapseInput_1);
            	} else {
                	EQGetVariantState_1_row1.VARIANT_STATE = tmpContent_EQGetVariantState_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetVariantState_1_row1.VARIANT_STATE = null;
            }
		                    }
					
						log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetVariantState_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetVariantState_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetVariantState_1_tAzureSynapseInput_1++;

/**
 * [EQGetVariantState_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetVariantState_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetVariantState_1_row1","EQGetVariantState_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetVariantState_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetVariantState_1_row1 - " + (EQGetVariantState_1_row1==null? "": EQGetVariantState_1_row1.toLogString()));
    			}
    		

	if(txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetVariantState_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetVariantState_1_tWriteJSONField_1_Out++;
				log.debug("EQGetVariantState_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetVariantState_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetVariantState_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetVariantState_1_tWriteJSONField_1_Out helper_EQGetVariantState_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetVariantState_1_tWriteJSONField_1_Out();

	valueMap_EQGetVariantState_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetVariantState_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetVariantState_1_tWriteJSONField_1_Out.put("ItemID", helper_EQGetVariantState_1_tWriteJSONField_1_Out.toString(
	(
		EQGetVariantState_1_row1.ItemID != null?
            EQGetVariantState_1_row1.ItemID.toString():null
		)));
	arraysValueMap_EQGetVariantState_1_tWriteJSONField_1_Out.put("ItemID", helper_EQGetVariantState_1_tWriteJSONField_1_Out.toString(
	(
		EQGetVariantState_1_row1.ItemID != null?
            EQGetVariantState_1_row1.ItemID.toString():null
		)));
	valueMap_EQGetVariantState_1_tWriteJSONField_1_Out.put("VARIANT_STATE", helper_EQGetVariantState_1_tWriteJSONField_1_Out.toString(
	(
		EQGetVariantState_1_row1.VARIANT_STATE != null?
            EQGetVariantState_1_row1.VARIANT_STATE.toString():null
		)));
	arraysValueMap_EQGetVariantState_1_tWriteJSONField_1_Out.put("VARIANT_STATE", helper_EQGetVariantState_1_tWriteJSONField_1_Out.toString(
	(
		EQGetVariantState_1_row1.VARIANT_STATE != null?
            EQGetVariantState_1_row1.VARIANT_STATE.toString():null
		)));
		String strTemp_EQGetVariantState_1_tWriteJSONField_1_Out = "";
	if(strCompCache_EQGetVariantState_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetVariantState_1_tWriteJSONField_1_Out=strTemp_EQGetVariantState_1_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_EQGetVariantState_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetVariantState_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetVariantState_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetVariantState_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetVariantState_1_tWriteJSONField_1_Out, format_EQGetVariantState_1_tWriteJSONField_1_Out);
			output_EQGetVariantState_1_tWriteJSONField_1_Out.write(doc_EQGetVariantState_1_tWriteJSONField_1_Out);
		    output_EQGetVariantState_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetVariantState_1_row5Struct row_EQGetVariantState_1_tWriteJSONField_1_Out = new EQGetVariantState_1_row5Struct();
						  
					     		row_EQGetVariantState_1_tWriteJSONField_1_Out.body = strWriter_EQGetVariantState_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out.add(row_EQGetVariantState_1_tWriteJSONField_1_Out);
					
		    doc_EQGetVariantState_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetVariantState_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetVariantState_1_tWriteJSONField_1_Out=0;i_EQGetVariantState_1_tWriteJSONField_1_Out<orders_EQGetVariantState_1_tWriteJSONField_1_Out.length;i_EQGetVariantState_1_tWriteJSONField_1_Out++){
				orders_EQGetVariantState_1_tWriteJSONField_1_Out[i_EQGetVariantState_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetVariantState_1_tWriteJSONField_1_Out != null && groupbyList_EQGetVariantState_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetVariantState_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetVariantState_1_tWriteJSONField_1_Out=strTemp_EQGetVariantState_1_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_EQGetVariantState_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetVariantState_1_tWriteJSONField_1_Out) {
		needRoot_EQGetVariantState_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetVariantState_1_tWriteJSONField_1_Out = doc_EQGetVariantState_1_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_EQGetVariantState_1_tWriteJSONField_1_Out = root_EQGetVariantState_1_tWriteJSONField_1_Out;
		root4Group_EQGetVariantState_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetVariantState_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetVariantState_1_tWriteJSONField_1_Out=root4Group_EQGetVariantState_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetVariantState_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("VARIANT_STATE");
        if(orders_EQGetVariantState_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetVariantState_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetVariantState_1_tWriteJSONField_1_Out.length){
        		orders_EQGetVariantState_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetVariantState_1_tWriteJSONField_1_Out.elements().add(orders_EQGetVariantState_1_tWriteJSONField_1_Out[0]++,loop_EQGetVariantState_1_tWriteJSONField_1_Out);
		if(
		valueMap_EQGetVariantState_1_tWriteJSONField_1_Out.get("VARIANT_STATE")!=null){
			nestXMLTool_EQGetVariantState_1_tWriteJSONField_1_Out .setText(loop_EQGetVariantState_1_tWriteJSONField_1_Out,
		valueMap_EQGetVariantState_1_tWriteJSONField_1_Out.get("VARIANT_STATE"));
		}

 


	tos_count_EQGetVariantState_1_tWriteJSONField_1_Out++;

/**
 * [EQGetVariantState_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_Out process_data_end ] stop
 */



	
	/**
	 * [EQGetVariantState_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetVariantState_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetVariantState_1_tAzureSynapseInput_1 != null) {
		rs_EQGetVariantState_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetVariantState_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetVariantState_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetVariantState_1_tAzureSynapseInput_1 != null && !conn_EQGetVariantState_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetVariantState_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetVariantState_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetVariantState_1_tAzureSynapseInput_1);
	    		log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetVariantState_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetVariantState_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetVariantState_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetVariantState_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetVariantState_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetVariantState_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetVariantState_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetVariantState_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetVariantState_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetVariantState_1_tWriteJSONField_1_Out, format_EQGetVariantState_1_tWriteJSONField_1_Out);
	output_EQGetVariantState_1_tWriteJSONField_1_Out.write(doc_EQGetVariantState_1_tWriteJSONField_1_Out);
    output_EQGetVariantState_1_tWriteJSONField_1_Out.close();
					EQGetVariantState_1_row5Struct row_EQGetVariantState_1_tWriteJSONField_1_Out = new EQGetVariantState_1_row5Struct();
						  
					     		row_EQGetVariantState_1_tWriteJSONField_1_Out.body = strWriter_EQGetVariantState_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out.add(row_EQGetVariantState_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetVariantState_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetVariantState_1_tWriteJSONField_1_Out);
globalMap.put("EQGetVariantState_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetVariantState_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetVariantState_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetVariantState_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetVariantState_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetVariantState_1_row1",2,0,
			 			"EQGetVariantState_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetVariantState_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetVariantState_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetVariantState_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetVariantState_1_tWriteJSONField_1_Out end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetVariantState_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetVariantState_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetVariantState_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetVariantState_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetVariantState_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetVariantState_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetVariantState_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetVariantState_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetVariantState_1_tWriteJSONField_1_Out");
	if (future_EQGetVariantState_1_tWriteJSONField_1_Out != null) {
		future_EQGetVariantState_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_Out finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetVariantState_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetSkinORPart_1_outItemsStruct implements routines.system.IPersistableRow<EQGetSkinORPart_1_outItemsStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String Items;

				public String getItems () {
					return this.Items;
				}

				public Boolean ItemsIsNullable(){
				    return true;
				}
				public Boolean ItemsIsKey(){
				    return false;
				}
				public Integer ItemsLength(){
				    return null;
				}
				public Integer ItemsPrecision(){
				    return null;
				}
				public String ItemsDefault(){
				
					return null;
				
				}
				public String ItemsComment(){
				
				    return "";
				
				}
				public String ItemsPattern(){
				
					return "";
				
				}
				public String ItemsOriginalDbColumnName(){
				
					return "Items";
				
				}

				
			    public String Value;

				public String getValue () {
					return this.Value;
				}

				public Boolean ValueIsNullable(){
				    return true;
				}
				public Boolean ValueIsKey(){
				    return false;
				}
				public Integer ValueLength(){
				    return null;
				}
				public Integer ValuePrecision(){
				    return null;
				}
				public String ValueDefault(){
				
					return null;
				
				}
				public String ValueComment(){
				
				    return "";
				
				}
				public String ValuePattern(){
				
					return "";
				
				}
				public String ValueOriginalDbColumnName(){
				
					return "Value";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Items = readString(dis);
					
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Items = readString(dis);
					
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Items,dos);
					
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Items,dos);
					
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Items="+Items);
		sb.append(",Value="+Value);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Items == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Items);
            			}
            		
        			sb.append("|");
        		
        				if(Value == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Value);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSkinORPart_1_outItemsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetSkinORPart_1_row1Struct implements routines.system.IPersistableRow<EQGetSkinORPart_1_row1Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String Value;

				public String getValue () {
					return this.Value;
				}

				public Boolean ValueIsNullable(){
				    return true;
				}
				public Boolean ValueIsKey(){
				    return false;
				}
				public Integer ValueLength(){
				    return null;
				}
				public Integer ValuePrecision(){
				    return null;
				}
				public String ValueDefault(){
				
					return null;
				
				}
				public String ValueComment(){
				
				    return "";
				
				}
				public String ValuePattern(){
				
					return "";
				
				}
				public String ValueOriginalDbColumnName(){
				
					return "Value";
				
				}

				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}

				public Boolean DescriptionIsNullable(){
				    return true;
				}
				public Boolean DescriptionIsKey(){
				    return false;
				}
				public Integer DescriptionLength(){
				    return null;
				}
				public Integer DescriptionPrecision(){
				    return null;
				}
				public String DescriptionDefault(){
				
					return null;
				
				}
				public String DescriptionComment(){
				
				    return "";
				
				}
				public String DescriptionPattern(){
				
					return "";
				
				}
				public String DescriptionOriginalDbColumnName(){
				
					return "Description";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.Value = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Value,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Value="+Value);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Value == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Value);
            			}
            		
        			sb.append("|");
        		
        				if(Description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Description);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSkinORPart_1_row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetSkinORPart_1_tAzureSynapseInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetSkinORPart_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetSkinORPart_1_tAzureSynapseInput_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetSkinORPart_1_row1Struct EQGetSkinORPart_1_row1 = new EQGetSkinORPart_1_row1Struct();
EQGetSkinORPart_1_outItemsStruct EQGetSkinORPart_1_outItems = new EQGetSkinORPart_1_outItemsStruct();





	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_Out", false);
		start_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSkinORPart_1_outItems");
			
		int tos_count_EQGetSkinORPart_1_tWriteJSONField_1_Out = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tWriteJSONField_1_Out - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSkinORPart_1_tWriteJSONField_1_Out{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out = new StringBuilder();
                    log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("Parameters:");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("Items")+"}]");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("REMOVE_HEADER" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("CREATE" + " = " + "true");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("CREATE_EMPTY_ELEMENT" + " = " + "true");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("EXPAND_EMPTY_ELM" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("OUTPUT_AS_XSD" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("ADVANCED_SEPARATOR" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("COMPACT_FORMAT" + " = " + "true");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("GENERATION_MODE" + " = " + "Dom4j");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("ENCODING" + " = " + "\"ISO-8859-15\"");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append("DESTINATION" + " = " + "EQGetSkinORPart_1_tWriteJSONField_1");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tWriteJSONField_1_Out - "  + (log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_Out) );
                    } 
                } 
            new BytesLimit65535_EQGetSkinORPart_1_tWriteJSONField_1_Out().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSkinORPart_1_tWriteJSONField_1_Out", "tWriteJSONField_1_Out", "tWriteXMLFieldOut");
				talendJobLogProcess(globalMap);
			}
			
//tWriteXMLFieldOut_begin
				int nb_line_EQGetSkinORPart_1_tWriteJSONField_1_Out = 0;
				boolean needRoot_EQGetSkinORPart_1_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_EQGetSkinORPart_1_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<EQGetSkinORPart_1_row5Struct> listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<EQGetSkinORPart_1_row5Struct>();
							
	
					class ThreadXMLField_EQGetSkinORPart_1_tWriteJSONField_1_Out implements java.lang.Runnable {
						
									    java.util.Queue<EQGetSkinORPart_1_row5Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_EQGetSkinORPart_1_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_EQGetSkinORPart_1_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_EQGetSkinORPart_1_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_EQGetSkinORPart_1_tWriteJSONField_1_In", queue);
							globalMap.put("flows_EQGetSkinORPart_1_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								EQGetSkinORPart_1_tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_Out_ERROR_MESSAGE",te.getMessage());
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_EQGetSkinORPart_1_tWriteJSONField_1_Out txf_EQGetSkinORPart_1_tWriteJSONField_1_Out = new ThreadXMLField_EQGetSkinORPart_1_tWriteJSONField_1_Out(listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out);
					
					
					java.util.concurrent.Future<?> future_EQGetSkinORPart_1_tWriteJSONField_1_Out = es.submit(txf_EQGetSkinORPart_1_tWriteJSONField_1_Out);
					globalMap.put("wrtXMLFieldIn_EQGetSkinORPart_1_tWriteJSONField_1_Out", future_EQGetSkinORPart_1_tWriteJSONField_1_Out);
				

java.util.List<java.util.List<String>> groupbyList_EQGetSkinORPart_1_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_Out_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}

            boolean noSignificantDataAnnotationsExist = root.attributes().isEmpty() ;
            if (root.content().isEmpty()
                && noSignificantDataAnnotationsExist && root.declaredNamespaces().isEmpty()) {
                if(root.getParent()!=null){
                    root.getParent().remove(root);
                }
            }
        }
    }
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out nestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out = new NestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out();

EQGetSkinORPart_1_outItemsStruct  rowStructOutput_EQGetSkinORPart_1_tWriteJSONField_1_Out = new EQGetSkinORPart_1_outItemsStruct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_EQGetSkinORPart_1_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_EQGetSkinORPart_1_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_EQGetSkinORPart_1_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_EQGetSkinORPart_1_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_EQGetSkinORPart_1_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_EQGetSkinORPart_1_tWriteJSONField_1_Out.setTrimText(false);
format_EQGetSkinORPart_1_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_EQGetSkinORPart_1_tWriteJSONField_1_Out = new int[1];

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [EQGetSkinORPart_1_tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSkinORPart_1_tMap_1", false);
		start_Hash.put("EQGetSkinORPart_1_tMap_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetSkinORPart_1_tMap_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSkinORPart_1_row1");
			
		int tos_count_EQGetSkinORPart_1_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSkinORPart_1_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSkinORPart_1_tMap_1 = new StringBuilder();
                    log4jParamters_EQGetSkinORPart_1_tMap_1.append("Parameters:");
                            log4jParamters_EQGetSkinORPart_1_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_EQGetSkinORPart_1_tMap_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_EQGetSkinORPart_1_tMap_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_EQGetSkinORPart_1_tMap_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_EQGetSkinORPart_1_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tMap_1 - "  + (log4jParamters_EQGetSkinORPart_1_tMap_1) );
                    } 
                } 
            new BytesLimit65535_EQGetSkinORPart_1_tMap_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSkinORPart_1_tMap_1", "tMap_1", "tMap");
				talendJobLogProcess(globalMap);
			}
			




// ###############################
// # Lookup's keys initialization
		int count_EQGetSkinORPart_1_row1_EQGetSkinORPart_1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
// ###############################

// ###############################
// # Outputs initialization
				int count_EQGetSkinORPart_1_outItems_EQGetSkinORPart_1_tMap_1 = 0;
				
EQGetSkinORPart_1_outItemsStruct EQGetSkinORPart_1_outItems_tmp = new EQGetSkinORPart_1_outItemsStruct();
// ###############################

        
        



        









 



/**
 * [EQGetSkinORPart_1_tMap_1 begin ] stop
 */



	
	/**
	 * [EQGetSkinORPart_1_tAzureSynapseInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSkinORPart_1_tAzureSynapseInput_1", false);
		start_Hash.put("EQGetSkinORPart_1_tAzureSynapseInput_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetSkinORPart_1_tAzureSynapseInput_1";
	
	
		int tos_count_EQGetSkinORPart_1_tAzureSynapseInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSkinORPart_1_tAzureSynapseInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1 = new StringBuilder();
                    log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("Parameters:");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("HOST" + " = " + "context.Azure_DW_Server");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("PORT" + " = " + "\"1433\"");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("DB_SCHEMA" + " = " + "context.Azure_DW_Schema");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("DBNAME" + " = " + "context.Azure_DW_DB");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("USER" + " = " + "context.Azure_DW_User");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Azure_DW_Password)).substring(0, 4) + "...");     
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("TABLE" + " = " + "\"EQGetItemDesc\"");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("QUERY" + " = " + "\"SELECT Value,Description FROM ITG.EQGetSkinORPart WHERE ITEMID LIKE '\" + ((String)globalMap.get(\"EQGetSkinORPart.itemId\"))+ \"%' ORDER BY ITEMID;\"");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("Value")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("Description")+"}]");
                        log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - "  + (log4jParamters_EQGetSkinORPart_1_tAzureSynapseInput_1) );
                    } 
                } 
            new BytesLimit65535_EQGetSkinORPart_1_tAzureSynapseInput_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSkinORPart_1_tAzureSynapseInput_1", "tAzureSynapseInput_1", "tAzureSynapseInput");
				talendJobLogProcess(globalMap);
			}
			
	
   
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_EQGetSkinORPart_1_tAzureSynapseInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_EQGetSkinORPart_1_tAzureSynapseInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_EQGetSkinORPart_1_tAzureSynapseInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_EQGetSkinORPart_1_tAzureSynapseInput_1, talendToDBArray_EQGetSkinORPart_1_tAzureSynapseInput_1); 
		    int nb_line_EQGetSkinORPart_1_tAzureSynapseInput_1 = 0;
		    java.sql.Connection conn_EQGetSkinORPart_1_tAzureSynapseInput_1 = null;
				String driverClass_EQGetSkinORPart_1_tAzureSynapseInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_EQGetSkinORPart_1_tAzureSynapseInput_1 = java.lang.Class.forName(driverClass_EQGetSkinORPart_1_tAzureSynapseInput_1);
				String dbUser_EQGetSkinORPart_1_tAzureSynapseInput_1 = context.Azure_DW_User;
				
				
	final String decryptedPassword_EQGetSkinORPart_1_tAzureSynapseInput_1 = context.Azure_DW_Password; 
				
				String dbPwd_EQGetSkinORPart_1_tAzureSynapseInput_1 = decryptedPassword_EQGetSkinORPart_1_tAzureSynapseInput_1;
				
		    String port_EQGetSkinORPart_1_tAzureSynapseInput_1 = "1433";
		    String dbname_EQGetSkinORPart_1_tAzureSynapseInput_1 = context.Azure_DW_DB ;		    
		    String url_EQGetSkinORPart_1_tAzureSynapseInput_1 = "jdbc:sqlserver://" + context.Azure_DW_Server ;
		    if (!"".equals(port_EQGetSkinORPart_1_tAzureSynapseInput_1)) {
		    	url_EQGetSkinORPart_1_tAzureSynapseInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_EQGetSkinORPart_1_tAzureSynapseInput_1)) {		    
		    	url_EQGetSkinORPart_1_tAzureSynapseInput_1 += ";databaseName=" + context.Azure_DW_DB; 
		    }
		    url_EQGetSkinORPart_1_tAzureSynapseInput_1 += ";applicationName=Talend;" + "noDatetimeStringSync=true";
		    String dbschema_EQGetSkinORPart_1_tAzureSynapseInput_1 = context.Azure_DW_Schema;
				
	    		log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Driver ClassName: "+driverClass_EQGetSkinORPart_1_tAzureSynapseInput_1+".");
			
	    		log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Connection attempt to '" + url_EQGetSkinORPart_1_tAzureSynapseInput_1 + "' with the username '" + dbUser_EQGetSkinORPart_1_tAzureSynapseInput_1 + "'.");
			
				conn_EQGetSkinORPart_1_tAzureSynapseInput_1 = java.sql.DriverManager.getConnection(url_EQGetSkinORPart_1_tAzureSynapseInput_1,dbUser_EQGetSkinORPart_1_tAzureSynapseInput_1,dbPwd_EQGetSkinORPart_1_tAzureSynapseInput_1);
	    		log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Connection to '" + url_EQGetSkinORPart_1_tAzureSynapseInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_EQGetSkinORPart_1_tAzureSynapseInput_1 = conn_EQGetSkinORPart_1_tAzureSynapseInput_1.createStatement();

		    String dbquery_EQGetSkinORPart_1_tAzureSynapseInput_1 = "SELECT Value,Description FROM ITG.EQGetSkinORPart WHERE ITEMID LIKE '" + ((String)globalMap.get("EQGetSkinORPart.itemId"))+ "%' ORDER BY ITEMID;";
		    
	    		log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Executing the query: '" + dbquery_EQGetSkinORPart_1_tAzureSynapseInput_1 + "'.");
			

            	globalMap.put("EQGetSkinORPart_1_tAzureSynapseInput_1_QUERY",dbquery_EQGetSkinORPart_1_tAzureSynapseInput_1);
		    java.sql.ResultSet rs_EQGetSkinORPart_1_tAzureSynapseInput_1 = null;

		    try {
		    	rs_EQGetSkinORPart_1_tAzureSynapseInput_1 = stmt_EQGetSkinORPart_1_tAzureSynapseInput_1.executeQuery(dbquery_EQGetSkinORPart_1_tAzureSynapseInput_1);
		    	java.sql.ResultSetMetaData rsmd_EQGetSkinORPart_1_tAzureSynapseInput_1 = rs_EQGetSkinORPart_1_tAzureSynapseInput_1.getMetaData();
		    	int colQtyInRs_EQGetSkinORPart_1_tAzureSynapseInput_1 = rsmd_EQGetSkinORPart_1_tAzureSynapseInput_1.getColumnCount();

		    String tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1 = null;
		    
		    
		    	log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Retrieving records from the database.");
		    
		    while (rs_EQGetSkinORPart_1_tAzureSynapseInput_1.next()) {
		        nb_line_EQGetSkinORPart_1_tAzureSynapseInput_1++;
		        
							if(colQtyInRs_EQGetSkinORPart_1_tAzureSynapseInput_1 < 1) {
								EQGetSkinORPart_1_row1.Value = null;
							} else {
	                         		
           		tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1 = rs_EQGetSkinORPart_1_tAzureSynapseInput_1.getString(1);
            if(tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetSkinORPart_1_tAzureSynapseInput_1 .contains(rsmd_EQGetSkinORPart_1_tAzureSynapseInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetSkinORPart_1_row1.Value = FormatterUtils.formatUnwithE(tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1);
            	} else {
                	EQGetSkinORPart_1_row1.Value = tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetSkinORPart_1_row1.Value = null;
            }
		                    }
							if(colQtyInRs_EQGetSkinORPart_1_tAzureSynapseInput_1 < 2) {
								EQGetSkinORPart_1_row1.Description = null;
							} else {
	                         		
           		tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1 = rs_EQGetSkinORPart_1_tAzureSynapseInput_1.getString(2);
            if(tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1 != null) {
            	if (talendToDBList_EQGetSkinORPart_1_tAzureSynapseInput_1 .contains(rsmd_EQGetSkinORPart_1_tAzureSynapseInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		EQGetSkinORPart_1_row1.Description = FormatterUtils.formatUnwithE(tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1);
            	} else {
                	EQGetSkinORPart_1_row1.Description = tmpContent_EQGetSkinORPart_1_tAzureSynapseInput_1;
                }
            } else {
                EQGetSkinORPart_1_row1.Description = null;
            }
		                    }
					
						log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Retrieving the record " + nb_line_EQGetSkinORPart_1_tAzureSynapseInput_1 + ".");
					





 



/**
 * [EQGetSkinORPart_1_tAzureSynapseInput_1 begin ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tAzureSynapseInput_1 main ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tAzureSynapseInput_1";
	
	

 


	tos_count_EQGetSkinORPart_1_tAzureSynapseInput_1++;

/**
 * [EQGetSkinORPart_1_tAzureSynapseInput_1 main ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tAzureSynapseInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tAzureSynapseInput_1 process_data_begin ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tMap_1 main ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tMap_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSkinORPart_1_row1","EQGetSkinORPart_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetSkinORPart_1_tMap_1","tMap_1","tMap"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSkinORPart_1_row1 - " + (EQGetSkinORPart_1_row1==null? "": EQGetSkinORPart_1_row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_EQGetSkinORPart_1_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_EQGetSkinORPart_1_tMap_1 = false;
		boolean mainRowRejected_EQGetSkinORPart_1_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        // ###############################
        // ###############################
        // # Output tables

EQGetSkinORPart_1_outItems = null;


// # Output table : 'EQGetSkinORPart_1_outItems'
count_EQGetSkinORPart_1_outItems_EQGetSkinORPart_1_tMap_1++;

EQGetSkinORPart_1_outItems_tmp.Items = "X";
EQGetSkinORPart_1_outItems_tmp.Value = EQGetSkinORPart_1_row1.Value ;
EQGetSkinORPart_1_outItems_tmp.Description = EQGetSkinORPart_1_row1.Description ;
EQGetSkinORPart_1_outItems = EQGetSkinORPart_1_outItems_tmp;
log.debug("EQGetSkinORPart_1_tMap_1 - Outputting the record " + count_EQGetSkinORPart_1_outItems_EQGetSkinORPart_1_tMap_1 + " of the output table 'EQGetSkinORPart_1_outItems'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_EQGetSkinORPart_1_tMap_1 = false;










 


	tos_count_EQGetSkinORPart_1_tMap_1++;

/**
 * [EQGetSkinORPart_1_tMap_1 main ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tMap_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tMap_1 process_data_begin ] stop
 */
// Start of branch "EQGetSkinORPart_1_outItems"
if(EQGetSkinORPart_1_outItems != null) { 



	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSkinORPart_1_outItems","EQGetSkinORPart_1_tMap_1","tMap_1","tMap","EQGetSkinORPart_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSkinORPart_1_outItems - " + (EQGetSkinORPart_1_outItems==null? "": EQGetSkinORPart_1_outItems.toLogString()));
    			}
    		

	if(txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_EQGetSkinORPart_1_tWriteJSONField_1_Out++;
				log.debug("EQGetSkinORPart_1_tWriteJSONField_1_Out - Processing the record " + nb_line_EQGetSkinORPart_1_tWriteJSONField_1_Out + ".");
			
	class ToStringHelper_EQGetSkinORPart_1_tWriteJSONField_1_Out {
	    public String toString(final Object value) {
	        return value != null ? value.toString() : null;
	    }
	}
	final ToStringHelper_EQGetSkinORPart_1_tWriteJSONField_1_Out helper_EQGetSkinORPart_1_tWriteJSONField_1_Out = new ToStringHelper_EQGetSkinORPart_1_tWriteJSONField_1_Out();

	valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.clear();
	arraysValueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.clear();
	valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.put("Items", helper_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString(
	(
		EQGetSkinORPart_1_outItems.Items != null?
            EQGetSkinORPart_1_outItems.Items.toString():null
		)));
	arraysValueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.put("Items", helper_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString(
	(
		EQGetSkinORPart_1_outItems.Items != null?
            EQGetSkinORPart_1_outItems.Items.toString():null
		)));
	valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.put("Value", helper_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString(
	(
		EQGetSkinORPart_1_outItems.Value != null?
            EQGetSkinORPart_1_outItems.Value.toString():null
		)));
	arraysValueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.put("Value", helper_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString(
	(
		EQGetSkinORPart_1_outItems.Value != null?
            EQGetSkinORPart_1_outItems.Value.toString():null
		)));
	valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.put("Description", helper_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString(
	(
		EQGetSkinORPart_1_outItems.Description != null?
            EQGetSkinORPart_1_outItems.Description.toString():null
		)));
	arraysValueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.put("Description", helper_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString(
	(
		EQGetSkinORPart_1_outItems.Description != null?
            EQGetSkinORPart_1_outItems.Description.toString():null
		)));
		String strTemp_EQGetSkinORPart_1_tWriteJSONField_1_Out = "";		strTemp_EQGetSkinORPart_1_tWriteJSONField_1_Out = strTemp_EQGetSkinORPart_1_tWriteJSONField_1_Out + valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.get("Items")
							+ valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.get("Items").length();
	if(strCompCache_EQGetSkinORPart_1_tWriteJSONField_1_Out==null){
		strCompCache_EQGetSkinORPart_1_tWriteJSONField_1_Out=strTemp_EQGetSkinORPart_1_tWriteJSONField_1_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_EQGetSkinORPart_1_tWriteJSONField_1_Out.equals(strTemp_EQGetSkinORPart_1_tWriteJSONField_1_Out)){	  
    		nestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetSkinORPart_1_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_EQGetSkinORPart_1_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_EQGetSkinORPart_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetSkinORPart_1_tWriteJSONField_1_Out, format_EQGetSkinORPart_1_tWriteJSONField_1_Out);
			output_EQGetSkinORPart_1_tWriteJSONField_1_Out.write(doc_EQGetSkinORPart_1_tWriteJSONField_1_Out);
		    output_EQGetSkinORPart_1_tWriteJSONField_1_Out.close();
			
				  		  EQGetSkinORPart_1_row5Struct row_EQGetSkinORPart_1_tWriteJSONField_1_Out = new EQGetSkinORPart_1_row5Struct();
						  
					     		row_EQGetSkinORPart_1_tWriteJSONField_1_Out.body = strWriter_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out.add(row_EQGetSkinORPart_1_tWriteJSONField_1_Out);
					
		    doc_EQGetSkinORPart_1_tWriteJSONField_1_Out.clearContent();
			needRoot_EQGetSkinORPart_1_tWriteJSONField_1_Out = true;
			for(int i_EQGetSkinORPart_1_tWriteJSONField_1_Out=0;i_EQGetSkinORPart_1_tWriteJSONField_1_Out<orders_EQGetSkinORPart_1_tWriteJSONField_1_Out.length;i_EQGetSkinORPart_1_tWriteJSONField_1_Out++){
				orders_EQGetSkinORPart_1_tWriteJSONField_1_Out[i_EQGetSkinORPart_1_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_EQGetSkinORPart_1_tWriteJSONField_1_Out != null && groupbyList_EQGetSkinORPart_1_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_EQGetSkinORPart_1_tWriteJSONField_1_Out.clear();
			}
			strCompCache_EQGetSkinORPart_1_tWriteJSONField_1_Out=strTemp_EQGetSkinORPart_1_tWriteJSONField_1_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_EQGetSkinORPart_1_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_EQGetSkinORPart_1_tWriteJSONField_1_Out) {
		needRoot_EQGetSkinORPart_1_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_EQGetSkinORPart_1_tWriteJSONField_1_Out = doc_EQGetSkinORPart_1_tWriteJSONField_1_Out.addElement("Items");
		subTreeRootParent_EQGetSkinORPart_1_tWriteJSONField_1_Out = root_EQGetSkinORPart_1_tWriteJSONField_1_Out;
		root4Group_EQGetSkinORPart_1_tWriteJSONField_1_Out = subTreeRootParent_EQGetSkinORPart_1_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_EQGetSkinORPart_1_tWriteJSONField_1_Out=root4Group_EQGetSkinORPart_1_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_EQGetSkinORPart_1_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("Items");
        if(orders_EQGetSkinORPart_1_tWriteJSONField_1_Out[0]==0){
        	orders_EQGetSkinORPart_1_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_EQGetSkinORPart_1_tWriteJSONField_1_Out.length){
        		orders_EQGetSkinORPart_1_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_EQGetSkinORPart_1_tWriteJSONField_1_Out.elements().add(orders_EQGetSkinORPart_1_tWriteJSONField_1_Out[0]++,loop_EQGetSkinORPart_1_tWriteJSONField_1_Out);
		org.dom4j.Element loop_0_EQGetSkinORPart_1_tWriteJSONField_1_Out = loop_EQGetSkinORPart_1_tWriteJSONField_1_Out.addElement("Value");
		if(
		valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.get("Value")!=null){
			nestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out .setText(loop_0_EQGetSkinORPart_1_tWriteJSONField_1_Out,
		valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.get("Value"));
		}
		org.dom4j.Element loop_1_EQGetSkinORPart_1_tWriteJSONField_1_Out = loop_EQGetSkinORPart_1_tWriteJSONField_1_Out.addElement("Description");
		if(
		valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.get("Description")!=null){
			nestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out .setText(loop_1_EQGetSkinORPart_1_tWriteJSONField_1_Out,
		valueMap_EQGetSkinORPart_1_tWriteJSONField_1_Out.get("Description"));
		}

 


	tos_count_EQGetSkinORPart_1_tWriteJSONField_1_Out++;

/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_Out process_data_end ] stop
 */

} // End of branch "EQGetSkinORPart_1_outItems"




	
	/**
	 * [EQGetSkinORPart_1_tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tMap_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tMap_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetSkinORPart_1_tAzureSynapseInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tAzureSynapseInput_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tAzureSynapseInput_1 end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tAzureSynapseInput_1";
	
	

	}
}finally{
	if (rs_EQGetSkinORPart_1_tAzureSynapseInput_1 != null) {
		rs_EQGetSkinORPart_1_tAzureSynapseInput_1.close();
	}
	if (stmt_EQGetSkinORPart_1_tAzureSynapseInput_1 != null) {
		stmt_EQGetSkinORPart_1_tAzureSynapseInput_1.close();
	}
		if(conn_EQGetSkinORPart_1_tAzureSynapseInput_1 != null && !conn_EQGetSkinORPart_1_tAzureSynapseInput_1.isClosed()) {
			
	    		log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Closing the connection to the database.");
			
			conn_EQGetSkinORPart_1_tAzureSynapseInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("EQGetSkinORPart_1_tAzureSynapseInput_1_NB_LINE",nb_line_EQGetSkinORPart_1_tAzureSynapseInput_1);
	    		log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - Retrieved records count: "+nb_line_EQGetSkinORPart_1_tAzureSynapseInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tAzureSynapseInput_1 - "  + ("Done.") );

ok_Hash.put("EQGetSkinORPart_1_tAzureSynapseInput_1", true);
end_Hash.put("EQGetSkinORPart_1_tAzureSynapseInput_1", System.currentTimeMillis());




/**
 * [EQGetSkinORPart_1_tAzureSynapseInput_1 end ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tMap_1 end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("EQGetSkinORPart_1_tMap_1 - Written records count in the table 'EQGetSkinORPart_1_outItems': " + count_EQGetSkinORPart_1_outItems_EQGetSkinORPart_1_tMap_1 + ".");





			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSkinORPart_1_row1",2,0,
			 			"EQGetSkinORPart_1_tAzureSynapseInput_1","tAzureSynapseInput_1","tAzureSynapseInput","EQGetSkinORPart_1_tMap_1","tMap_1","tMap","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tMap_1 - "  + ("Done.") );

ok_Hash.put("EQGetSkinORPart_1_tMap_1", true);
end_Hash.put("EQGetSkinORPart_1_tMap_1", System.currentTimeMillis());




/**
 * [EQGetSkinORPart_1_tMap_1 end ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	

if(nb_line_EQGetSkinORPart_1_tWriteJSONField_1_Out > 0){  
    nestXMLTool_EQGetSkinORPart_1_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_EQGetSkinORPart_1_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_EQGetSkinORPart_1_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_EQGetSkinORPart_1_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_EQGetSkinORPart_1_tWriteJSONField_1_Out, format_EQGetSkinORPart_1_tWriteJSONField_1_Out);
	output_EQGetSkinORPart_1_tWriteJSONField_1_Out.write(doc_EQGetSkinORPart_1_tWriteJSONField_1_Out);
    output_EQGetSkinORPart_1_tWriteJSONField_1_Out.close();
					EQGetSkinORPart_1_row5Struct row_EQGetSkinORPart_1_tWriteJSONField_1_Out = new EQGetSkinORPart_1_row5Struct();
						  
					     		row_EQGetSkinORPart_1_tWriteJSONField_1_Out.body = strWriter_EQGetSkinORPart_1_tWriteJSONField_1_Out.toString();
					     		listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out.add(row_EQGetSkinORPart_1_tWriteJSONField_1_Out);
		    		

}
globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_Out_NB_LINE",nb_line_EQGetSkinORPart_1_tWriteJSONField_1_Out);
globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out.hashCode()), "true");
	
		future_EQGetSkinORPart_1_tWriteJSONField_1_Out.get();
		
		if(txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_EQGetSkinORPart_1_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_EQGetSkinORPart_1_tWriteJSONField_1_Out", true);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSkinORPart_1_outItems",2,0,
			 			"EQGetSkinORPart_1_tMap_1","tMap_1","tMap","EQGetSkinORPart_1_tWriteJSONField_1_Out","tWriteJSONField_1_Out","tWriteXMLFieldOut","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tWriteJSONField_1_Out - "  + ("Done.") );

ok_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_Out", true);
end_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetSkinORPart_1_tAzureSynapseInput_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tAzureSynapseInput_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tAzureSynapseInput_1 finally ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tMap_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tMap_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tMap_1 finally ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_Out";
	
	

		java.util.Queue listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_EQGetSkinORPart_1_tWriteJSONField_1_In");
		if(resourceMap.get("finish_EQGetSkinORPart_1_tWriteJSONField_1_Out") == null){
			globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out != null) {
		globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_In_FINISH" + (listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out==null?"":listGroupby_EQGetSkinORPart_1_tWriteJSONField_1_Out.hashCode()), "true");
	}
	// workaround for 37349 - in case of normal execution it will pass normally
	// in case it fails and handle by catch - it will wait for child thread finish
	java.util.concurrent.Future<?> future_EQGetSkinORPart_1_tWriteJSONField_1_Out = (java.util.concurrent.Future) globalMap.get("wrtXMLFieldIn_EQGetSkinORPart_1_tWriteJSONField_1_Out");
	if (future_EQGetSkinORPart_1_tWriteJSONField_1_Out != null) {
		future_EQGetSkinORPart_1_tWriteJSONField_1_Out.get();
	}

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetSkinORPart_1_tAzureSynapseInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class errorHandlingRestResponse_1_row4Struct implements routines.system.IPersistableRow<errorHandlingRestResponse_1_row4Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(errorHandlingRestResponse_1_row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class errorHandlingRestResponse_1_row3Struct implements routines.system.IPersistableRow<errorHandlingRestResponse_1_row3Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(errorHandlingRestResponse_1_row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void errorHandlingRestResponse_1_tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("errorHandlingRestResponse_1_tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "errorHandlingRestResponse_1_tLogCatcher_1");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		errorHandlingRestResponse_1_row3Struct errorHandlingRestResponse_1_row3 = new errorHandlingRestResponse_1_row3Struct();
errorHandlingRestResponse_1_row4Struct errorHandlingRestResponse_1_row4 = new errorHandlingRestResponse_1_row4Struct();




	
	/**
	 * [errorHandlingRestResponse_1_tFlowToIterate_3 begin ] start
	 */

				
			int NB_ITERATE_errorHandlingRestResponse_1_tFixedFlowInput_1 = 0; //for statistics
			

	
		
		ok_Hash.put("errorHandlingRestResponse_1_tFlowToIterate_3", false);
		start_Hash.put("errorHandlingRestResponse_1_tFlowToIterate_3", System.currentTimeMillis());
		
	
	currentComponent="errorHandlingRestResponse_1_tFlowToIterate_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"errorHandlingRestResponse_1_row3");
			
		int tos_count_errorHandlingRestResponse_1_tFlowToIterate_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_errorHandlingRestResponse_1_tFlowToIterate_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_errorHandlingRestResponse_1_tFlowToIterate_3 = new StringBuilder();
                    log4jParamters_errorHandlingRestResponse_1_tFlowToIterate_3.append("Parameters:");
                            log4jParamters_errorHandlingRestResponse_1_tFlowToIterate_3.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_errorHandlingRestResponse_1_tFlowToIterate_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + (log4jParamters_errorHandlingRestResponse_1_tFlowToIterate_3) );
                    } 
                } 
            new BytesLimit65535_errorHandlingRestResponse_1_tFlowToIterate_3().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("errorHandlingRestResponse_1_tFlowToIterate_3", "tFlowToIterate_3", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_errorHandlingRestResponse_1_tFlowToIterate_3 = 0;
int counter_errorHandlingRestResponse_1_tFlowToIterate_3 = 0;

 



/**
 * [errorHandlingRestResponse_1_tFlowToIterate_3 begin ] stop
 */



	
	/**
	 * [errorHandlingRestResponse_1_tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("errorHandlingRestResponse_1_tLogCatcher_1", false);
		start_Hash.put("errorHandlingRestResponse_1_tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="errorHandlingRestResponse_1_tLogCatcher_1";
	
	
		int tos_count_errorHandlingRestResponse_1_tLogCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("errorHandlingRestResponse_1_tLogCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_errorHandlingRestResponse_1_tLogCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1 = new StringBuilder();
                    log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append("Parameters:");
                            log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append(" | ");
                            log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append(" | ");
                            log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append(" | ");
                            log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append("CATCH_TACTIONFAILURE" + " = " + "true");
                        log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("errorHandlingRestResponse_1_tLogCatcher_1 - "  + (log4jParamters_errorHandlingRestResponse_1_tLogCatcher_1) );
                    } 
                } 
            new BytesLimit65535_errorHandlingRestResponse_1_tLogCatcher_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("errorHandlingRestResponse_1_tLogCatcher_1", "tLogCatcher_1", "tLogCatcher");
				talendJobLogProcess(globalMap);
			}
			

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : errorHandlingRestResponse_1_tLogCatcher_1.getMessages()) {
		errorHandlingRestResponse_1_row3.type = lcm.getType();
		errorHandlingRestResponse_1_row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		errorHandlingRestResponse_1_row3.priority = lcm.getPriority();
		errorHandlingRestResponse_1_row3.message = lcm.getMessage();
		errorHandlingRestResponse_1_row3.code = lcm.getCode();
		
		errorHandlingRestResponse_1_row3.moment = java.util.Calendar.getInstance().getTime();
	
    	errorHandlingRestResponse_1_row3.pid = pid;
		errorHandlingRestResponse_1_row3.root_pid = rootPid;
		errorHandlingRestResponse_1_row3.father_pid = fatherPid;
	
    	errorHandlingRestResponse_1_row3.project = projectName;
    	errorHandlingRestResponse_1_row3.job = jobName;
    	errorHandlingRestResponse_1_row3.context = contextStr;
    		
 



/**
 * [errorHandlingRestResponse_1_tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tLogCatcher_1";
	
	

 


	tos_count_errorHandlingRestResponse_1_tLogCatcher_1++;

/**
 * [errorHandlingRestResponse_1_tLogCatcher_1 main ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tLogCatcher_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [errorHandlingRestResponse_1_tFlowToIterate_3 main ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFlowToIterate_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"errorHandlingRestResponse_1_row3","errorHandlingRestResponse_1_tLogCatcher_1","tLogCatcher_1","tLogCatcher","errorHandlingRestResponse_1_tFlowToIterate_3","tFlowToIterate_3","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("errorHandlingRestResponse_1_row3 - " + (errorHandlingRestResponse_1_row3==null? "": errorHandlingRestResponse_1_row3.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.moment, value=")  + (errorHandlingRestResponse_1_row3.moment)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.moment", errorHandlingRestResponse_1_row3.moment);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.pid, value=")  + (errorHandlingRestResponse_1_row3.pid)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.pid", errorHandlingRestResponse_1_row3.pid);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.root_pid, value=")  + (errorHandlingRestResponse_1_row3.root_pid)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.root_pid", errorHandlingRestResponse_1_row3.root_pid);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.father_pid, value=")  + (errorHandlingRestResponse_1_row3.father_pid)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.father_pid", errorHandlingRestResponse_1_row3.father_pid);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.project, value=")  + (errorHandlingRestResponse_1_row3.project)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.project", errorHandlingRestResponse_1_row3.project);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.job, value=")  + (errorHandlingRestResponse_1_row3.job)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.job", errorHandlingRestResponse_1_row3.job);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.context, value=")  + (errorHandlingRestResponse_1_row3.context)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.context", errorHandlingRestResponse_1_row3.context);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.priority, value=")  + (errorHandlingRestResponse_1_row3.priority)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.priority", errorHandlingRestResponse_1_row3.priority);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.type, value=")  + (errorHandlingRestResponse_1_row3.type)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.type", errorHandlingRestResponse_1_row3.type);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.origin, value=")  + (errorHandlingRestResponse_1_row3.origin)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.origin", errorHandlingRestResponse_1_row3.origin);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.message, value=")  + (errorHandlingRestResponse_1_row3.message)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.message", errorHandlingRestResponse_1_row3.message);
    	
                if(log.isTraceEnabled())
            log.trace("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Set global var, key=errorHandlingRestResponse_1_row3.code, value=")  + (errorHandlingRestResponse_1_row3.code)  + (".") );            
            globalMap.put("errorHandlingRestResponse_1_row3.code", errorHandlingRestResponse_1_row3.code);
    	
 
	   nb_line_errorHandlingRestResponse_1_tFlowToIterate_3++;  
       counter_errorHandlingRestResponse_1_tFlowToIterate_3++;
                if(log.isDebugEnabled())
            log.debug("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Current iteration is: ")  + (counter_errorHandlingRestResponse_1_tFlowToIterate_3)  + (".") );
       globalMap.put("errorHandlingRestResponse_1_tFlowToIterate_3_CURRENT_ITERATION", counter_errorHandlingRestResponse_1_tFlowToIterate_3);
 


	tos_count_errorHandlingRestResponse_1_tFlowToIterate_3++;

/**
 * [errorHandlingRestResponse_1_tFlowToIterate_3 main ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tFlowToIterate_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFlowToIterate_3";
	
	

 



/**
 * [errorHandlingRestResponse_1_tFlowToIterate_3 process_data_begin ] stop
 */
	NB_ITERATE_errorHandlingRestResponse_1_tFixedFlowInput_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("errorHandlingRestResponse_1_row4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("errorHandlingRestResponse_1_iterate1", 1, "exec" + NB_ITERATE_errorHandlingRestResponse_1_tFixedFlowInput_1);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [errorHandlingRestResponse_1_tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("errorHandlingRestResponse_1_tRESTResponse_1", false);
		start_Hash.put("errorHandlingRestResponse_1_tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="errorHandlingRestResponse_1_tRESTResponse_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"errorHandlingRestResponse_1_row4");
			
		int tos_count_errorHandlingRestResponse_1_tRESTResponse_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("errorHandlingRestResponse_1_tRESTResponse_1", "tRESTResponse_1", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [errorHandlingRestResponse_1_tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [errorHandlingRestResponse_1_tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("errorHandlingRestResponse_1_tFixedFlowInput_1", false);
		start_Hash.put("errorHandlingRestResponse_1_tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="errorHandlingRestResponse_1_tFixedFlowInput_1";
	
	
		int tos_count_errorHandlingRestResponse_1_tFixedFlowInput_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("errorHandlingRestResponse_1_tFixedFlowInput_1", "tFixedFlowInput_1", "tFixedFlowInput");
				talendJobLogProcess(globalMap);
			}
			

	    for (int i_errorHandlingRestResponse_1_tFixedFlowInput_1 = 0 ; i_errorHandlingRestResponse_1_tFixedFlowInput_1 < 1 ; i_errorHandlingRestResponse_1_tFixedFlowInput_1++) {
	                	            	
    	            		errorHandlingRestResponse_1_row4.body = ((String)globalMap.get("errorHandlingRestResponse_1_row3.origin"))+" : "+((String)globalMap.get("errorHandlingRestResponse_1_row3.message"));
    	            	

 



/**
 * [errorHandlingRestResponse_1_tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFixedFlowInput_1";
	
	

 


	tos_count_errorHandlingRestResponse_1_tFixedFlowInput_1++;

/**
 * [errorHandlingRestResponse_1_tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFixedFlowInput_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [errorHandlingRestResponse_1_tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tRESTResponse_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"errorHandlingRestResponse_1_row4","errorHandlingRestResponse_1_tFixedFlowInput_1","tFixedFlowInput_1","tFixedFlowInput","errorHandlingRestResponse_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("errorHandlingRestResponse_1_row4 - " + (errorHandlingRestResponse_1_row4==null? "": errorHandlingRestResponse_1_row4.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_errorHandlingRestResponse_1_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_errorHandlingRestResponse_1_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_errorHandlingRestResponse_1_tRESTResponse_1 && responseAlreadySent_errorHandlingRestResponse_1_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_errorHandlingRestResponse_1_tRESTResponse_1 = 500;

		Object restProviderResponse_errorHandlingRestResponse_1_tRESTResponse_1 = null;
		restProviderResponse_errorHandlingRestResponse_1_tRESTResponse_1 = errorHandlingRestResponse_1_row4.body;

		java.util.Map<String, String> restProviderResponseHeaders_errorHandlingRestResponse_1_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_errorHandlingRestResponse_1_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_errorHandlingRestResponse_1_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_errorHandlingRestResponse_1_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_errorHandlingRestResponse_1_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_errorHandlingRestResponse_1_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_errorHandlingRestResponse_1_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_errorHandlingRestResponse_1_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_errorHandlingRestResponse_1_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_errorHandlingRestResponse_1_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_errorHandlingRestResponse_1_tRESTResponse_1.put("BODY", restProviderResponse_errorHandlingRestResponse_1_tRESTResponse_1);
			restResponse_errorHandlingRestResponse_1_tRESTResponse_1.put("STATUS", restProviderStatusCode_errorHandlingRestResponse_1_tRESTResponse_1);
			restResponse_errorHandlingRestResponse_1_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_errorHandlingRestResponse_1_tRESTResponse_1);
			restResponse_errorHandlingRestResponse_1_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_errorHandlingRestResponse_1_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1 = null;
			if (!responseAlreadySent_errorHandlingRestResponse_1_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_errorHandlingRestResponse_1_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_errorHandlingRestResponse_1_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_errorHandlingRestResponse_1_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_errorHandlingRestResponse_1_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_errorHandlingRestResponse_1_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_errorHandlingRestResponse_1_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_errorHandlingRestResponse_1_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_errorHandlingRestResponse_1_tRESTResponse_1);

				String responseContentType_errorHandlingRestResponse_1_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_errorHandlingRestResponse_1_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_errorHandlingRestResponse_1_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1 = messageContext_errorHandlingRestResponse_1_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_errorHandlingRestResponse_1_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1);

				String responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1 = responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1.equals("xml") || responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1.endsWith("+xml")) {
					outputStream_errorHandlingRestResponse_1_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1.equals("json") || responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1.endsWith("+json")) {
					outputStream_errorHandlingRestResponse_1_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_errorHandlingRestResponse_1_tRESTResponse_1) {
				String responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1 = responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1.equals("json") || responseMediaSubType_errorHandlingRestResponse_1_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_errorHandlingRestResponse_1_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_errorHandlingRestResponse_1_tRESTResponse_1 = restProviderResponse_errorHandlingRestResponse_1_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_errorHandlingRestResponse_1_tRESTResponse_1 = messageContext_errorHandlingRestResponse_1_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_errorHandlingRestResponse_1_tRESTResponse_1 = messageBodyProviders_errorHandlingRestResponse_1_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_errorHandlingRestResponse_1_tRESTResponse_1, responseBodyClass_errorHandlingRestResponse_1_tRESTResponse_1, null, responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1);

                if (messageBodyWriter_errorHandlingRestResponse_1_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_errorHandlingRestResponse_1_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_errorHandlingRestResponse_1_tRESTResponse_1.writeTo(restProviderResponse_errorHandlingRestResponse_1_tRESTResponse_1, responseBodyClass_errorHandlingRestResponse_1_tRESTResponse_1, responseBodyClass_errorHandlingRestResponse_1_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_errorHandlingRestResponse_1_tRESTResponse_1, null, outputStream_errorHandlingRestResponse_1_tRESTResponse_1);
			}
			// initial variant
			//outputStream_errorHandlingRestResponse_1_tRESTResponse_1.write(String.valueOf(restProviderResponse_errorHandlingRestResponse_1_tRESTResponse_1).getBytes());
			outputStream_errorHandlingRestResponse_1_tRESTResponse_1.flush();
		}
	}

 


	tos_count_errorHandlingRestResponse_1_tRESTResponse_1++;

/**
 * [errorHandlingRestResponse_1_tRESTResponse_1 main ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tRESTResponse_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tRESTResponse_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tRESTResponse_1 process_data_end ] stop
 */



	
	/**
	 * [errorHandlingRestResponse_1_tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFixedFlowInput_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFixedFlowInput_1";
	
	

        }
        globalMap.put("errorHandlingRestResponse_1_tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("errorHandlingRestResponse_1_tFixedFlowInput_1", true);
end_Hash.put("errorHandlingRestResponse_1_tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [errorHandlingRestResponse_1_tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [errorHandlingRestResponse_1_tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tRESTResponse_1";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"errorHandlingRestResponse_1_row4",2,0,
			 			"errorHandlingRestResponse_1_tFixedFlowInput_1","tFixedFlowInput_1","tFixedFlowInput","errorHandlingRestResponse_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("errorHandlingRestResponse_1_tRESTResponse_1", true);
end_Hash.put("errorHandlingRestResponse_1_tRESTResponse_1", System.currentTimeMillis());




/**
 * [errorHandlingRestResponse_1_tRESTResponse_1 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("errorHandlingRestResponse_1_iterate1", 2, "exec" + NB_ITERATE_errorHandlingRestResponse_1_tFixedFlowInput_1);
						}				
					




	
	/**
	 * [errorHandlingRestResponse_1_tFlowToIterate_3 process_data_end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFlowToIterate_3";
	
	

 



/**
 * [errorHandlingRestResponse_1_tFlowToIterate_3 process_data_end ] stop
 */



	
	/**
	 * [errorHandlingRestResponse_1_tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tLogCatcher_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [errorHandlingRestResponse_1_tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tLogCatcher_1";
	
	
	}
} catch (Exception e_errorHandlingRestResponse_1_tLogCatcher_1) {
globalMap.put("errorHandlingRestResponse_1_tLogCatcher_1_ERROR_MESSAGE",e_errorHandlingRestResponse_1_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("errorHandlingRestResponse_1_tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_errorHandlingRestResponse_1_tLogCatcher_1), e_errorHandlingRestResponse_1_tLogCatcher_1);
}

 
                if(log.isDebugEnabled())
            log.debug("errorHandlingRestResponse_1_tLogCatcher_1 - "  + ("Done.") );

ok_Hash.put("errorHandlingRestResponse_1_tLogCatcher_1", true);
end_Hash.put("errorHandlingRestResponse_1_tLogCatcher_1", System.currentTimeMillis());




/**
 * [errorHandlingRestResponse_1_tLogCatcher_1 end ] stop
 */

	
	/**
	 * [errorHandlingRestResponse_1_tFlowToIterate_3 end ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFlowToIterate_3";
	
	

globalMap.put("errorHandlingRestResponse_1_tFlowToIterate_3_NB_LINE",nb_line_errorHandlingRestResponse_1_tFlowToIterate_3);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"errorHandlingRestResponse_1_row3",2,0,
			 			"errorHandlingRestResponse_1_tLogCatcher_1","tLogCatcher_1","tLogCatcher","errorHandlingRestResponse_1_tFlowToIterate_3","tFlowToIterate_3","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("errorHandlingRestResponse_1_tFlowToIterate_3 - "  + ("Done.") );

ok_Hash.put("errorHandlingRestResponse_1_tFlowToIterate_3", true);
end_Hash.put("errorHandlingRestResponse_1_tFlowToIterate_3", System.currentTimeMillis());




/**
 * [errorHandlingRestResponse_1_tFlowToIterate_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [errorHandlingRestResponse_1_tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tLogCatcher_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [errorHandlingRestResponse_1_tFlowToIterate_3 finally ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFlowToIterate_3";
	
	

 



/**
 * [errorHandlingRestResponse_1_tFlowToIterate_3 finally ] stop
 */

	
	/**
	 * [errorHandlingRestResponse_1_tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tFixedFlowInput_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [errorHandlingRestResponse_1_tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="errorHandlingRestResponse_1_tRESTResponse_1";
	
	

 



/**
 * [errorHandlingRestResponse_1_tRESTResponse_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("errorHandlingRestResponse_1_tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCustInfoStruct implements routines.system.IPersistableRow<EQGetCustInfoStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String accountNum;

				public String getAccountNum () {
					return this.accountNum;
				}

				public Boolean accountNumIsNullable(){
				    return true;
				}
				public Boolean accountNumIsKey(){
				    return false;
				}
				public Integer accountNumLength(){
				    return null;
				}
				public Integer accountNumPrecision(){
				    return null;
				}
				public String accountNumDefault(){
				
					return null;
				
				}
				public String accountNumComment(){
				
				    return "query";
				
				}
				public String accountNumPattern(){
				
					return "";
				
				}
				public String accountNumOriginalDbColumnName(){
				
					return "accountNum";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.accountNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.accountNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.accountNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.accountNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("accountNum="+accountNum);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(accountNum == null){
        					sb.append("<null>");
        				}else{
            				sb.append(accountNum);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCustInfoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetAllCustomersStruct implements routines.system.IPersistableRow<EQGetAllCustomersStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetAllCustomersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetBillToStruct implements routines.system.IPersistableRow<EQGetBillToStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String collectRefProdId;

				public String getCollectRefProdId () {
					return this.collectRefProdId;
				}

				public Boolean collectRefProdIdIsNullable(){
				    return true;
				}
				public Boolean collectRefProdIdIsKey(){
				    return false;
				}
				public Integer collectRefProdIdLength(){
				    return null;
				}
				public Integer collectRefProdIdPrecision(){
				    return null;
				}
				public String collectRefProdIdDefault(){
				
					return null;
				
				}
				public String collectRefProdIdComment(){
				
				    return "query";
				
				}
				public String collectRefProdIdPattern(){
				
					return "";
				
				}
				public String collectRefProdIdOriginalDbColumnName(){
				
					return "collectRefProdId";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.collectRefProdId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.collectRefProdId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.collectRefProdId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.collectRefProdId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("collectRefProdId="+collectRefProdId);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(collectRefProdId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(collectRefProdId);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetBillToStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetChassisFCMStruct implements routines.system.IPersistableRow<EQGetChassisFCMStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisFCMStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetChassisPNsStruct implements routines.system.IPersistableRow<EQGetChassisPNsStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisPNsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetCountertopPNsStruct implements routines.system.IPersistableRow<EQGetCountertopPNsStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCountertopPNsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetCTSkinPnStruct implements routines.system.IPersistableRow<EQGetCTSkinPnStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSkinPnStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetCTSolidSurfacePnStruct implements routines.system.IPersistableRow<EQGetCTSolidSurfacePnStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSolidSurfacePnStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetDwgNoStruct implements routines.system.IPersistableRow<EQGetDwgNoStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String displayProductNumber;

				public String getDisplayProductNumber () {
					return this.displayProductNumber;
				}

				public Boolean displayProductNumberIsNullable(){
				    return true;
				}
				public Boolean displayProductNumberIsKey(){
				    return false;
				}
				public Integer displayProductNumberLength(){
				    return null;
				}
				public Integer displayProductNumberPrecision(){
				    return null;
				}
				public String displayProductNumberDefault(){
				
					return null;
				
				}
				public String displayProductNumberComment(){
				
				    return "query";
				
				}
				public String displayProductNumberPattern(){
				
					return "";
				
				}
				public String displayProductNumberOriginalDbColumnName(){
				
					return "displayProductNumber";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("displayProductNumber="+displayProductNumber);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(displayProductNumber == null){
        					sb.append("<null>");
        				}else{
            				sb.append(displayProductNumber);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetDwgNoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetItemDescStruct implements routines.system.IPersistableRow<EQGetItemDescStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String displayProductNumber;

				public String getDisplayProductNumber () {
					return this.displayProductNumber;
				}

				public Boolean displayProductNumberIsNullable(){
				    return true;
				}
				public Boolean displayProductNumberIsKey(){
				    return false;
				}
				public Integer displayProductNumberLength(){
				    return null;
				}
				public Integer displayProductNumberPrecision(){
				    return null;
				}
				public String displayProductNumberDefault(){
				
					return null;
				
				}
				public String displayProductNumberComment(){
				
				    return "query";
				
				}
				public String displayProductNumberPattern(){
				
					return "";
				
				}
				public String displayProductNumberOriginalDbColumnName(){
				
					return "displayProductNumber";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("displayProductNumber="+displayProductNumber);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(displayProductNumber == null){
        					sb.append("<null>");
        				}else{
            				sb.append(displayProductNumber);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetItemDescStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetParentLineStruct implements routines.system.IPersistableRow<EQGetParentLineStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String salesId;

				public String getSalesId () {
					return this.salesId;
				}

				public Boolean salesIdIsNullable(){
				    return true;
				}
				public Boolean salesIdIsKey(){
				    return false;
				}
				public Integer salesIdLength(){
				    return null;
				}
				public Integer salesIdPrecision(){
				    return null;
				}
				public String salesIdDefault(){
				
					return null;
				
				}
				public String salesIdComment(){
				
				    return "query";
				
				}
				public String salesIdPattern(){
				
					return "";
				
				}
				public String salesIdOriginalDbColumnName(){
				
					return "salesId";
				
				}

				
			    public String lineNum;

				public String getLineNum () {
					return this.lineNum;
				}

				public Boolean lineNumIsNullable(){
				    return true;
				}
				public Boolean lineNumIsKey(){
				    return false;
				}
				public Integer lineNumLength(){
				    return null;
				}
				public Integer lineNumPrecision(){
				    return null;
				}
				public String lineNumDefault(){
				
					return null;
				
				}
				public String lineNumComment(){
				
				    return "query";
				
				}
				public String lineNumPattern(){
				
					return "";
				
				}
				public String lineNumOriginalDbColumnName(){
				
					return "lineNum";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.salesId = readString(dis);
					
					this.lineNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.salesId = readString(dis);
					
					this.lineNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.salesId,dos);
					
					// String
				
						writeString(this.lineNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.salesId,dos);
					
					// String
				
						writeString(this.lineNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("salesId="+salesId);
		sb.append(",lineNum="+lineNum);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(salesId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(salesId);
            			}
            		
        			sb.append("|");
        		
        				if(lineNum == null){
        					sb.append("<null>");
        				}else{
            				sb.append(lineNum);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetParentLineStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetPriceGroupTierStruct implements routines.system.IPersistableRow<EQGetPriceGroupTierStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String accountNum;

				public String getAccountNum () {
					return this.accountNum;
				}

				public Boolean accountNumIsNullable(){
				    return true;
				}
				public Boolean accountNumIsKey(){
				    return false;
				}
				public Integer accountNumLength(){
				    return null;
				}
				public Integer accountNumPrecision(){
				    return null;
				}
				public String accountNumDefault(){
				
					return null;
				
				}
				public String accountNumComment(){
				
				    return "query";
				
				}
				public String accountNumPattern(){
				
					return "";
				
				}
				public String accountNumOriginalDbColumnName(){
				
					return "accountNum";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.accountNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.accountNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.accountNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.accountNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("accountNum="+accountNum);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(accountNum == null){
        					sb.append("<null>");
        				}else{
            				sb.append(accountNum);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetPriceGroupTierStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetProdOrdersStruct implements routines.system.IPersistableRow<EQGetProdOrdersStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String configureItemMaster;

				public String getConfigureItemMaster () {
					return this.configureItemMaster;
				}

				public Boolean configureItemMasterIsNullable(){
				    return true;
				}
				public Boolean configureItemMasterIsKey(){
				    return false;
				}
				public Integer configureItemMasterLength(){
				    return null;
				}
				public Integer configureItemMasterPrecision(){
				    return null;
				}
				public String configureItemMasterDefault(){
				
					return null;
				
				}
				public String configureItemMasterComment(){
				
				    return "query";
				
				}
				public String configureItemMasterPattern(){
				
					return "";
				
				}
				public String configureItemMasterOriginalDbColumnName(){
				
					return "configureItemMaster";
				
				}

				
			    public String inventLocationId;

				public String getInventLocationId () {
					return this.inventLocationId;
				}

				public Boolean inventLocationIdIsNullable(){
				    return true;
				}
				public Boolean inventLocationIdIsKey(){
				    return false;
				}
				public Integer inventLocationIdLength(){
				    return null;
				}
				public Integer inventLocationIdPrecision(){
				    return null;
				}
				public String inventLocationIdDefault(){
				
					return null;
				
				}
				public String inventLocationIdComment(){
				
				    return "query";
				
				}
				public String inventLocationIdPattern(){
				
					return "";
				
				}
				public String inventLocationIdOriginalDbColumnName(){
				
					return "inventLocationId";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.configureItemMaster = readString(dis);
					
					this.inventLocationId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.configureItemMaster = readString(dis);
					
					this.inventLocationId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.configureItemMaster,dos);
					
					// String
				
						writeString(this.inventLocationId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.configureItemMaster,dos);
					
					// String
				
						writeString(this.inventLocationId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("configureItemMaster="+configureItemMaster);
		sb.append(",inventLocationId="+inventLocationId);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(configureItemMaster == null){
        					sb.append("<null>");
        				}else{
            				sb.append(configureItemMaster);
            			}
            		
        			sb.append("|");
        		
        				if(inventLocationId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(inventLocationId);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetProdOrdersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetRRVendorNoStruct implements routines.system.IPersistableRow<EQGetRRVendorNoStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String site;

				public String getSite () {
					return this.site;
				}

				public Boolean siteIsNullable(){
				    return true;
				}
				public Boolean siteIsKey(){
				    return false;
				}
				public Integer siteLength(){
				    return null;
				}
				public Integer sitePrecision(){
				    return null;
				}
				public String siteDefault(){
				
					return null;
				
				}
				public String siteComment(){
				
				    return "query";
				
				}
				public String sitePattern(){
				
					return "";
				
				}
				public String siteOriginalDbColumnName(){
				
					return "site";
				
				}

				
			    public String part;

				public String getPart () {
					return this.part;
				}

				public Boolean partIsNullable(){
				    return true;
				}
				public Boolean partIsKey(){
				    return false;
				}
				public Integer partLength(){
				    return null;
				}
				public Integer partPrecision(){
				    return null;
				}
				public String partDefault(){
				
					return null;
				
				}
				public String partComment(){
				
				    return "query";
				
				}
				public String partPattern(){
				
					return "";
				
				}
				public String partOriginalDbColumnName(){
				
					return "part";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.site = readString(dis);
					
					this.part = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.site = readString(dis);
					
					this.part = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.site,dos);
					
					// String
				
						writeString(this.part,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.site,dos);
					
					// String
				
						writeString(this.part,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("site="+site);
		sb.append(",part="+part);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(site == null){
        					sb.append("<null>");
        				}else{
            				sb.append(site);
            			}
            		
        			sb.append("|");
        		
        				if(part == null){
        					sb.append("<null>");
        				}else{
            				sb.append(part);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetRRVendorNoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetSecondaryPriceGroupStruct implements routines.system.IPersistableRow<EQGetSecondaryPriceGroupStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String accountNum;

				public String getAccountNum () {
					return this.accountNum;
				}

				public Boolean accountNumIsNullable(){
				    return true;
				}
				public Boolean accountNumIsKey(){
				    return false;
				}
				public Integer accountNumLength(){
				    return null;
				}
				public Integer accountNumPrecision(){
				    return null;
				}
				public String accountNumDefault(){
				
					return null;
				
				}
				public String accountNumComment(){
				
				    return "query";
				
				}
				public String accountNumPattern(){
				
					return "";
				
				}
				public String accountNumOriginalDbColumnName(){
				
					return "accountNum";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.accountNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.accountNum = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.accountNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.accountNum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("accountNum="+accountNum);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(accountNum == null){
        					sb.append("<null>");
        				}else{
            				sb.append(accountNum);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSecondaryPriceGroupStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetSellToStruct implements routines.system.IPersistableRow<EQGetSellToStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String collectRefProdId;

				public String getCollectRefProdId () {
					return this.collectRefProdId;
				}

				public Boolean collectRefProdIdIsNullable(){
				    return true;
				}
				public Boolean collectRefProdIdIsKey(){
				    return false;
				}
				public Integer collectRefProdIdLength(){
				    return null;
				}
				public Integer collectRefProdIdPrecision(){
				    return null;
				}
				public String collectRefProdIdDefault(){
				
					return null;
				
				}
				public String collectRefProdIdComment(){
				
				    return "query";
				
				}
				public String collectRefProdIdPattern(){
				
					return "";
				
				}
				public String collectRefProdIdOriginalDbColumnName(){
				
					return "collectRefProdId";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.collectRefProdId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.collectRefProdId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.collectRefProdId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.collectRefProdId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("collectRefProdId="+collectRefProdId);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(collectRefProdId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(collectRefProdId);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSellToStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetUOMConvStruct implements routines.system.IPersistableRow<EQGetUOMConvStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String displayProductNumber;

				public String getDisplayProductNumber () {
					return this.displayProductNumber;
				}

				public Boolean displayProductNumberIsNullable(){
				    return true;
				}
				public Boolean displayProductNumberIsKey(){
				    return false;
				}
				public Integer displayProductNumberLength(){
				    return null;
				}
				public Integer displayProductNumberPrecision(){
				    return null;
				}
				public String displayProductNumberDefault(){
				
					return null;
				
				}
				public String displayProductNumberComment(){
				
				    return "query";
				
				}
				public String displayProductNumberPattern(){
				
					return "";
				
				}
				public String displayProductNumberOriginalDbColumnName(){
				
					return "displayProductNumber";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("displayProductNumber="+displayProductNumber);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(displayProductNumber == null){
        					sb.append("<null>");
        				}else{
            				sb.append(displayProductNumber);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetUOMConvStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetValidItemStruct implements routines.system.IPersistableRow<EQGetValidItemStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String displayProductNumber;

				public String getDisplayProductNumber () {
					return this.displayProductNumber;
				}

				public Boolean displayProductNumberIsNullable(){
				    return true;
				}
				public Boolean displayProductNumberIsKey(){
				    return false;
				}
				public Integer displayProductNumberLength(){
				    return null;
				}
				public Integer displayProductNumberPrecision(){
				    return null;
				}
				public String displayProductNumberDefault(){
				
					return null;
				
				}
				public String displayProductNumberComment(){
				
				    return "query";
				
				}
				public String displayProductNumberPattern(){
				
					return "";
				
				}
				public String displayProductNumberOriginalDbColumnName(){
				
					return "displayProductNumber";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.displayProductNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.displayProductNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("displayProductNumber="+displayProductNumber);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(displayProductNumber == null){
        					sb.append("<null>");
        				}else{
            				sb.append(displayProductNumber);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetValidItemStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetVariantStateStruct implements routines.system.IPersistableRow<EQGetVariantStateStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String itemId;

				public String getItemId () {
					return this.itemId;
				}

				public Boolean itemIdIsNullable(){
				    return true;
				}
				public Boolean itemIdIsKey(){
				    return false;
				}
				public Integer itemIdLength(){
				    return null;
				}
				public Integer itemIdPrecision(){
				    return null;
				}
				public String itemIdDefault(){
				
					return null;
				
				}
				public String itemIdComment(){
				
				    return "query";
				
				}
				public String itemIdPattern(){
				
					return "";
				
				}
				public String itemIdOriginalDbColumnName(){
				
					return "itemId";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.itemId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.itemId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.itemId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.itemId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("itemId="+itemId);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(itemId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(itemId);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetVariantStateStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EQGetSkinORPartStruct implements routines.system.IPersistableRow<EQGetSkinORPartStruct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String itemId;

				public String getItemId () {
					return this.itemId;
				}

				public Boolean itemIdIsNullable(){
				    return true;
				}
				public Boolean itemIdIsKey(){
				    return false;
				}
				public Integer itemIdLength(){
				    return null;
				}
				public Integer itemIdPrecision(){
				    return null;
				}
				public String itemIdDefault(){
				
					return null;
				
				}
				public String itemIdComment(){
				
				    return "query";
				
				}
				public String itemIdPattern(){
				
					return "";
				
				}
				public String itemIdOriginalDbColumnName(){
				
					return "itemId";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.itemId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.itemId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.itemId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.itemId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("itemId="+itemId);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(itemId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(itemId);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSkinORPartStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRESTRequest_1_LoopProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "tRESTRequest_1_Loop");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCustInfoStruct EQGetCustInfo = new EQGetCustInfoStruct();
EQGetAllCustomersStruct EQGetAllCustomers = new EQGetAllCustomersStruct();
EQGetBillToStruct EQGetBillTo = new EQGetBillToStruct();
EQGetChassisFCMStruct EQGetChassisFCM = new EQGetChassisFCMStruct();
EQGetChassisPNsStruct EQGetChassisPNs = new EQGetChassisPNsStruct();
EQGetCountertopPNsStruct EQGetCountertopPNs = new EQGetCountertopPNsStruct();
EQGetCTSkinPnStruct EQGetCTSkinPn = new EQGetCTSkinPnStruct();
EQGetCTSolidSurfacePnStruct EQGetCTSolidSurfacePn = new EQGetCTSolidSurfacePnStruct();
EQGetDwgNoStruct EQGetDwgNo = new EQGetDwgNoStruct();
EQGetItemDescStruct EQGetItemDesc = new EQGetItemDescStruct();
EQGetParentLineStruct EQGetParentLine = new EQGetParentLineStruct();
EQGetPriceGroupTierStruct EQGetPriceGroupTier = new EQGetPriceGroupTierStruct();
EQGetProdOrdersStruct EQGetProdOrders = new EQGetProdOrdersStruct();
EQGetRRVendorNoStruct EQGetRRVendorNo = new EQGetRRVendorNoStruct();
EQGetSecondaryPriceGroupStruct EQGetSecondaryPriceGroup = new EQGetSecondaryPriceGroupStruct();
EQGetSellToStruct EQGetSellTo = new EQGetSellToStruct();
EQGetUOMConvStruct EQGetUOMConv = new EQGetUOMConvStruct();
EQGetValidItemStruct EQGetValidItem = new EQGetValidItemStruct();
EQGetVariantStateStruct EQGetVariantState = new EQGetVariantStateStruct();
EQGetSkinORPartStruct EQGetSkinORPart = new EQGetSkinORPartStruct();



	
	/**
	 * [tRESTRequest_1_Loop begin ] start
	 */

				
			int NB_ITERATE_tRESTRequest_1_In = 0; //for statistics
			

	
		
		ok_Hash.put("tRESTRequest_1_Loop", false);
		start_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	
		int tos_count_tRESTRequest_1_Loop = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tRESTRequest_1_Loop", "tRESTRequest_1_Loop", "tRESTRequestLoop");
				talendJobLogProcess(globalMap);
			}
			
					runStat.updateStatAndLog(execStat,enableLogStash,iterateId,0,0,"EQGetCustInfo","EQGetAllCustomers","EQGetBillTo","EQGetChassisFCM","EQGetChassisPNs","EQGetCountertopPNs","EQGetCTSkinPn","EQGetCTSolidSurfacePn","EQGetDwgNo","EQGetItemDesc","EQGetParentLine","EQGetPriceGroupTier","EQGetProdOrders","EQGetRRVendorNo","EQGetSecondaryPriceGroup","EQGetSellTo","EQGetUOMConv","EQGetValidItem","EQGetVariantState","EQGetSkinORPart");
					


					EQGetSkinORPart = null;
			
					EQGetVariantState = null;
			
					EQGetValidItem = null;
			
					EQGetUOMConv = null;
			
					EQGetSellTo = null;
			
					EQGetSecondaryPriceGroup = null;
			
					EQGetRRVendorNo = null;
			
					EQGetProdOrders = null;
			
					EQGetPriceGroupTier = null;
			
					EQGetParentLine = null;
			
					EQGetItemDesc = null;
			
					EQGetDwgNo = null;
			
					EQGetCTSolidSurfacePn = null;
			
					EQGetCTSkinPn = null;
			
					EQGetCountertopPNs = null;
			
					EQGetChassisPNs = null;
			
					EQGetChassisFCM = null;
			
					EQGetBillTo = null;
			
					EQGetAllCustomers = null;
			
					EQGetCustInfo = null;
			

	int nb_line_tRESTRequest_1 = 0;

	try {

		java.util.Map<String, Object> requestMessage_tRESTRequest_1 =
				(java.util.Map<String, Object>) globalMap.get("restRequest");

		restEndpoint = getRestEndpoint();

		if (null == requestMessage_tRESTRequest_1) {

			if (restTalendJobAlreadyStarted) {
				throw new RuntimeException("request is not provided");
			} else {
				if (!runInTalendEsbRuntimeContainer && null == thread4RestServiceProviderEndpoint) {
					String endpointUrl_tRESTRequest_1 = checkEndpointUrl(restEndpoint);
					// *** external thread for endpoint initialization
					thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(this, endpointUrl_tRESTRequest_1);
					thread4RestServiceProviderEndpoint.start();
					// *** external thread for endpoint initialization
				}

				restTalendJobAlreadyStarted = true;

				if(runInDaemonMode){
					Thread.currentThread();
					try {
						while(true) {
							Thread.sleep(60000);
						}
					} catch (InterruptedException e_tRESTRequest_1) {
						// e_tRESTRequest_1.printStackTrace();
						// throw new TalendException(e_tRESTRequest_1, "wholeJob", globalMap);
					}
				}
			}
			return;
		}

        requestMessage_tRESTRequest_1.put("CURRENT_MESSAGE", org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage());

        Object ctx_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("MESSAGE_CONTEXT");
        if (ctx_tRESTRequest_1 != null && ctx_tRESTRequest_1 instanceof org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) {
            requestMessage_tRESTRequest_1.put("MESSAGE_CONTEXT", ((org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext)ctx_tRESTRequest_1).get());
        }

 



/**
 * [tRESTRequest_1_Loop begin ] stop
 */
	
	/**
	 * [tRESTRequest_1_Loop main ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	
				resourceMap.put("inIterateVComp", true);
			

 


	tos_count_tRESTRequest_1_Loop++;

/**
 * [tRESTRequest_1_Loop main ] stop
 */
	
	/**
	 * [tRESTRequest_1_Loop process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	

 



/**
 * [tRESTRequest_1_Loop process_data_begin ] stop
 */
	NB_ITERATE_tRESTRequest_1_In++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("Iterate", 1, "exec" + NB_ITERATE_tRESTRequest_1_In);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [EQGetCustomerInfo_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetCustomerInfo_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetCustomerInfo_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetCustomerInfo_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCustomerInfo_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCustInfo");
			
		int tos_count_EQGetCustomerInfo_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCustomerInfo_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCustomerInfo_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetCustomerInfo_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetCustomerInfo_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetCustomerInfo_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetCustomerInfo_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCustomerInfo_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCustomerInfo_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetCustomerInfo_1_tFlowToIterate_1 = 0;
int counter_EQGetCustomerInfo_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetCustomerInfo_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetAllCustomers_1_tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_EQGetAllCustomers_1_tJava_3 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetAllCustomers_1_tFlowToIterate_2", false);
		start_Hash.put("EQGetAllCustomers_1_tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetAllCustomers_1_tFlowToIterate_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetAllCustomers");
			
		int tos_count_EQGetAllCustomers_1_tFlowToIterate_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tFlowToIterate_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetAllCustomers_1_tFlowToIterate_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetAllCustomers_1_tFlowToIterate_2 = new StringBuilder();
                    log4jParamters_EQGetAllCustomers_1_tFlowToIterate_2.append("Parameters:");
                            log4jParamters_EQGetAllCustomers_1_tFlowToIterate_2.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetAllCustomers_1_tFlowToIterate_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tFlowToIterate_2 - "  + (log4jParamters_EQGetAllCustomers_1_tFlowToIterate_2) );
                    } 
                } 
            new BytesLimit65535_EQGetAllCustomers_1_tFlowToIterate_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetAllCustomers_1_tFlowToIterate_2", "tFlowToIterate_2", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetAllCustomers_1_tFlowToIterate_2 = 0;
int counter_EQGetAllCustomers_1_tFlowToIterate_2 = 0;

 



/**
 * [EQGetAllCustomers_1_tFlowToIterate_2 begin ] stop
 */




	
	/**
	 * [EQGetBillTo_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetBillTo_1_tJava_1 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetBillTo_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetBillTo_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetBillTo_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetBillTo");
			
		int tos_count_EQGetBillTo_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetBillTo_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetBillTo_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetBillTo_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetBillTo_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetBillTo_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetBillTo_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetBillTo_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetBillTo_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetBillTo_1_tFlowToIterate_1 = 0;
int counter_EQGetBillTo_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetBillTo_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetChassisFCM_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetChassisFCM_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetChassisFCM_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetChassisFCM_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisFCM_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisFCM");
			
		int tos_count_EQGetChassisFCM_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisFCM_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisFCM_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetChassisFCM_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetChassisFCM_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetChassisFCM_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetChassisFCM_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisFCM_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisFCM_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetChassisFCM_1_tFlowToIterate_1 = 0;
int counter_EQGetChassisFCM_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetChassisFCM_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetChassisPNs_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetChassisPNs_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetChassisPNs_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetChassisPNs_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisPNs_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisPNs");
			
		int tos_count_EQGetChassisPNs_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisPNs_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisPNs_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetChassisPNs_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetChassisPNs_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetChassisPNs_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetChassisPNs_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisPNs_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisPNs_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetChassisPNs_1_tFlowToIterate_1 = 0;
int counter_EQGetChassisPNs_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetChassisPNs_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetCountertopPNs_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetCountertopPNs_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetCountertopPNs_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetCountertopPNs_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCountertopPNs_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCountertopPNs");
			
		int tos_count_EQGetCountertopPNs_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCountertopPNs_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCountertopPNs_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetCountertopPNs_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetCountertopPNs_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetCountertopPNs_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetCountertopPNs_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCountertopPNs_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCountertopPNs_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetCountertopPNs_1_tFlowToIterate_1 = 0;
int counter_EQGetCountertopPNs_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetCountertopPNs_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetCTSkinPn_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetCTSkinPn_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetCTSkinPn_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetCTSkinPn_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSkinPn_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSkinPn");
			
		int tos_count_EQGetCTSkinPn_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSkinPn_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSkinPn_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetCTSkinPn_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetCTSkinPn_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetCTSkinPn_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetCTSkinPn_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSkinPn_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSkinPn_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetCTSkinPn_1_tFlowToIterate_1 = 0;
int counter_EQGetCTSkinPn_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetCTSkinPn_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetCTSolidSurfacePn_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetCTSolidSurfacePn_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetCTSolidSurfacePn_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSolidSurfacePn_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSolidSurfacePn");
			
		int tos_count_EQGetCTSolidSurfacePn_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSolidSurfacePn_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSolidSurfacePn_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetCTSolidSurfacePn_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetCTSolidSurfacePn_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSolidSurfacePn_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSolidSurfacePn_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetCTSolidSurfacePn_1_tFlowToIterate_1 = 0;
int counter_EQGetCTSolidSurfacePn_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetDwgNo_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetDwgNo_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetDwgNo_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetDwgNo_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetDwgNo_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetDwgNo");
			
		int tos_count_EQGetDwgNo_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetDwgNo_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetDwgNo_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetDwgNo_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetDwgNo_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetDwgNo_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetDwgNo_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetDwgNo_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetDwgNo_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetDwgNo_1_tFlowToIterate_1 = 0;
int counter_EQGetDwgNo_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetDwgNo_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetItemDesc_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetItemDesc_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetItemDesc_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetItemDesc_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetItemDesc_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetItemDesc");
			
		int tos_count_EQGetItemDesc_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetItemDesc_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetItemDesc_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetItemDesc_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetItemDesc_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetItemDesc_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetItemDesc_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetItemDesc_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetItemDesc_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetItemDesc_1_tFlowToIterate_1 = 0;
int counter_EQGetItemDesc_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetItemDesc_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetParentLine_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetParentLine_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetParentLine_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetParentLine_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetParentLine_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetParentLine");
			
		int tos_count_EQGetParentLine_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetParentLine_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetParentLine_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetParentLine_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetParentLine_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetParentLine_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetParentLine_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetParentLine_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetParentLine_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetParentLine_1_tFlowToIterate_1 = 0;
int counter_EQGetParentLine_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetParentLine_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetPriceGroupTier_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetPriceGroupTier_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetPriceGroupTier_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetPriceGroupTier_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetPriceGroupTier_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetPriceGroupTier");
			
		int tos_count_EQGetPriceGroupTier_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetPriceGroupTier_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetPriceGroupTier_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetPriceGroupTier_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetPriceGroupTier_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetPriceGroupTier_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetPriceGroupTier_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetPriceGroupTier_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetPriceGroupTier_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetPriceGroupTier_1_tFlowToIterate_1 = 0;
int counter_EQGetPriceGroupTier_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetPriceGroupTier_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetProdOrders_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetProdOrders_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetProdOrders_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetProdOrders_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetProdOrders_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetProdOrders");
			
		int tos_count_EQGetProdOrders_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetProdOrders_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetProdOrders_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetProdOrders_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetProdOrders_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetProdOrders_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetProdOrders_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetProdOrders_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetProdOrders_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetProdOrders_1_tFlowToIterate_1 = 0;
int counter_EQGetProdOrders_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetProdOrders_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetRRVendorNo_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetRRVendorNo_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetRRVendorNo_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetRRVendorNo_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetRRVendorNo_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetRRVendorNo");
			
		int tos_count_EQGetRRVendorNo_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetRRVendorNo_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetRRVendorNo_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetRRVendorNo_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetRRVendorNo_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetRRVendorNo_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetRRVendorNo_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetRRVendorNo_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetRRVendorNo_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetRRVendorNo_1_tFlowToIterate_1 = 0;
int counter_EQGetRRVendorNo_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetRRVendorNo_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetSecondaryPriceGroup_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetSecondaryPriceGroup_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetSecondaryPriceGroup_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetSecondaryPriceGroup_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSecondaryPriceGroup");
			
		int tos_count_EQGetSecondaryPriceGroup_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSecondaryPriceGroup_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSecondaryPriceGroup_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetSecondaryPriceGroup_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetSecondaryPriceGroup_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetSecondaryPriceGroup_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSecondaryPriceGroup_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetSecondaryPriceGroup_1_tFlowToIterate_1 = 0;
int counter_EQGetSecondaryPriceGroup_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetSellTo_1_tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_EQGetSellTo_1_tJava_1 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetSellTo_1_tFlowToIterate_2", false);
		start_Hash.put("EQGetSellTo_1_tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetSellTo_1_tFlowToIterate_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSellTo");
			
		int tos_count_EQGetSellTo_1_tFlowToIterate_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tFlowToIterate_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSellTo_1_tFlowToIterate_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSellTo_1_tFlowToIterate_2 = new StringBuilder();
                    log4jParamters_EQGetSellTo_1_tFlowToIterate_2.append("Parameters:");
                            log4jParamters_EQGetSellTo_1_tFlowToIterate_2.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetSellTo_1_tFlowToIterate_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tFlowToIterate_2 - "  + (log4jParamters_EQGetSellTo_1_tFlowToIterate_2) );
                    } 
                } 
            new BytesLimit65535_EQGetSellTo_1_tFlowToIterate_2().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSellTo_1_tFlowToIterate_2", "tFlowToIterate_2", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetSellTo_1_tFlowToIterate_2 = 0;
int counter_EQGetSellTo_1_tFlowToIterate_2 = 0;

 



/**
 * [EQGetSellTo_1_tFlowToIterate_2 begin ] stop
 */




	
	/**
	 * [EQGetUOMConv_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetUOMConv_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetUOMConv_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetUOMConv_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetUOMConv_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetUOMConv");
			
		int tos_count_EQGetUOMConv_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetUOMConv_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetUOMConv_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetUOMConv_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetUOMConv_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetUOMConv_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetUOMConv_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetUOMConv_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetUOMConv_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetUOMConv_1_tFlowToIterate_1 = 0;
int counter_EQGetUOMConv_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetUOMConv_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetValidItem_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetValidItem_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetValidItem_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetValidItem_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetValidItem_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetValidItem");
			
		int tos_count_EQGetValidItem_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetValidItem_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetValidItem_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetValidItem_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetValidItem_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetValidItem_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetValidItem_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetValidItem_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetValidItem_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetValidItem_1_tFlowToIterate_1 = 0;
int counter_EQGetValidItem_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetValidItem_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetVariantState_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetVariantState_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetVariantState_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetVariantState_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetVariantState_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetVariantState");
			
		int tos_count_EQGetVariantState_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetVariantState_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetVariantState_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetVariantState_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetVariantState_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetVariantState_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetVariantState_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetVariantState_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetVariantState_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetVariantState_1_tFlowToIterate_1 = 0;
int counter_EQGetVariantState_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetVariantState_1_tFlowToIterate_1 begin ] stop
 */




	
	/**
	 * [EQGetSkinORPart_1_tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_EQGetSkinORPart_1_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("EQGetSkinORPart_1_tFlowToIterate_1", false);
		start_Hash.put("EQGetSkinORPart_1_tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetSkinORPart_1_tFlowToIterate_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSkinORPart");
			
		int tos_count_EQGetSkinORPart_1_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSkinORPart_1_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSkinORPart_1_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_EQGetSkinORPart_1_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_EQGetSkinORPart_1_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_EQGetSkinORPart_1_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tFlowToIterate_1 - "  + (log4jParamters_EQGetSkinORPart_1_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_EQGetSkinORPart_1_tFlowToIterate_1().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSkinORPart_1_tFlowToIterate_1", "tFlowToIterate_1", "tFlowToIterate");
				talendJobLogProcess(globalMap);
			}
			

int nb_line_EQGetSkinORPart_1_tFlowToIterate_1 = 0;
int counter_EQGetSkinORPart_1_tFlowToIterate_1 = 0;

 



/**
 * [EQGetSkinORPart_1_tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tRESTRequest_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTRequest_1_In", false);
		start_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	
		int tos_count_tRESTRequest_1_In = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("tRESTRequest_1_In", "tRESTRequest_1_In", "tRESTRequestIn");
				talendJobLogProcess(globalMap);
			}
			
						resourceMap.remove("inIterateVComp");
					

 



/**
 * [tRESTRequest_1_In begin ] stop
 */
	
	/**
	 * [tRESTRequest_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

		if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong request received
						EQGetSkinORPart = null;
						EQGetVariantState = null;
						EQGetValidItem = null;
						EQGetUOMConv = null;
						EQGetSellTo = null;
						EQGetSecondaryPriceGroup = null;
						EQGetRRVendorNo = null;
						EQGetProdOrders = null;
						EQGetPriceGroupTier = null;
						EQGetParentLine = null;
						EQGetItemDesc = null;
						EQGetDwgNo = null;
						EQGetCTSolidSurfacePn = null;
						EQGetCTSkinPn = null;
						EQGetCountertopPNs = null;
						EQGetChassisPNs = null;
						EQGetChassisFCM = null;
						EQGetBillTo = null;
						EQGetAllCustomers = null;
						EQGetCustInfo = null;
		} else { // non-error (not wrong request)

			String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("PATTERN");
			String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("OPERATION");

			java.util.Map<String, Object> params_tRESTRequest_1 =
				(java.util.Map<String, Object>) requestMessage_tRESTRequest_1.get("PARAMS");
					if (matchedFlow_tRESTRequest_1.equals("EQGetSkinORPart")) {
						EQGetSkinORPart = new EQGetSkinORPartStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:itemId:id_String")) {
									
										
										EQGetSkinORPart.itemId = (String) params_tRESTRequest_1.get("QUERY:itemId:id_String");
									
								}
					} else { // non matched flow
						EQGetSkinORPart = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetVariantState")) {
						EQGetVariantState = new EQGetVariantStateStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:itemId:id_String")) {
									
										
										EQGetVariantState.itemId = (String) params_tRESTRequest_1.get("QUERY:itemId:id_String");
									
								}
					} else { // non matched flow
						EQGetVariantState = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetValidItem")) {
						EQGetValidItem = new EQGetValidItemStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:displayProductNumber:id_String")) {
									
										
										EQGetValidItem.displayProductNumber = (String) params_tRESTRequest_1.get("QUERY:displayProductNumber:id_String");
									
								}
					} else { // non matched flow
						EQGetValidItem = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetUOMConv")) {
						EQGetUOMConv = new EQGetUOMConvStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:displayProductNumber:id_String")) {
									
										
										EQGetUOMConv.displayProductNumber = (String) params_tRESTRequest_1.get("QUERY:displayProductNumber:id_String");
									
								}
					} else { // non matched flow
						EQGetUOMConv = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetSellTo")) {
						EQGetSellTo = new EQGetSellToStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:collectRefProdId:id_String")) {
									
										
										EQGetSellTo.collectRefProdId = (String) params_tRESTRequest_1.get("QUERY:collectRefProdId:id_String");
									
								}
					} else { // non matched flow
						EQGetSellTo = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetSecondaryPriceGroup")) {
						EQGetSecondaryPriceGroup = new EQGetSecondaryPriceGroupStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:accountNum:id_String")) {
									
										
										EQGetSecondaryPriceGroup.accountNum = (String) params_tRESTRequest_1.get("QUERY:accountNum:id_String");
									
								}
					} else { // non matched flow
						EQGetSecondaryPriceGroup = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetRRVendorNo")) {
						EQGetRRVendorNo = new EQGetRRVendorNoStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:site:id_String")) {
									
										
										EQGetRRVendorNo.site = (String) params_tRESTRequest_1.get("QUERY:site:id_String");
									
								}
								if (params_tRESTRequest_1.containsKey("QUERY:part:id_String")) {
									
										
										EQGetRRVendorNo.part = (String) params_tRESTRequest_1.get("QUERY:part:id_String");
									
								}
					} else { // non matched flow
						EQGetRRVendorNo = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetProdOrders")) {
						EQGetProdOrders = new EQGetProdOrdersStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:configureItemMaster:id_String")) {
									
										
										EQGetProdOrders.configureItemMaster = (String) params_tRESTRequest_1.get("QUERY:configureItemMaster:id_String");
									
								}
								if (params_tRESTRequest_1.containsKey("QUERY:inventLocationId:id_String")) {
									
										
										EQGetProdOrders.inventLocationId = (String) params_tRESTRequest_1.get("QUERY:inventLocationId:id_String");
									
								}
					} else { // non matched flow
						EQGetProdOrders = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetPriceGroupTier")) {
						EQGetPriceGroupTier = new EQGetPriceGroupTierStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:accountNum:id_String")) {
									
										
										EQGetPriceGroupTier.accountNum = (String) params_tRESTRequest_1.get("QUERY:accountNum:id_String");
									
								}
					} else { // non matched flow
						EQGetPriceGroupTier = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetParentLine")) {
						EQGetParentLine = new EQGetParentLineStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:salesId:id_String")) {
									
										
										EQGetParentLine.salesId = (String) params_tRESTRequest_1.get("QUERY:salesId:id_String");
									
								}
								if (params_tRESTRequest_1.containsKey("QUERY:lineNum:id_String")) {
									
										
										EQGetParentLine.lineNum = (String) params_tRESTRequest_1.get("QUERY:lineNum:id_String");
									
								}
					} else { // non matched flow
						EQGetParentLine = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetItemDesc")) {
						EQGetItemDesc = new EQGetItemDescStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:displayProductNumber:id_String")) {
									
										
										EQGetItemDesc.displayProductNumber = (String) params_tRESTRequest_1.get("QUERY:displayProductNumber:id_String");
									
								}
					} else { // non matched flow
						EQGetItemDesc = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetDwgNo")) {
						EQGetDwgNo = new EQGetDwgNoStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:displayProductNumber:id_String")) {
									
										
										EQGetDwgNo.displayProductNumber = (String) params_tRESTRequest_1.get("QUERY:displayProductNumber:id_String");
									
								}
					} else { // non matched flow
						EQGetDwgNo = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetCTSolidSurfacePn")) {
						EQGetCTSolidSurfacePn = new EQGetCTSolidSurfacePnStruct();
					} else { // non matched flow
						EQGetCTSolidSurfacePn = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetCTSkinPn")) {
						EQGetCTSkinPn = new EQGetCTSkinPnStruct();
					} else { // non matched flow
						EQGetCTSkinPn = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetCountertopPNs")) {
						EQGetCountertopPNs = new EQGetCountertopPNsStruct();
					} else { // non matched flow
						EQGetCountertopPNs = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetChassisPNs")) {
						EQGetChassisPNs = new EQGetChassisPNsStruct();
					} else { // non matched flow
						EQGetChassisPNs = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetChassisFCM")) {
						EQGetChassisFCM = new EQGetChassisFCMStruct();
					} else { // non matched flow
						EQGetChassisFCM = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetBillTo")) {
						EQGetBillTo = new EQGetBillToStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:collectRefProdId:id_String")) {
									
										
										EQGetBillTo.collectRefProdId = (String) params_tRESTRequest_1.get("QUERY:collectRefProdId:id_String");
									
								}
					} else { // non matched flow
						EQGetBillTo = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetAllCustomers")) {
						EQGetAllCustomers = new EQGetAllCustomersStruct();
					} else { // non matched flow
						EQGetAllCustomers = null;
					}
				
					if (matchedFlow_tRESTRequest_1.equals("EQGetCustInfo")) {
						EQGetCustInfo = new EQGetCustInfoStruct();
								if (params_tRESTRequest_1.containsKey("QUERY:accountNum:id_String")) {
									
										
										EQGetCustInfo.accountNum = (String) params_tRESTRequest_1.get("QUERY:accountNum:id_String");
									
								}
					} else { // non matched flow
						EQGetCustInfo = null;
					}
				
		}

		globalMap.put("tRESTRequest_1_URI", (String) requestMessage_tRESTRequest_1.get("URI"));
		globalMap.put("tRESTRequest_1_URI_BASE", (String) requestMessage_tRESTRequest_1.get("URI_BASE"));
		globalMap.put("tRESTRequest_1_URI_ABSOLUTE", (String) requestMessage_tRESTRequest_1.get("URI_ABSOLUTE"));
		globalMap.put("tRESTRequest_1_URI_REQUEST", (String) requestMessage_tRESTRequest_1.get("URI_REQUEST"));
		globalMap.put("tRESTRequest_1_HTTP_METHOD", (String) requestMessage_tRESTRequest_1.get("VERB"));

		globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS", requestMessage_tRESTRequest_1.get("ATTACHMENT_HEADERS"));
		globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES", requestMessage_tRESTRequest_1.get("ATTACHMENT_FILENAMES"));

		globalMap.put("tRESTRequest_1_PRINCIPAL_NAME", (String) requestMessage_tRESTRequest_1.get("PRINCIPAL_NAME"));
		globalMap.put("tRESTRequest_1_CORRELATION_ID", (String) requestMessage_tRESTRequest_1.get("CorrelationID"));

 


	tos_count_tRESTRequest_1_In++;

/**
 * [tRESTRequest_1_In main ] stop
 */
	
	/**
	 * [tRESTRequest_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

 



/**
 * [tRESTRequest_1_In process_data_begin ] stop
 */
// Start of branch "EQGetCustInfo"
if(EQGetCustInfo != null) { 



	
	/**
	 * [EQGetCustomerInfo_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCustInfo","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCustomerInfo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCustInfo - " + (EQGetCustInfo==null? "": EQGetCustInfo.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetCustomerInfo_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetCustInfo.accountNum, value=")  + (EQGetCustInfo.accountNum)  + (".") );            
            globalMap.put("EQGetCustInfo.accountNum", EQGetCustInfo.accountNum);
    	
 
	   nb_line_EQGetCustomerInfo_1_tFlowToIterate_1++;  
       counter_EQGetCustomerInfo_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetCustomerInfo_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetCustomerInfo_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetCustomerInfo_1_tFlowToIterate_1);
 


	tos_count_EQGetCustomerInfo_1_tFlowToIterate_1++;

/**
 * [EQGetCustomerInfo_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCustomerInfo_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetCustomerInfo_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCustomerInfo_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCustomerInfo_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCustomerInfo_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetCustomerInfo_1_iterate1", 1, "exec" + NB_ITERATE_EQGetCustomerInfo_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetCustomerInfo_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCustomerInfo_1_tJava_2", false);
		start_Hash.put("EQGetCustomerInfo_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCustomerInfo_1_tJava_2";
	
	
		int tos_count_EQGetCustomerInfo_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCustomerInfo_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
//System.out.println(((String)globalMap.get("EQGetCustInfo.accountNum")));
 



/**
 * [EQGetCustomerInfo_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tJava_2";
	
	

 


	tos_count_EQGetCustomerInfo_1_tJava_2++;

/**
 * [EQGetCustomerInfo_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tJava_2";
	
	

 



/**
 * [EQGetCustomerInfo_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tJava_2";
	
	

 



/**
 * [EQGetCustomerInfo_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tJava_2";
	
	

 

ok_Hash.put("EQGetCustomerInfo_1_tJava_2", true);
end_Hash.put("EQGetCustomerInfo_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetCustomerInfo_1_OnComponentOk1", 0, "ok");
				}
				EQGetCustomerInfo_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetCustomerInfo_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetCustomerInfo_1_iterate1", 2, "exec" + NB_ITERATE_EQGetCustomerInfo_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetCustomerInfo_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCustomerInfo_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetCustInfo"




// Start of branch "EQGetAllCustomers"
if(EQGetAllCustomers != null) { 



	
	/**
	 * [EQGetAllCustomers_1_tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tFlowToIterate_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetAllCustomers","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetAllCustomers_1_tFlowToIterate_2","tFlowToIterate_2","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetAllCustomers - " + (EQGetAllCustomers==null? "": EQGetAllCustomers.toLogString()));
    			}
    		


    	
 
	   nb_line_EQGetAllCustomers_1_tFlowToIterate_2++;  
       counter_EQGetAllCustomers_1_tFlowToIterate_2++;
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tFlowToIterate_2 - "  + ("Current iteration is: ")  + (counter_EQGetAllCustomers_1_tFlowToIterate_2)  + (".") );
       globalMap.put("EQGetAllCustomers_1_tFlowToIterate_2_CURRENT_ITERATION", counter_EQGetAllCustomers_1_tFlowToIterate_2);
 


	tos_count_EQGetAllCustomers_1_tFlowToIterate_2++;

/**
 * [EQGetAllCustomers_1_tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tFlowToIterate_2";
	
	

 



/**
 * [EQGetAllCustomers_1_tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_EQGetAllCustomers_1_tJava_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetAllCustomers_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetAllCustomers_1_row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetAllCustomers_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetAllCustomers_1_row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetAllCustomers_1_iterate1", 1, "exec" + NB_ITERATE_EQGetAllCustomers_1_tJava_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetAllCustomers_1_tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetAllCustomers_1_tJava_3", false);
		start_Hash.put("EQGetAllCustomers_1_tJava_3", System.currentTimeMillis());
		
	
	currentComponent="EQGetAllCustomers_1_tJava_3";
	
	
		int tos_count_EQGetAllCustomers_1_tJava_3 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetAllCustomers_1_tJava_3", "tJava_3", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetAllCustomers_1_tJava_3 begin ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tJava_3 main ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tJava_3";
	
	

 


	tos_count_EQGetAllCustomers_1_tJava_3++;

/**
 * [EQGetAllCustomers_1_tJava_3 main ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tJava_3";
	
	

 



/**
 * [EQGetAllCustomers_1_tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tJava_3";
	
	

 



/**
 * [EQGetAllCustomers_1_tJava_3 process_data_end ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tJava_3 end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tJava_3";
	
	

 

ok_Hash.put("EQGetAllCustomers_1_tJava_3", true);
end_Hash.put("EQGetAllCustomers_1_tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetAllCustomers_1_OnComponentOk1", 0, "ok");
				}
				EQGetAllCustomers_1_tAzureSynapseInput_2Process(globalMap);



/**
 * [EQGetAllCustomers_1_tJava_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetAllCustomers_1_iterate1", 2, "exec" + NB_ITERATE_EQGetAllCustomers_1_tJava_3);
						}				
					




	
	/**
	 * [EQGetAllCustomers_1_tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tFlowToIterate_2";
	
	

 



/**
 * [EQGetAllCustomers_1_tFlowToIterate_2 process_data_end ] stop
 */

} // End of branch "EQGetAllCustomers"




// Start of branch "EQGetBillTo"
if(EQGetBillTo != null) { 



	
	/**
	 * [EQGetBillTo_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetBillTo","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetBillTo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetBillTo - " + (EQGetBillTo==null? "": EQGetBillTo.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetBillTo_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetBillTo.collectRefProdId, value=")  + (EQGetBillTo.collectRefProdId)  + (".") );            
            globalMap.put("EQGetBillTo.collectRefProdId", EQGetBillTo.collectRefProdId);
    	
 
	   nb_line_EQGetBillTo_1_tFlowToIterate_1++;  
       counter_EQGetBillTo_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetBillTo_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetBillTo_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetBillTo_1_tFlowToIterate_1);
 


	tos_count_EQGetBillTo_1_tFlowToIterate_1++;

/**
 * [EQGetBillTo_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetBillTo_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetBillTo_1_tJava_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetBillTo_1_row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetBillTo_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetBillTo_1_row5", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetBillTo_1_iterate1", 1, "exec" + NB_ITERATE_EQGetBillTo_1_tJava_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetBillTo_1_tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetBillTo_1_tJava_1", false);
		start_Hash.put("EQGetBillTo_1_tJava_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetBillTo_1_tJava_1";
	
	
		int tos_count_EQGetBillTo_1_tJava_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetBillTo_1_tJava_1", "tJava_1", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
/*System.out.println(((String)globalMap.get("EQGetBillTo.collectRefProdId")));
System.out.println("SELECT * FROM ITG.EQGetBillTo WHERE COLLECTREFPRODID = '"+((String)globalMap.get("EQGetBillTo.collectRefProdId"))+"';");
*/
 



/**
 * [EQGetBillTo_1_tJava_1 begin ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tJava_1 main ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tJava_1";
	
	

 


	tos_count_EQGetBillTo_1_tJava_1++;

/**
 * [EQGetBillTo_1_tJava_1 main ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tJava_1";
	
	

 



/**
 * [EQGetBillTo_1_tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tJava_1";
	
	

 



/**
 * [EQGetBillTo_1_tJava_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tJava_1 end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tJava_1";
	
	

 

ok_Hash.put("EQGetBillTo_1_tJava_1", true);
end_Hash.put("EQGetBillTo_1_tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetBillTo_1_OnComponentOk1", 0, "ok");
				}
				EQGetBillTo_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetBillTo_1_tJava_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetBillTo_1_iterate1", 2, "exec" + NB_ITERATE_EQGetBillTo_1_tJava_1);
						}				
					




	
	/**
	 * [EQGetBillTo_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetBillTo_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetBillTo"




// Start of branch "EQGetChassisFCM"
if(EQGetChassisFCM != null) { 



	
	/**
	 * [EQGetChassisFCM_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisFCM","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetChassisFCM_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisFCM - " + (EQGetChassisFCM==null? "": EQGetChassisFCM.toLogString()));
    			}
    		


    	
 
	   nb_line_EQGetChassisFCM_1_tFlowToIterate_1++;  
       counter_EQGetChassisFCM_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetChassisFCM_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetChassisFCM_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetChassisFCM_1_tFlowToIterate_1);
 


	tos_count_EQGetChassisFCM_1_tFlowToIterate_1++;

/**
 * [EQGetChassisFCM_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetChassisFCM_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisFCM_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisFCM_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisFCM_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisFCM_1_OnComponentOk1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetChassisFCM_1_iterate1", 1, "exec" + NB_ITERATE_EQGetChassisFCM_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetChassisFCM_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisFCM_1_tJava_2", false);
		start_Hash.put("EQGetChassisFCM_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisFCM_1_tJava_2";
	
	
		int tos_count_EQGetChassisFCM_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisFCM_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetChassisFCM_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tJava_2";
	
	

 


	tos_count_EQGetChassisFCM_1_tJava_2++;

/**
 * [EQGetChassisFCM_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tJava_2";
	
	

 



/**
 * [EQGetChassisFCM_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tJava_2";
	
	

 



/**
 * [EQGetChassisFCM_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tJava_2";
	
	

 

ok_Hash.put("EQGetChassisFCM_1_tJava_2", true);
end_Hash.put("EQGetChassisFCM_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetChassisFCM_1_OnComponentOk1", 0, "ok");
				}
				EQGetChassisFCM_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetChassisFCM_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetChassisFCM_1_iterate1", 2, "exec" + NB_ITERATE_EQGetChassisFCM_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetChassisFCM_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetChassisFCM"




// Start of branch "EQGetChassisPNs"
if(EQGetChassisPNs != null) { 



	
	/**
	 * [EQGetChassisPNs_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisPNs","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetChassisPNs_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisPNs - " + (EQGetChassisPNs==null? "": EQGetChassisPNs.toLogString()));
    			}
    		


    	
 
	   nb_line_EQGetChassisPNs_1_tFlowToIterate_1++;  
       counter_EQGetChassisPNs_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetChassisPNs_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetChassisPNs_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetChassisPNs_1_tFlowToIterate_1);
 


	tos_count_EQGetChassisPNs_1_tFlowToIterate_1++;

/**
 * [EQGetChassisPNs_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetChassisPNs_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisPNs_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisPNs_1_row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisPNs_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetChassisPNs_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetChassisPNs_1_iterate1", 1, "exec" + NB_ITERATE_EQGetChassisPNs_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetChassisPNs_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisPNs_1_tJava_2", false);
		start_Hash.put("EQGetChassisPNs_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisPNs_1_tJava_2";
	
	
		int tos_count_EQGetChassisPNs_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisPNs_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetChassisPNs_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tJava_2";
	
	

 


	tos_count_EQGetChassisPNs_1_tJava_2++;

/**
 * [EQGetChassisPNs_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tJava_2";
	
	

 



/**
 * [EQGetChassisPNs_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tJava_2";
	
	

 



/**
 * [EQGetChassisPNs_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tJava_2";
	
	

 

ok_Hash.put("EQGetChassisPNs_1_tJava_2", true);
end_Hash.put("EQGetChassisPNs_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetChassisPNs_1_OnComponentOk1", 0, "ok");
				}
				EQGetChassisPNs_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetChassisPNs_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetChassisPNs_1_iterate1", 2, "exec" + NB_ITERATE_EQGetChassisPNs_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetChassisPNs_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetChassisPNs"




// Start of branch "EQGetCountertopPNs"
if(EQGetCountertopPNs != null) { 



	
	/**
	 * [EQGetCountertopPNs_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCountertopPNs","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCountertopPNs_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCountertopPNs - " + (EQGetCountertopPNs==null? "": EQGetCountertopPNs.toLogString()));
    			}
    		


    	
 
	   nb_line_EQGetCountertopPNs_1_tFlowToIterate_1++;  
       counter_EQGetCountertopPNs_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetCountertopPNs_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetCountertopPNs_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetCountertopPNs_1_tFlowToIterate_1);
 


	tos_count_EQGetCountertopPNs_1_tFlowToIterate_1++;

/**
 * [EQGetCountertopPNs_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetCountertopPNs_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCountertopPNs_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCountertopPNs_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCountertopPNs_1_row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCountertopPNs_1_row3", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetCountertopPNs_1_iterate1", 1, "exec" + NB_ITERATE_EQGetCountertopPNs_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetCountertopPNs_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCountertopPNs_1_tJava_2", false);
		start_Hash.put("EQGetCountertopPNs_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCountertopPNs_1_tJava_2";
	
	
		int tos_count_EQGetCountertopPNs_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCountertopPNs_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetCountertopPNs_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tJava_2";
	
	

 


	tos_count_EQGetCountertopPNs_1_tJava_2++;

/**
 * [EQGetCountertopPNs_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tJava_2";
	
	

 



/**
 * [EQGetCountertopPNs_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tJava_2";
	
	

 



/**
 * [EQGetCountertopPNs_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tJava_2";
	
	

 

ok_Hash.put("EQGetCountertopPNs_1_tJava_2", true);
end_Hash.put("EQGetCountertopPNs_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetCountertopPNs_1_OnComponentOk1", 0, "ok");
				}
				EQGetCountertopPNs_1_tAzureSynapseInput_2Process(globalMap);



/**
 * [EQGetCountertopPNs_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetCountertopPNs_1_iterate1", 2, "exec" + NB_ITERATE_EQGetCountertopPNs_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetCountertopPNs_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetCountertopPNs"




// Start of branch "EQGetCTSkinPn"
if(EQGetCTSkinPn != null) { 



	
	/**
	 * [EQGetCTSkinPn_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSkinPn","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCTSkinPn_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSkinPn - " + (EQGetCTSkinPn==null? "": EQGetCTSkinPn.toLogString()));
    			}
    		


    	
 
	   nb_line_EQGetCTSkinPn_1_tFlowToIterate_1++;  
       counter_EQGetCTSkinPn_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetCTSkinPn_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetCTSkinPn_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetCTSkinPn_1_tFlowToIterate_1);
 


	tos_count_EQGetCTSkinPn_1_tFlowToIterate_1++;

/**
 * [EQGetCTSkinPn_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetCTSkinPn_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSkinPn_1_row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSkinPn_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSkinPn_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSkinPn_1_row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetCTSkinPn_1_iterate1", 1, "exec" + NB_ITERATE_EQGetCTSkinPn_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetCTSkinPn_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSkinPn_1_tJava_2", false);
		start_Hash.put("EQGetCTSkinPn_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSkinPn_1_tJava_2";
	
	
		int tos_count_EQGetCTSkinPn_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSkinPn_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetCTSkinPn_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tJava_2";
	
	

 


	tos_count_EQGetCTSkinPn_1_tJava_2++;

/**
 * [EQGetCTSkinPn_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tJava_2";
	
	

 



/**
 * [EQGetCTSkinPn_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tJava_2";
	
	

 



/**
 * [EQGetCTSkinPn_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tJava_2";
	
	

 

ok_Hash.put("EQGetCTSkinPn_1_tJava_2", true);
end_Hash.put("EQGetCTSkinPn_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetCTSkinPn_1_OnComponentOk1", 0, "ok");
				}
				EQGetCTSkinPn_1_tAzureSynapseInput_2Process(globalMap);



/**
 * [EQGetCTSkinPn_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetCTSkinPn_1_iterate1", 2, "exec" + NB_ITERATE_EQGetCTSkinPn_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetCTSkinPn_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetCTSkinPn"




// Start of branch "EQGetCTSolidSurfacePn"
if(EQGetCTSolidSurfacePn != null) { 



	
	/**
	 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSolidSurfacePn","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCTSolidSurfacePn_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSolidSurfacePn - " + (EQGetCTSolidSurfacePn==null? "": EQGetCTSolidSurfacePn.toLogString()));
    			}
    		


    	
 
	   nb_line_EQGetCTSolidSurfacePn_1_tFlowToIterate_1++;  
       counter_EQGetCTSolidSurfacePn_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetCTSolidSurfacePn_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetCTSolidSurfacePn_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetCTSolidSurfacePn_1_tFlowToIterate_1);
 


	tos_count_EQGetCTSolidSurfacePn_1_tFlowToIterate_1++;

/**
 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetCTSolidSurfacePn_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSolidSurfacePn_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSolidSurfacePn_1_row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSolidSurfacePn_1_row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetCTSolidSurfacePn_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetCTSolidSurfacePn_1_iterate1", 1, "exec" + NB_ITERATE_EQGetCTSolidSurfacePn_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSolidSurfacePn_1_tJava_2", false);
		start_Hash.put("EQGetCTSolidSurfacePn_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSolidSurfacePn_1_tJava_2";
	
	
		int tos_count_EQGetCTSolidSurfacePn_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSolidSurfacePn_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetCTSolidSurfacePn_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tJava_2";
	
	

 


	tos_count_EQGetCTSolidSurfacePn_1_tJava_2++;

/**
 * [EQGetCTSolidSurfacePn_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tJava_2";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tJava_2";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tJava_2";
	
	

 

ok_Hash.put("EQGetCTSolidSurfacePn_1_tJava_2", true);
end_Hash.put("EQGetCTSolidSurfacePn_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetCTSolidSurfacePn_1_OnComponentOk1", 0, "ok");
				}
				EQGetCTSolidSurfacePn_1_tAzureSynapseInput_2Process(globalMap);



/**
 * [EQGetCTSolidSurfacePn_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetCTSolidSurfacePn_1_iterate1", 2, "exec" + NB_ITERATE_EQGetCTSolidSurfacePn_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetCTSolidSurfacePn"




// Start of branch "EQGetDwgNo"
if(EQGetDwgNo != null) { 



	
	/**
	 * [EQGetDwgNo_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetDwgNo","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetDwgNo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetDwgNo - " + (EQGetDwgNo==null? "": EQGetDwgNo.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetDwgNo_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetDwgNo.displayProductNumber, value=")  + (EQGetDwgNo.displayProductNumber)  + (".") );            
            globalMap.put("EQGetDwgNo.displayProductNumber", EQGetDwgNo.displayProductNumber);
    	
 
	   nb_line_EQGetDwgNo_1_tFlowToIterate_1++;  
       counter_EQGetDwgNo_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetDwgNo_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetDwgNo_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetDwgNo_1_tFlowToIterate_1);
 


	tos_count_EQGetDwgNo_1_tFlowToIterate_1++;

/**
 * [EQGetDwgNo_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetDwgNo_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetDwgNo_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetDwgNo_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetDwgNo_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetDwgNo_1_row5", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetDwgNo_1_iterate1", 1, "exec" + NB_ITERATE_EQGetDwgNo_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetDwgNo_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetDwgNo_1_tJava_2", false);
		start_Hash.put("EQGetDwgNo_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetDwgNo_1_tJava_2";
	
	
		int tos_count_EQGetDwgNo_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetDwgNo_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
System.out.println(((String)globalMap.get("EQGetDwgNo.displayProductNumber")));
 



/**
 * [EQGetDwgNo_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tJava_2";
	
	

 


	tos_count_EQGetDwgNo_1_tJava_2++;

/**
 * [EQGetDwgNo_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tJava_2";
	
	

 



/**
 * [EQGetDwgNo_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tJava_2";
	
	

 



/**
 * [EQGetDwgNo_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tJava_2";
	
	

 

ok_Hash.put("EQGetDwgNo_1_tJava_2", true);
end_Hash.put("EQGetDwgNo_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetDwgNo_1_OnComponentOk1", 0, "ok");
				}
				EQGetDwgNo_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetDwgNo_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetDwgNo_1_iterate1", 2, "exec" + NB_ITERATE_EQGetDwgNo_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetDwgNo_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetDwgNo_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetDwgNo"




// Start of branch "EQGetItemDesc"
if(EQGetItemDesc != null) { 



	
	/**
	 * [EQGetItemDesc_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetItemDesc","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetItemDesc_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetItemDesc - " + (EQGetItemDesc==null? "": EQGetItemDesc.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetItemDesc_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetItemDesc.displayProductNumber, value=")  + (EQGetItemDesc.displayProductNumber)  + (".") );            
            globalMap.put("EQGetItemDesc.displayProductNumber", EQGetItemDesc.displayProductNumber);
    	
 
	   nb_line_EQGetItemDesc_1_tFlowToIterate_1++;  
       counter_EQGetItemDesc_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetItemDesc_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetItemDesc_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetItemDesc_1_tFlowToIterate_1);
 


	tos_count_EQGetItemDesc_1_tFlowToIterate_1++;

/**
 * [EQGetItemDesc_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetItemDesc_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetItemDesc_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetItemDesc_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetItemDesc_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetItemDesc_1_OnComponentOk1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetItemDesc_1_iterate1", 1, "exec" + NB_ITERATE_EQGetItemDesc_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetItemDesc_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetItemDesc_1_tJava_2", false);
		start_Hash.put("EQGetItemDesc_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetItemDesc_1_tJava_2";
	
	
		int tos_count_EQGetItemDesc_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetItemDesc_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
System.out.println(((String)globalMap.get("EQGetItemDesc.displayProductNumber")));
 



/**
 * [EQGetItemDesc_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tJava_2";
	
	

 


	tos_count_EQGetItemDesc_1_tJava_2++;

/**
 * [EQGetItemDesc_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tJava_2";
	
	

 



/**
 * [EQGetItemDesc_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tJava_2";
	
	

 



/**
 * [EQGetItemDesc_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tJava_2";
	
	

 

ok_Hash.put("EQGetItemDesc_1_tJava_2", true);
end_Hash.put("EQGetItemDesc_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetItemDesc_1_OnComponentOk1", 0, "ok");
				}
				EQGetItemDesc_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetItemDesc_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetItemDesc_1_iterate1", 2, "exec" + NB_ITERATE_EQGetItemDesc_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetItemDesc_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetItemDesc_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetItemDesc"




// Start of branch "EQGetParentLine"
if(EQGetParentLine != null) { 



	
	/**
	 * [EQGetParentLine_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetParentLine","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetParentLine_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetParentLine - " + (EQGetParentLine==null? "": EQGetParentLine.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetParentLine_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetParentLine.salesId, value=")  + (EQGetParentLine.salesId)  + (".") );            
            globalMap.put("EQGetParentLine.salesId", EQGetParentLine.salesId);
    	
                if(log.isTraceEnabled())
            log.trace("EQGetParentLine_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetParentLine.lineNum, value=")  + (EQGetParentLine.lineNum)  + (".") );            
            globalMap.put("EQGetParentLine.lineNum", EQGetParentLine.lineNum);
    	
 
	   nb_line_EQGetParentLine_1_tFlowToIterate_1++;  
       counter_EQGetParentLine_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetParentLine_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetParentLine_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetParentLine_1_tFlowToIterate_1);
 


	tos_count_EQGetParentLine_1_tFlowToIterate_1++;

/**
 * [EQGetParentLine_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetParentLine_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetParentLine_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetParentLine_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetParentLine_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetParentLine_1_row5", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetParentLine_1_iterate1", 1, "exec" + NB_ITERATE_EQGetParentLine_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetParentLine_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetParentLine_1_tJava_2", false);
		start_Hash.put("EQGetParentLine_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetParentLine_1_tJava_2";
	
	
		int tos_count_EQGetParentLine_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetParentLine_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetParentLine_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tJava_2";
	
	

 


	tos_count_EQGetParentLine_1_tJava_2++;

/**
 * [EQGetParentLine_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tJava_2";
	
	

 



/**
 * [EQGetParentLine_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tJava_2";
	
	

 



/**
 * [EQGetParentLine_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tJava_2";
	
	

 

ok_Hash.put("EQGetParentLine_1_tJava_2", true);
end_Hash.put("EQGetParentLine_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetParentLine_1_OnComponentOk1", 0, "ok");
				}
				EQGetParentLine_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetParentLine_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetParentLine_1_iterate1", 2, "exec" + NB_ITERATE_EQGetParentLine_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetParentLine_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetParentLine_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetParentLine"




// Start of branch "EQGetPriceGroupTier"
if(EQGetPriceGroupTier != null) { 



	
	/**
	 * [EQGetPriceGroupTier_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetPriceGroupTier","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetPriceGroupTier_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetPriceGroupTier - " + (EQGetPriceGroupTier==null? "": EQGetPriceGroupTier.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetPriceGroupTier_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetPriceGroupTier.accountNum, value=")  + (EQGetPriceGroupTier.accountNum)  + (".") );            
            globalMap.put("EQGetPriceGroupTier.accountNum", EQGetPriceGroupTier.accountNum);
    	
 
	   nb_line_EQGetPriceGroupTier_1_tFlowToIterate_1++;  
       counter_EQGetPriceGroupTier_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetPriceGroupTier_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetPriceGroupTier_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetPriceGroupTier_1_tFlowToIterate_1);
 


	tos_count_EQGetPriceGroupTier_1_tFlowToIterate_1++;

/**
 * [EQGetPriceGroupTier_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetPriceGroupTier_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetPriceGroupTier_1_out", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetPriceGroupTier_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetPriceGroupTier_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetPriceGroupTier_1_row5", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetPriceGroupTier_1_iterate1", 1, "exec" + NB_ITERATE_EQGetPriceGroupTier_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetPriceGroupTier_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetPriceGroupTier_1_tJava_2", false);
		start_Hash.put("EQGetPriceGroupTier_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetPriceGroupTier_1_tJava_2";
	
	
		int tos_count_EQGetPriceGroupTier_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetPriceGroupTier_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetPriceGroupTier_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tJava_2";
	
	

 


	tos_count_EQGetPriceGroupTier_1_tJava_2++;

/**
 * [EQGetPriceGroupTier_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tJava_2";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tJava_2";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tJava_2";
	
	

 

ok_Hash.put("EQGetPriceGroupTier_1_tJava_2", true);
end_Hash.put("EQGetPriceGroupTier_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetPriceGroupTier_1_OnComponentOk1", 0, "ok");
				}
				EQGetPriceGroupTier_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetPriceGroupTier_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetPriceGroupTier_1_iterate1", 2, "exec" + NB_ITERATE_EQGetPriceGroupTier_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetPriceGroupTier_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetPriceGroupTier"




// Start of branch "EQGetProdOrders"
if(EQGetProdOrders != null) { 



	
	/**
	 * [EQGetProdOrders_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetProdOrders","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetProdOrders_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetProdOrders - " + (EQGetProdOrders==null? "": EQGetProdOrders.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetProdOrders_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetProdOrders.configureItemMaster, value=")  + (EQGetProdOrders.configureItemMaster)  + (".") );            
            globalMap.put("EQGetProdOrders.configureItemMaster", EQGetProdOrders.configureItemMaster);
    	
                if(log.isTraceEnabled())
            log.trace("EQGetProdOrders_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetProdOrders.inventLocationId, value=")  + (EQGetProdOrders.inventLocationId)  + (".") );            
            globalMap.put("EQGetProdOrders.inventLocationId", EQGetProdOrders.inventLocationId);
    	
 
	   nb_line_EQGetProdOrders_1_tFlowToIterate_1++;  
       counter_EQGetProdOrders_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetProdOrders_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetProdOrders_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetProdOrders_1_tFlowToIterate_1);
 


	tos_count_EQGetProdOrders_1_tFlowToIterate_1++;

/**
 * [EQGetProdOrders_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetProdOrders_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetProdOrders_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetProdOrders_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetProdOrders_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetProdOrders_1_row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetProdOrders_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetProdOrders_1_iterate1", 1, "exec" + NB_ITERATE_EQGetProdOrders_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetProdOrders_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetProdOrders_1_tJava_2", false);
		start_Hash.put("EQGetProdOrders_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetProdOrders_1_tJava_2";
	
	
		int tos_count_EQGetProdOrders_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetProdOrders_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetProdOrders_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tJava_2";
	
	

 


	tos_count_EQGetProdOrders_1_tJava_2++;

/**
 * [EQGetProdOrders_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tJava_2";
	
	

 



/**
 * [EQGetProdOrders_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tJava_2";
	
	

 



/**
 * [EQGetProdOrders_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tJava_2";
	
	

 

ok_Hash.put("EQGetProdOrders_1_tJava_2", true);
end_Hash.put("EQGetProdOrders_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetProdOrders_1_OnComponentOk1", 0, "ok");
				}
				EQGetProdOrders_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetProdOrders_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetProdOrders_1_iterate1", 2, "exec" + NB_ITERATE_EQGetProdOrders_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetProdOrders_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetProdOrders_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetProdOrders"




// Start of branch "EQGetRRVendorNo"
if(EQGetRRVendorNo != null) { 



	
	/**
	 * [EQGetRRVendorNo_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetRRVendorNo","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetRRVendorNo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetRRVendorNo - " + (EQGetRRVendorNo==null? "": EQGetRRVendorNo.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetRRVendorNo_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetRRVendorNo.site, value=")  + (EQGetRRVendorNo.site)  + (".") );            
            globalMap.put("EQGetRRVendorNo.site", EQGetRRVendorNo.site);
    	
                if(log.isTraceEnabled())
            log.trace("EQGetRRVendorNo_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetRRVendorNo.part, value=")  + (EQGetRRVendorNo.part)  + (".") );            
            globalMap.put("EQGetRRVendorNo.part", EQGetRRVendorNo.part);
    	
 
	   nb_line_EQGetRRVendorNo_1_tFlowToIterate_1++;  
       counter_EQGetRRVendorNo_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetRRVendorNo_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetRRVendorNo_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetRRVendorNo_1_tFlowToIterate_1);
 


	tos_count_EQGetRRVendorNo_1_tFlowToIterate_1++;

/**
 * [EQGetRRVendorNo_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetRRVendorNo_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetRRVendorNo_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetRRVendorNo_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetRRVendorNo_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetRRVendorNo_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetRRVendorNo_1_iterate1", 1, "exec" + NB_ITERATE_EQGetRRVendorNo_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetRRVendorNo_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetRRVendorNo_1_tJava_2", false);
		start_Hash.put("EQGetRRVendorNo_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetRRVendorNo_1_tJava_2";
	
	
		int tos_count_EQGetRRVendorNo_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetRRVendorNo_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetRRVendorNo_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tJava_2";
	
	

 


	tos_count_EQGetRRVendorNo_1_tJava_2++;

/**
 * [EQGetRRVendorNo_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tJava_2";
	
	

 



/**
 * [EQGetRRVendorNo_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tJava_2";
	
	

 



/**
 * [EQGetRRVendorNo_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tJava_2";
	
	

 

ok_Hash.put("EQGetRRVendorNo_1_tJava_2", true);
end_Hash.put("EQGetRRVendorNo_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetRRVendorNo_1_OnComponentOk1", 0, "ok");
				}
				EQGetRRVendorNo_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetRRVendorNo_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetRRVendorNo_1_iterate1", 2, "exec" + NB_ITERATE_EQGetRRVendorNo_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetRRVendorNo_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetRRVendorNo_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetRRVendorNo"




// Start of branch "EQGetSecondaryPriceGroup"
if(EQGetSecondaryPriceGroup != null) { 



	
	/**
	 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSecondaryPriceGroup","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetSecondaryPriceGroup_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSecondaryPriceGroup - " + (EQGetSecondaryPriceGroup==null? "": EQGetSecondaryPriceGroup.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetSecondaryPriceGroup_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetSecondaryPriceGroup.accountNum, value=")  + (EQGetSecondaryPriceGroup.accountNum)  + (".") );            
            globalMap.put("EQGetSecondaryPriceGroup.accountNum", EQGetSecondaryPriceGroup.accountNum);
    	
 
	   nb_line_EQGetSecondaryPriceGroup_1_tFlowToIterate_1++;  
       counter_EQGetSecondaryPriceGroup_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetSecondaryPriceGroup_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetSecondaryPriceGroup_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetSecondaryPriceGroup_1_tFlowToIterate_1);
 


	tos_count_EQGetSecondaryPriceGroup_1_tFlowToIterate_1++;

/**
 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetSecondaryPriceGroup_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSecondaryPriceGroup_1_out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSecondaryPriceGroup_1_row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSecondaryPriceGroup_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSecondaryPriceGroup_1_row2", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetSecondaryPriceGroup_1_iterate1", 1, "exec" + NB_ITERATE_EQGetSecondaryPriceGroup_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSecondaryPriceGroup_1_tJava_2", false);
		start_Hash.put("EQGetSecondaryPriceGroup_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetSecondaryPriceGroup_1_tJava_2";
	
	
		int tos_count_EQGetSecondaryPriceGroup_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSecondaryPriceGroup_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
//System.out.println(((String)globalMap.get("EQGetCustInfo.accountNum")));
 



/**
 * [EQGetSecondaryPriceGroup_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tJava_2";
	
	

 


	tos_count_EQGetSecondaryPriceGroup_1_tJava_2++;

/**
 * [EQGetSecondaryPriceGroup_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tJava_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tJava_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tJava_2";
	
	

 

ok_Hash.put("EQGetSecondaryPriceGroup_1_tJava_2", true);
end_Hash.put("EQGetSecondaryPriceGroup_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetSecondaryPriceGroup_1_OnComponentOk1", 0, "ok");
				}
				EQGetSecondaryPriceGroup_1_tAzureSynapseInput_2Process(globalMap);



/**
 * [EQGetSecondaryPriceGroup_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetSecondaryPriceGroup_1_iterate1", 2, "exec" + NB_ITERATE_EQGetSecondaryPriceGroup_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetSecondaryPriceGroup"




// Start of branch "EQGetSellTo"
if(EQGetSellTo != null) { 



	
	/**
	 * [EQGetSellTo_1_tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tFlowToIterate_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSellTo","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetSellTo_1_tFlowToIterate_2","tFlowToIterate_2","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSellTo - " + (EQGetSellTo==null? "": EQGetSellTo.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetSellTo_1_tFlowToIterate_2 - "  + ("Set global var, key=EQGetSellTo.collectRefProdId, value=")  + (EQGetSellTo.collectRefProdId)  + (".") );            
            globalMap.put("EQGetSellTo.collectRefProdId", EQGetSellTo.collectRefProdId);
    	
 
	   nb_line_EQGetSellTo_1_tFlowToIterate_2++;  
       counter_EQGetSellTo_1_tFlowToIterate_2++;
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tFlowToIterate_2 - "  + ("Current iteration is: ")  + (counter_EQGetSellTo_1_tFlowToIterate_2)  + (".") );
       globalMap.put("EQGetSellTo_1_tFlowToIterate_2_CURRENT_ITERATION", counter_EQGetSellTo_1_tFlowToIterate_2);
 


	tos_count_EQGetSellTo_1_tFlowToIterate_2++;

/**
 * [EQGetSellTo_1_tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tFlowToIterate_2";
	
	

 



/**
 * [EQGetSellTo_1_tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_EQGetSellTo_1_tJava_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSellTo_1_row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSellTo_1_OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSellTo_1_row3", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetSellTo_1_iterate2", 1, "exec" + NB_ITERATE_EQGetSellTo_1_tJava_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetSellTo_1_tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSellTo_1_tJava_1", false);
		start_Hash.put("EQGetSellTo_1_tJava_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetSellTo_1_tJava_1";
	
	
		int tos_count_EQGetSellTo_1_tJava_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSellTo_1_tJava_1", "tJava_1", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
/*System.out.println(((String)globalMap.get("EQGetBillTo.collectRefProdId")));
System.out.println("SELECT * FROM ITG.EQGetBillTo WHERE COLLECTREFPRODID = '"+((String)globalMap.get("EQGetBillTo.collectRefProdId"))+"';");
*/
 



/**
 * [EQGetSellTo_1_tJava_1 begin ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tJava_1 main ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tJava_1";
	
	

 


	tos_count_EQGetSellTo_1_tJava_1++;

/**
 * [EQGetSellTo_1_tJava_1 main ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tJava_1";
	
	

 



/**
 * [EQGetSellTo_1_tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tJava_1";
	
	

 



/**
 * [EQGetSellTo_1_tJava_1 process_data_end ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tJava_1 end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tJava_1";
	
	

 

ok_Hash.put("EQGetSellTo_1_tJava_1", true);
end_Hash.put("EQGetSellTo_1_tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetSellTo_1_OnComponentOk2", 0, "ok");
				}
				EQGetSellTo_1_tAzureSynapseInput_2Process(globalMap);



/**
 * [EQGetSellTo_1_tJava_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetSellTo_1_iterate2", 2, "exec" + NB_ITERATE_EQGetSellTo_1_tJava_1);
						}				
					




	
	/**
	 * [EQGetSellTo_1_tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tFlowToIterate_2";
	
	

 



/**
 * [EQGetSellTo_1_tFlowToIterate_2 process_data_end ] stop
 */

} // End of branch "EQGetSellTo"




// Start of branch "EQGetUOMConv"
if(EQGetUOMConv != null) { 



	
	/**
	 * [EQGetUOMConv_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetUOMConv","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetUOMConv_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetUOMConv - " + (EQGetUOMConv==null? "": EQGetUOMConv.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetUOMConv_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetUOMConv.displayProductNumber, value=")  + (EQGetUOMConv.displayProductNumber)  + (".") );            
            globalMap.put("EQGetUOMConv.displayProductNumber", EQGetUOMConv.displayProductNumber);
    	
 
	   nb_line_EQGetUOMConv_1_tFlowToIterate_1++;  
       counter_EQGetUOMConv_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetUOMConv_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetUOMConv_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetUOMConv_1_tFlowToIterate_1);
 


	tos_count_EQGetUOMConv_1_tFlowToIterate_1++;

/**
 * [EQGetUOMConv_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetUOMConv_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetUOMConv_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetUOMConv_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetUOMConv_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetUOMConv_1_row1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetUOMConv_1_iterate1", 1, "exec" + NB_ITERATE_EQGetUOMConv_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetUOMConv_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetUOMConv_1_tJava_2", false);
		start_Hash.put("EQGetUOMConv_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetUOMConv_1_tJava_2";
	
	
		int tos_count_EQGetUOMConv_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetUOMConv_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetUOMConv_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tJava_2";
	
	

 


	tos_count_EQGetUOMConv_1_tJava_2++;

/**
 * [EQGetUOMConv_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tJava_2";
	
	

 



/**
 * [EQGetUOMConv_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tJava_2";
	
	

 



/**
 * [EQGetUOMConv_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tJava_2";
	
	

 

ok_Hash.put("EQGetUOMConv_1_tJava_2", true);
end_Hash.put("EQGetUOMConv_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetUOMConv_1_OnComponentOk1", 0, "ok");
				}
				EQGetUOMConv_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetUOMConv_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetUOMConv_1_iterate1", 2, "exec" + NB_ITERATE_EQGetUOMConv_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetUOMConv_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetUOMConv_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetUOMConv"




// Start of branch "EQGetValidItem"
if(EQGetValidItem != null) { 



	
	/**
	 * [EQGetValidItem_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetValidItem","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetValidItem_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetValidItem - " + (EQGetValidItem==null? "": EQGetValidItem.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetValidItem_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetValidItem.displayProductNumber, value=")  + (EQGetValidItem.displayProductNumber)  + (".") );            
            globalMap.put("EQGetValidItem.displayProductNumber", EQGetValidItem.displayProductNumber);
    	
 
	   nb_line_EQGetValidItem_1_tFlowToIterate_1++;  
       counter_EQGetValidItem_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetValidItem_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetValidItem_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetValidItem_1_tFlowToIterate_1);
 


	tos_count_EQGetValidItem_1_tFlowToIterate_1++;

/**
 * [EQGetValidItem_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetValidItem_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetValidItem_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetValidItem_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetValidItem_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetValidItem_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetValidItem_1_iterate1", 1, "exec" + NB_ITERATE_EQGetValidItem_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetValidItem_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetValidItem_1_tJava_2", false);
		start_Hash.put("EQGetValidItem_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetValidItem_1_tJava_2";
	
	
		int tos_count_EQGetValidItem_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetValidItem_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
//System.out.println(((String)globalMap.get("EQGetCustInfo.accountNum")));
 



/**
 * [EQGetValidItem_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tJava_2";
	
	

 


	tos_count_EQGetValidItem_1_tJava_2++;

/**
 * [EQGetValidItem_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tJava_2";
	
	

 



/**
 * [EQGetValidItem_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tJava_2";
	
	

 



/**
 * [EQGetValidItem_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tJava_2";
	
	

 

ok_Hash.put("EQGetValidItem_1_tJava_2", true);
end_Hash.put("EQGetValidItem_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetValidItem_1_OnComponentOk1", 0, "ok");
				}
				EQGetValidItem_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetValidItem_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetValidItem_1_iterate1", 2, "exec" + NB_ITERATE_EQGetValidItem_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetValidItem_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetValidItem_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetValidItem"




// Start of branch "EQGetVariantState"
if(EQGetVariantState != null) { 



	
	/**
	 * [EQGetVariantState_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetVariantState","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetVariantState_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetVariantState - " + (EQGetVariantState==null? "": EQGetVariantState.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetVariantState_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetVariantState.itemId, value=")  + (EQGetVariantState.itemId)  + (".") );            
            globalMap.put("EQGetVariantState.itemId", EQGetVariantState.itemId);
    	
 
	   nb_line_EQGetVariantState_1_tFlowToIterate_1++;  
       counter_EQGetVariantState_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetVariantState_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetVariantState_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetVariantState_1_tFlowToIterate_1);
 


	tos_count_EQGetVariantState_1_tFlowToIterate_1++;

/**
 * [EQGetVariantState_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetVariantState_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetVariantState_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetVariantState_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetVariantState_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetVariantState_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetVariantState_1_iterate1", 1, "exec" + NB_ITERATE_EQGetVariantState_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetVariantState_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetVariantState_1_tJava_2", false);
		start_Hash.put("EQGetVariantState_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetVariantState_1_tJava_2";
	
	
		int tos_count_EQGetVariantState_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetVariantState_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";

 



/**
 * [EQGetVariantState_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tJava_2";
	
	

 


	tos_count_EQGetVariantState_1_tJava_2++;

/**
 * [EQGetVariantState_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tJava_2";
	
	

 



/**
 * [EQGetVariantState_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tJava_2";
	
	

 



/**
 * [EQGetVariantState_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tJava_2";
	
	

 

ok_Hash.put("EQGetVariantState_1_tJava_2", true);
end_Hash.put("EQGetVariantState_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetVariantState_1_OnComponentOk1", 0, "ok");
				}
				EQGetVariantState_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetVariantState_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetVariantState_1_iterate1", 2, "exec" + NB_ITERATE_EQGetVariantState_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetVariantState_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetVariantState_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetVariantState"




// Start of branch "EQGetSkinORPart"
if(EQGetSkinORPart != null) { 



	
	/**
	 * [EQGetSkinORPart_1_tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tFlowToIterate_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSkinORPart","tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetSkinORPart_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSkinORPart - " + (EQGetSkinORPart==null? "": EQGetSkinORPart.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("EQGetSkinORPart_1_tFlowToIterate_1 - "  + ("Set global var, key=EQGetSkinORPart.itemId, value=")  + (EQGetSkinORPart.itemId)  + (".") );            
            globalMap.put("EQGetSkinORPart.itemId", EQGetSkinORPart.itemId);
    	
 
	   nb_line_EQGetSkinORPart_1_tFlowToIterate_1++;  
       counter_EQGetSkinORPart_1_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_EQGetSkinORPart_1_tFlowToIterate_1)  + (".") );
       globalMap.put("EQGetSkinORPart_1_tFlowToIterate_1_CURRENT_ITERATION", counter_EQGetSkinORPart_1_tFlowToIterate_1);
 


	tos_count_EQGetSkinORPart_1_tFlowToIterate_1++;

/**
 * [EQGetSkinORPart_1_tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_EQGetSkinORPart_1_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSkinORPart_1_row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSkinORPart_1_row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSkinORPart_1_outItems", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("EQGetSkinORPart_1_OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("EQGetSkinORPart_1_iterate1", 1, "exec" + NB_ITERATE_EQGetSkinORPart_1_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [EQGetSkinORPart_1_tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSkinORPart_1_tJava_2", false);
		start_Hash.put("EQGetSkinORPart_1_tJava_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetSkinORPart_1_tJava_2";
	
	
		int tos_count_EQGetSkinORPart_1_tJava_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSkinORPart_1_tJava_2", "tJava_2", "tJava");
				talendJobLogProcess(globalMap);
			}
			


String foo = "bar";
System.out.println(((String)globalMap.get("EQGetSkinORPart.itemId")));
 



/**
 * [EQGetSkinORPart_1_tJava_2 begin ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tJava_2 main ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tJava_2";
	
	

 


	tos_count_EQGetSkinORPart_1_tJava_2++;

/**
 * [EQGetSkinORPart_1_tJava_2 main ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tJava_2";
	
	

 



/**
 * [EQGetSkinORPart_1_tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tJava_2";
	
	

 



/**
 * [EQGetSkinORPart_1_tJava_2 process_data_end ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tJava_2 end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tJava_2";
	
	

 

ok_Hash.put("EQGetSkinORPart_1_tJava_2", true);
end_Hash.put("EQGetSkinORPart_1_tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("EQGetSkinORPart_1_OnComponentOk1", 0, "ok");
				}
				EQGetSkinORPart_1_tAzureSynapseInput_1Process(globalMap);



/**
 * [EQGetSkinORPart_1_tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("EQGetSkinORPart_1_iterate1", 2, "exec" + NB_ITERATE_EQGetSkinORPart_1_tJava_2);
						}				
					




	
	/**
	 * [EQGetSkinORPart_1_tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "EQGetSkinORPart"




	
	/**
	 * [tRESTRequest_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

 



/**
 * [tRESTRequest_1_In process_data_end ] stop
 */
	
	/**
	 * [tRESTRequest_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	
						resourceMap.put("inIterateVComp", true);
					

 

ok_Hash.put("tRESTRequest_1_In", true);
end_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());




/**
 * [tRESTRequest_1_In end ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetCustomerInfo_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetCustomerInfo_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCustInfo",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCustomerInfo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetCustomerInfo_1_tFlowToIterate_1", true);
end_Hash.put("EQGetCustomerInfo_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetCustomerInfo_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetAllCustomers_1_tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tFlowToIterate_2";
	
	

globalMap.put("EQGetAllCustomers_1_tFlowToIterate_2_NB_LINE",nb_line_EQGetAllCustomers_1_tFlowToIterate_2);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetAllCustomers",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetAllCustomers_1_tFlowToIterate_2","tFlowToIterate_2","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tFlowToIterate_2 - "  + ("Done.") );

ok_Hash.put("EQGetAllCustomers_1_tFlowToIterate_2", true);
end_Hash.put("EQGetAllCustomers_1_tFlowToIterate_2", System.currentTimeMillis());




/**
 * [EQGetAllCustomers_1_tFlowToIterate_2 end ] stop
 */




	
	/**
	 * [EQGetBillTo_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetBillTo_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetBillTo_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetBillTo",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetBillTo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetBillTo_1_tFlowToIterate_1", true);
end_Hash.put("EQGetBillTo_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetBillTo_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetChassisFCM_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetChassisFCM_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetChassisFCM_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisFCM",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetChassisFCM_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetChassisFCM_1_tFlowToIterate_1", true);
end_Hash.put("EQGetChassisFCM_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetChassisFCM_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetChassisPNs_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetChassisPNs_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetChassisPNs_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisPNs",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetChassisPNs_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetChassisPNs_1_tFlowToIterate_1", true);
end_Hash.put("EQGetChassisPNs_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetChassisPNs_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetCountertopPNs_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetCountertopPNs_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetCountertopPNs_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCountertopPNs",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCountertopPNs_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetCountertopPNs_1_tFlowToIterate_1", true);
end_Hash.put("EQGetCountertopPNs_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetCountertopPNs_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetCTSkinPn_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetCTSkinPn_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetCTSkinPn_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSkinPn",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCTSkinPn_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetCTSkinPn_1_tFlowToIterate_1", true);
end_Hash.put("EQGetCTSkinPn_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetCTSkinPn_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetCTSolidSurfacePn_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetCTSolidSurfacePn_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSolidSurfacePn",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetCTSolidSurfacePn_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetCTSolidSurfacePn_1_tFlowToIterate_1", true);
end_Hash.put("EQGetCTSolidSurfacePn_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetDwgNo_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetDwgNo_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetDwgNo_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetDwgNo",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetDwgNo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetDwgNo_1_tFlowToIterate_1", true);
end_Hash.put("EQGetDwgNo_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetDwgNo_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetItemDesc_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetItemDesc_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetItemDesc_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetItemDesc",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetItemDesc_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetItemDesc_1_tFlowToIterate_1", true);
end_Hash.put("EQGetItemDesc_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetItemDesc_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetParentLine_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetParentLine_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetParentLine_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetParentLine",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetParentLine_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetParentLine_1_tFlowToIterate_1", true);
end_Hash.put("EQGetParentLine_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetParentLine_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetPriceGroupTier_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetPriceGroupTier_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetPriceGroupTier_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetPriceGroupTier",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetPriceGroupTier_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetPriceGroupTier_1_tFlowToIterate_1", true);
end_Hash.put("EQGetPriceGroupTier_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetPriceGroupTier_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetProdOrders_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetProdOrders_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetProdOrders_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetProdOrders",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetProdOrders_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetProdOrders_1_tFlowToIterate_1", true);
end_Hash.put("EQGetProdOrders_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetProdOrders_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetRRVendorNo_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetRRVendorNo_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetRRVendorNo_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetRRVendorNo",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetRRVendorNo_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetRRVendorNo_1_tFlowToIterate_1", true);
end_Hash.put("EQGetRRVendorNo_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetRRVendorNo_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetSecondaryPriceGroup_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetSecondaryPriceGroup_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSecondaryPriceGroup",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetSecondaryPriceGroup_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetSecondaryPriceGroup_1_tFlowToIterate_1", true);
end_Hash.put("EQGetSecondaryPriceGroup_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetSellTo_1_tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tFlowToIterate_2";
	
	

globalMap.put("EQGetSellTo_1_tFlowToIterate_2_NB_LINE",nb_line_EQGetSellTo_1_tFlowToIterate_2);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSellTo",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetSellTo_1_tFlowToIterate_2","tFlowToIterate_2","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tFlowToIterate_2 - "  + ("Done.") );

ok_Hash.put("EQGetSellTo_1_tFlowToIterate_2", true);
end_Hash.put("EQGetSellTo_1_tFlowToIterate_2", System.currentTimeMillis());




/**
 * [EQGetSellTo_1_tFlowToIterate_2 end ] stop
 */




	
	/**
	 * [EQGetUOMConv_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetUOMConv_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetUOMConv_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetUOMConv",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetUOMConv_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetUOMConv_1_tFlowToIterate_1", true);
end_Hash.put("EQGetUOMConv_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetUOMConv_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetValidItem_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetValidItem_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetValidItem_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetValidItem",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetValidItem_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetValidItem_1_tFlowToIterate_1", true);
end_Hash.put("EQGetValidItem_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetValidItem_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetVariantState_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetVariantState_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetVariantState_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetVariantState",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetVariantState_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetVariantState_1_tFlowToIterate_1", true);
end_Hash.put("EQGetVariantState_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetVariantState_1_tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [EQGetSkinORPart_1_tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tFlowToIterate_1";
	
	

globalMap.put("EQGetSkinORPart_1_tFlowToIterate_1_NB_LINE",nb_line_EQGetSkinORPart_1_tFlowToIterate_1);
			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSkinORPart",2,0,
			 			"tRESTRequest_1_In","tRESTRequest_1_In","tRESTRequestIn","EQGetSkinORPart_1_tFlowToIterate_1","tFlowToIterate_1","tFlowToIterate","output")) {
						talendJobLogProcess(globalMap);
					}
				
 
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("EQGetSkinORPart_1_tFlowToIterate_1", true);
end_Hash.put("EQGetSkinORPart_1_tFlowToIterate_1", System.currentTimeMillis());




/**
 * [EQGetSkinORPart_1_tFlowToIterate_1 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("Iterate", 2, "exec" + NB_ITERATE_tRESTRequest_1_In);
						}				
					




	
	/**
	 * [tRESTRequest_1_Loop process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	

 



/**
 * [tRESTRequest_1_Loop process_data_end ] stop
 */
	
	/**
	 * [tRESTRequest_1_Loop end ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	
				resourceMap.remove("inIterateVComp");
			
	} catch (Throwable e_tRESTRequest_1) {
        if (e_tRESTRequest_1 instanceof Exception) {
			new TalendException((Exception) e_tRESTRequest_1, currentComponent, globalMap).printStackTrace();
        } else {
			new TalendException(new RuntimeException (e_tRESTRequest_1), currentComponent, globalMap).printStackTrace();
       	}
		if(!globalMap.containsKey("restResponse")){
			java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			restFault_tRESTRequest_1.put("STATUS", 500);
			restFault_tRESTRequest_1.put("BODY", e_tRESTRequest_1.getMessage());
			globalMap.put("restResponse", restFault_tRESTRequest_1);
		}
		return;
	}
	nb_line_tRESTRequest_1++;
	globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

			runStat.updateStatAndLog(execStat,enableLogStash,iterateId,2,0,"EQGetCustInfo","EQGetAllCustomers","EQGetBillTo","EQGetChassisFCM","EQGetChassisPNs","EQGetCountertopPNs","EQGetCTSkinPn","EQGetCTSolidSurfacePn","EQGetDwgNo","EQGetItemDesc","EQGetParentLine","EQGetPriceGroupTier","EQGetProdOrders","EQGetRRVendorNo","EQGetSecondaryPriceGroup","EQGetSellTo","EQGetUOMConv","EQGetValidItem","EQGetVariantState","EQGetSkinORPart");
			
 

ok_Hash.put("tRESTRequest_1_Loop", true);
end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());




/**
 * [tRESTRequest_1_Loop end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRESTRequest_1_Loop finally ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_Loop";
	
	

 



/**
 * [tRESTRequest_1_Loop finally ] stop
 */

	
	/**
	 * [tRESTRequest_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tRESTRequest_1";
	
	currentComponent="tRESTRequest_1_In";
	
	

 



/**
 * [tRESTRequest_1_In finally ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCustomerInfo_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tJava_2";
	
	

 



/**
 * [EQGetCustomerInfo_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetAllCustomers_1_tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tFlowToIterate_2";
	
	

 



/**
 * [EQGetAllCustomers_1_tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tJava_3 finally ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tJava_3";
	
	

 



/**
 * [EQGetAllCustomers_1_tJava_3 finally ] stop
 */







	
	/**
	 * [EQGetBillTo_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetBillTo_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetBillTo_1_tJava_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tJava_1";
	
	

 



/**
 * [EQGetBillTo_1_tJava_1 finally ] stop
 */







	
	/**
	 * [EQGetChassisFCM_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetChassisFCM_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tJava_2";
	
	

 



/**
 * [EQGetChassisFCM_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetChassisPNs_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetChassisPNs_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tJava_2";
	
	

 



/**
 * [EQGetChassisPNs_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetCountertopPNs_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tJava_2";
	
	

 



/**
 * [EQGetCountertopPNs_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetCTSkinPn_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tJava_2";
	
	

 



/**
 * [EQGetCTSkinPn_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tJava_2";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetDwgNo_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetDwgNo_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetDwgNo_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tJava_2";
	
	

 



/**
 * [EQGetDwgNo_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetItemDesc_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetItemDesc_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetItemDesc_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tJava_2";
	
	

 



/**
 * [EQGetItemDesc_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetParentLine_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetParentLine_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetParentLine_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tJava_2";
	
	

 



/**
 * [EQGetParentLine_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetPriceGroupTier_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tJava_2";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetProdOrders_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetProdOrders_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tJava_2";
	
	

 



/**
 * [EQGetProdOrders_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetRRVendorNo_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetRRVendorNo_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetRRVendorNo_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tJava_2";
	
	

 



/**
 * [EQGetRRVendorNo_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tJava_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetSellTo_1_tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tFlowToIterate_2";
	
	

 



/**
 * [EQGetSellTo_1_tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [EQGetSellTo_1_tJava_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tJava_1";
	
	

 



/**
 * [EQGetSellTo_1_tJava_1 finally ] stop
 */







	
	/**
	 * [EQGetUOMConv_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetUOMConv_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetUOMConv_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tJava_2";
	
	

 



/**
 * [EQGetUOMConv_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetValidItem_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetValidItem_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetValidItem_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tJava_2";
	
	

 



/**
 * [EQGetValidItem_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetVariantState_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetVariantState_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetVariantState_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tJava_2";
	
	

 



/**
 * [EQGetVariantState_1_tJava_2 finally ] stop
 */







	
	/**
	 * [EQGetSkinORPart_1_tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tFlowToIterate_1";
	
	

 



/**
 * [EQGetSkinORPart_1_tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tJava_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tJava_2";
	
	

 



/**
 * [EQGetSkinORPart_1_tJava_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCustomerInfo_1_row5Struct implements routines.system.IPersistableRow<EQGetCustomerInfo_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCustomerInfo_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCustomerInfo_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCustomerInfo_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCustomerInfo_1_row5Struct EQGetCustomerInfo_1_row5 = new EQGetCustomerInfo_1_row5Struct();




	
	/**
	 * [EQGetCustomerInfo_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCustomerInfo_1_tRESTResponse_2", false);
		start_Hash.put("EQGetCustomerInfo_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetCustomerInfo_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCustomerInfo_1_row5");
			
		int tos_count_EQGetCustomerInfo_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCustomerInfo_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetCustomerInfo_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetCustomerInfo_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCustomerInfo_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetCustomerInfo_1_tWriteJSONField_1");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetCustomerInfo_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetCustomerInfo_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCustomerInfo_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetCustomerInfo_1_row5Struct> queue_EQGetCustomerInfo_1_tWriteJSONField_1_In = (java.util.Queue<EQGetCustomerInfo_1_row5Struct>) globalMap.get("queue_EQGetCustomerInfo_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In = "EQGetCustomerInfo_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetCustomerInfo_1_tWriteJSONField_1_In==null?"":queue_EQGetCustomerInfo_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetCustomerInfo_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In) || !queue_EQGetCustomerInfo_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetCustomerInfo_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	

                    EQGetCustomerInfo_1_row5Struct result_EQGetCustomerInfo_1_tWriteJSONField_1_In = queue_EQGetCustomerInfo_1_tWriteJSONField_1_In.poll();
                    str_EQGetCustomerInfo_1_tWriteJSONField_1_In = result_EQGetCustomerInfo_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetCustomerInfo_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetCustomerInfo_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetCustomerInfo_1_tWriteJSONField_1_In = xmlSerializer_EQGetCustomerInfo_1_tWriteJSONField_1_In.read(str_EQGetCustomerInfo_1_tWriteJSONField_1_In);
        EQGetCustomerInfo_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetCustomerInfo_1_tWriteJSONField_1_In, jsonStandard_EQGetCustomerInfo_1_tWriteJSONField_1_In);
    
        nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetCustomerInfo_1_tWriteJSONField_1_In++;

/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCustomerInfo_1_row5","EQGetCustomerInfo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetCustomerInfo_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCustomerInfo_1_row5 - " + (EQGetCustomerInfo_1_row5==null? "": EQGetCustomerInfo_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetCustomerInfo_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetCustomerInfo_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetCustomerInfo_1_tRESTResponse_2 && responseAlreadySent_EQGetCustomerInfo_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetCustomerInfo_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetCustomerInfo_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetCustomerInfo_1_tRESTResponse_2 = EQGetCustomerInfo_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetCustomerInfo_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetCustomerInfo_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetCustomerInfo_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetCustomerInfo_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetCustomerInfo_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetCustomerInfo_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetCustomerInfo_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetCustomerInfo_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetCustomerInfo_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetCustomerInfo_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetCustomerInfo_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetCustomerInfo_1_tRESTResponse_2);
			restResponse_EQGetCustomerInfo_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetCustomerInfo_1_tRESTResponse_2);
			restResponse_EQGetCustomerInfo_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetCustomerInfo_1_tRESTResponse_2);
			restResponse_EQGetCustomerInfo_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetCustomerInfo_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetCustomerInfo_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetCustomerInfo_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetCustomerInfo_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetCustomerInfo_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetCustomerInfo_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetCustomerInfo_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetCustomerInfo_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetCustomerInfo_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetCustomerInfo_1_tRESTResponse_2);

				String responseContentType_EQGetCustomerInfo_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetCustomerInfo_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetCustomerInfo_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2 = messageContext_EQGetCustomerInfo_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetCustomerInfo_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2);

				String responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2 = responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetCustomerInfo_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetCustomerInfo_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetCustomerInfo_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2 = responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetCustomerInfo_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetCustomerInfo_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetCustomerInfo_1_tRESTResponse_2 = restProviderResponse_EQGetCustomerInfo_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetCustomerInfo_1_tRESTResponse_2 = messageContext_EQGetCustomerInfo_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetCustomerInfo_1_tRESTResponse_2 = messageBodyProviders_EQGetCustomerInfo_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetCustomerInfo_1_tRESTResponse_2, responseBodyClass_EQGetCustomerInfo_1_tRESTResponse_2, null, responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetCustomerInfo_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetCustomerInfo_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetCustomerInfo_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetCustomerInfo_1_tRESTResponse_2, responseBodyClass_EQGetCustomerInfo_1_tRESTResponse_2, responseBodyClass_EQGetCustomerInfo_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetCustomerInfo_1_tRESTResponse_2, null, outputStream_EQGetCustomerInfo_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetCustomerInfo_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetCustomerInfo_1_tRESTResponse_2).getBytes());
			outputStream_EQGetCustomerInfo_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetCustomerInfo_1_tRESTResponse_2++;

/**
 * [EQGetCustomerInfo_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetCustomerInfo_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetCustomerInfo_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In = "EQGetCustomerInfo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetCustomerInfo_1_tWriteJSONField_1_In==null?"":queue_EQGetCustomerInfo_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetCustomerInfo_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetCustomerInfo_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_In);
				log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetCustomerInfo_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetCustomerInfo_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetCustomerInfo_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCustomerInfo_1_row5",2,0,
			 			"EQGetCustomerInfo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetCustomerInfo_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetCustomerInfo_1_tRESTResponse_2", true);
end_Hash.put("EQGetCustomerInfo_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetCustomerInfo_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCustomerInfo_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetCustomerInfo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetCustomerInfo_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetCustomerInfo_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetCustomerInfo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetCustomerInfo_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCustomerInfo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetAllCustomers_1_row6Struct implements routines.system.IPersistableRow<EQGetAllCustomers_1_row6Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return "";
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetAllCustomers_1_row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetAllCustomers_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetAllCustomers_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetAllCustomers_1_row6Struct EQGetAllCustomers_1_row6 = new EQGetAllCustomers_1_row6Struct();




	
	/**
	 * [EQGetAllCustomers_1_tRESTResponse_3 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetAllCustomers_1_tRESTResponse_3", false);
		start_Hash.put("EQGetAllCustomers_1_tRESTResponse_3", System.currentTimeMillis());
		
	
	currentComponent="EQGetAllCustomers_1_tRESTResponse_3";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetAllCustomers_1_row6");
			
		int tos_count_EQGetAllCustomers_1_tRESTResponse_3 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetAllCustomers_1_tRESTResponse_3", "tRESTResponse_3", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetAllCustomers_1_tRESTResponse_3 begin ] stop
 */



	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetAllCustomers_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetAllCustomers_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetAllCustomers_1_tWriteJSONField_2");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("Customers")+"}]");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetAllCustomers_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetAllCustomers_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetAllCustomers_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetAllCustomers_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetAllCustomers_1_row6Struct> queue_EQGetAllCustomers_1_tWriteJSONField_2_In = (java.util.Queue<EQGetAllCustomers_1_row6Struct>) globalMap.get("queue_EQGetAllCustomers_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In = "EQGetAllCustomers_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetAllCustomers_1_tWriteJSONField_2_In==null?"":queue_EQGetAllCustomers_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetAllCustomers_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In) || !queue_EQGetAllCustomers_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetAllCustomers_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	

                    EQGetAllCustomers_1_row6Struct result_EQGetAllCustomers_1_tWriteJSONField_2_In = queue_EQGetAllCustomers_1_tWriteJSONField_2_In.poll();
                    str_EQGetAllCustomers_1_tWriteJSONField_2_In = result_EQGetAllCustomers_1_tWriteJSONField_2_In.body;
                                EQGetAllCustomers_1_row6.body = result_EQGetAllCustomers_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetAllCustomers_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetAllCustomers_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetAllCustomers_1_tWriteJSONField_2_In = xmlSerializer_EQGetAllCustomers_1_tWriteJSONField_2_In.read(str_EQGetAllCustomers_1_tWriteJSONField_2_In);
        EQGetAllCustomers_1_row6.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetAllCustomers_1_tWriteJSONField_2_In, jsonStandard_EQGetAllCustomers_1_tWriteJSONField_2_In);
    
        nb_line_EQGetAllCustomers_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetAllCustomers_1_tWriteJSONField_2_In++;

/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tRESTResponse_3 main ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tRESTResponse_3";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetAllCustomers_1_row6","EQGetAllCustomers_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetAllCustomers_1_tRESTResponse_3","tRESTResponse_3","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetAllCustomers_1_row6 - " + (EQGetAllCustomers_1_row6==null? "": EQGetAllCustomers_1_row6.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetAllCustomers_1_tRESTResponse_3 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetAllCustomers_1_tRESTResponse_3 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetAllCustomers_1_tRESTResponse_3 && responseAlreadySent_EQGetAllCustomers_1_tRESTResponse_3) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetAllCustomers_1_tRESTResponse_3 = 200;

		Object restProviderResponse_EQGetAllCustomers_1_tRESTResponse_3 = null;
		restProviderResponse_EQGetAllCustomers_1_tRESTResponse_3 = EQGetAllCustomers_1_row6.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetAllCustomers_1_tRESTResponse_3 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetAllCustomers_1_tRESTResponse_3 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetAllCustomers_1_tRESTResponse_3.length() > 0) {
		    restProviderResponseHeaders_EQGetAllCustomers_1_tRESTResponse_3.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetAllCustomers_1_tRESTResponse_3.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetAllCustomers_1_tRESTResponse_3 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetAllCustomers_1_tRESTResponse_3 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetAllCustomers_1_tRESTResponse_3.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetAllCustomers_1_tRESTResponse_3) {
			java.util.Map<String, Object> restResponse_EQGetAllCustomers_1_tRESTResponse_3 = new java.util.HashMap<String, Object>();
			restResponse_EQGetAllCustomers_1_tRESTResponse_3.put("BODY", restProviderResponse_EQGetAllCustomers_1_tRESTResponse_3);
			restResponse_EQGetAllCustomers_1_tRESTResponse_3.put("STATUS", restProviderStatusCode_EQGetAllCustomers_1_tRESTResponse_3);
			restResponse_EQGetAllCustomers_1_tRESTResponse_3.put("HEADERS", restProviderResponseHeaders_EQGetAllCustomers_1_tRESTResponse_3);
			restResponse_EQGetAllCustomers_1_tRESTResponse_3.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetAllCustomers_1_tRESTResponse_3);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetAllCustomers_1_tRESTResponse_3 = null;
			if (!responseAlreadySent_EQGetAllCustomers_1_tRESTResponse_3) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetAllCustomers_1_tRESTResponse_3.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetAllCustomers_1_tRESTResponse_3.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetAllCustomers_1_tRESTResponse_3);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetAllCustomers_1_tRESTResponse_3 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetAllCustomers_1_tRESTResponse_3.entrySet()) {
					headersMultivaluedMap_EQGetAllCustomers_1_tRESTResponse_3.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetAllCustomers_1_tRESTResponse_3.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetAllCustomers_1_tRESTResponse_3);

				String responseContentType_EQGetAllCustomers_1_tRESTResponse_3 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetAllCustomers_1_tRESTResponse_3 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetAllCustomers_1_tRESTResponse_3) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetAllCustomers_1_tRESTResponse_3 = messageContext_EQGetAllCustomers_1_tRESTResponse_3.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetAllCustomers_1_tRESTResponse_3 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetAllCustomers_1_tRESTResponse_3);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetAllCustomers_1_tRESTResponse_3);

				String responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3 = responseMediaType_EQGetAllCustomers_1_tRESTResponse_3.getSubtype();
				if (responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3.equals("xml") || responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3.endsWith("+xml")) {
					outputStream_EQGetAllCustomers_1_tRESTResponse_3.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3.equals("json") || responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3.endsWith("+json")) {
					outputStream_EQGetAllCustomers_1_tRESTResponse_3.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetAllCustomers_1_tRESTResponse_3 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetAllCustomers_1_tRESTResponse_3) {
				String responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3 = responseMediaType_EQGetAllCustomers_1_tRESTResponse_3.getSubtype();
				if (responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3.equals("json") || responseMediaSubType_EQGetAllCustomers_1_tRESTResponse_3.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetAllCustomers_1_tRESTResponse_3.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetAllCustomers_1_tRESTResponse_3 = restProviderResponse_EQGetAllCustomers_1_tRESTResponse_3.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetAllCustomers_1_tRESTResponse_3 = messageContext_EQGetAllCustomers_1_tRESTResponse_3.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetAllCustomers_1_tRESTResponse_3 = messageBodyProviders_EQGetAllCustomers_1_tRESTResponse_3.getMessageBodyWriter(
						responseBodyClass_EQGetAllCustomers_1_tRESTResponse_3, responseBodyClass_EQGetAllCustomers_1_tRESTResponse_3, null, responseMediaType_EQGetAllCustomers_1_tRESTResponse_3);

                if (messageBodyWriter_EQGetAllCustomers_1_tRESTResponse_3 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetAllCustomers_1_tRESTResponse_3).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetAllCustomers_1_tRESTResponse_3.writeTo(restProviderResponse_EQGetAllCustomers_1_tRESTResponse_3, responseBodyClass_EQGetAllCustomers_1_tRESTResponse_3, responseBodyClass_EQGetAllCustomers_1_tRESTResponse_3,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetAllCustomers_1_tRESTResponse_3, null, outputStream_EQGetAllCustomers_1_tRESTResponse_3);
			}
			// initial variant
			//outputStream_EQGetAllCustomers_1_tRESTResponse_3.write(String.valueOf(restProviderResponse_EQGetAllCustomers_1_tRESTResponse_3).getBytes());
			outputStream_EQGetAllCustomers_1_tRESTResponse_3.flush();
		}
	}

 


	tos_count_EQGetAllCustomers_1_tRESTResponse_3++;

/**
 * [EQGetAllCustomers_1_tRESTResponse_3 main ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tRESTResponse_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tRESTResponse_3";
	
	

 



/**
 * [EQGetAllCustomers_1_tRESTResponse_3 process_data_begin ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tRESTResponse_3 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tRESTResponse_3";
	
	

 



/**
 * [EQGetAllCustomers_1_tRESTResponse_3 process_data_end ] stop
 */



	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In = "EQGetAllCustomers_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetAllCustomers_1_tWriteJSONField_2_In==null?"":queue_EQGetAllCustomers_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetAllCustomers_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetAllCustomers_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetAllCustomers_1_tWriteJSONField_2_In);
				log.debug("EQGetAllCustomers_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetAllCustomers_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetAllCustomers_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetAllCustomers_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tRESTResponse_3 end ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tRESTResponse_3";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetAllCustomers_1_row6",2,0,
			 			"EQGetAllCustomers_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetAllCustomers_1_tRESTResponse_3","tRESTResponse_3","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetAllCustomers_1_tRESTResponse_3", true);
end_Hash.put("EQGetAllCustomers_1_tRESTResponse_3", System.currentTimeMillis());




/**
 * [EQGetAllCustomers_1_tRESTResponse_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetAllCustomers_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetAllCustomers_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetAllCustomers_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetAllCustomers_1_tRESTResponse_3 finally ] start
	 */

	

	
	
	currentComponent="EQGetAllCustomers_1_tRESTResponse_3";
	
	

 



/**
 * [EQGetAllCustomers_1_tRESTResponse_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetAllCustomers_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetBillTo_1_row5Struct implements routines.system.IPersistableRow<EQGetBillTo_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetBillTo_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetBillTo_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetBillTo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetBillTo_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetBillTo_1_row5Struct EQGetBillTo_1_row5 = new EQGetBillTo_1_row5Struct();




	
	/**
	 * [EQGetBillTo_1_tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetBillTo_1_tRESTResponse_1", false);
		start_Hash.put("EQGetBillTo_1_tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetBillTo_1_tRESTResponse_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetBillTo_1_row5");
			
		int tos_count_EQGetBillTo_1_tRESTResponse_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetBillTo_1_tRESTResponse_1", "tRESTResponse_1", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetBillTo_1_tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetBillTo_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetBillTo_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetBillTo_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetBillTo_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetBillTo_1_tWriteJSONField_1");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetBillTo_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetBillTo_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetBillTo_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetBillTo_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetBillTo_1_row5Struct> queue_EQGetBillTo_1_tWriteJSONField_1_In = (java.util.Queue<EQGetBillTo_1_row5Struct>) globalMap.get("queue_EQGetBillTo_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In = "EQGetBillTo_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetBillTo_1_tWriteJSONField_1_In==null?"":queue_EQGetBillTo_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetBillTo_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In) || !queue_EQGetBillTo_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetBillTo_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_In";
	
	

                    EQGetBillTo_1_row5Struct result_EQGetBillTo_1_tWriteJSONField_1_In = queue_EQGetBillTo_1_tWriteJSONField_1_In.poll();
                    str_EQGetBillTo_1_tWriteJSONField_1_In = result_EQGetBillTo_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetBillTo_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetBillTo_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetBillTo_1_tWriteJSONField_1_In = xmlSerializer_EQGetBillTo_1_tWriteJSONField_1_In.read(str_EQGetBillTo_1_tWriteJSONField_1_In);
        EQGetBillTo_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetBillTo_1_tWriteJSONField_1_In, jsonStandard_EQGetBillTo_1_tWriteJSONField_1_In);
    
        nb_line_EQGetBillTo_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetBillTo_1_tWriteJSONField_1_In++;

/**
 * [EQGetBillTo_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetBillTo_1_tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tRESTResponse_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetBillTo_1_row5","EQGetBillTo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetBillTo_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetBillTo_1_row5 - " + (EQGetBillTo_1_row5==null? "": EQGetBillTo_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetBillTo_1_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetBillTo_1_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetBillTo_1_tRESTResponse_1 && responseAlreadySent_EQGetBillTo_1_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetBillTo_1_tRESTResponse_1 = 200;

		Object restProviderResponse_EQGetBillTo_1_tRESTResponse_1 = null;
		restProviderResponse_EQGetBillTo_1_tRESTResponse_1 = EQGetBillTo_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetBillTo_1_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetBillTo_1_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetBillTo_1_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_EQGetBillTo_1_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetBillTo_1_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetBillTo_1_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetBillTo_1_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetBillTo_1_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetBillTo_1_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_EQGetBillTo_1_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_EQGetBillTo_1_tRESTResponse_1.put("BODY", restProviderResponse_EQGetBillTo_1_tRESTResponse_1);
			restResponse_EQGetBillTo_1_tRESTResponse_1.put("STATUS", restProviderStatusCode_EQGetBillTo_1_tRESTResponse_1);
			restResponse_EQGetBillTo_1_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_EQGetBillTo_1_tRESTResponse_1);
			restResponse_EQGetBillTo_1_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetBillTo_1_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetBillTo_1_tRESTResponse_1 = null;
			if (!responseAlreadySent_EQGetBillTo_1_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetBillTo_1_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetBillTo_1_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetBillTo_1_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetBillTo_1_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetBillTo_1_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_EQGetBillTo_1_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetBillTo_1_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetBillTo_1_tRESTResponse_1);

				String responseContentType_EQGetBillTo_1_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetBillTo_1_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetBillTo_1_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetBillTo_1_tRESTResponse_1 = messageContext_EQGetBillTo_1_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetBillTo_1_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetBillTo_1_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetBillTo_1_tRESTResponse_1);

				String responseMediaSubType_EQGetBillTo_1_tRESTResponse_1 = responseMediaType_EQGetBillTo_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetBillTo_1_tRESTResponse_1.equals("xml") || responseMediaSubType_EQGetBillTo_1_tRESTResponse_1.endsWith("+xml")) {
					outputStream_EQGetBillTo_1_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetBillTo_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetBillTo_1_tRESTResponse_1.endsWith("+json")) {
					outputStream_EQGetBillTo_1_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetBillTo_1_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetBillTo_1_tRESTResponse_1) {
				String responseMediaSubType_EQGetBillTo_1_tRESTResponse_1 = responseMediaType_EQGetBillTo_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetBillTo_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetBillTo_1_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetBillTo_1_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetBillTo_1_tRESTResponse_1 = restProviderResponse_EQGetBillTo_1_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetBillTo_1_tRESTResponse_1 = messageContext_EQGetBillTo_1_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetBillTo_1_tRESTResponse_1 = messageBodyProviders_EQGetBillTo_1_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_EQGetBillTo_1_tRESTResponse_1, responseBodyClass_EQGetBillTo_1_tRESTResponse_1, null, responseMediaType_EQGetBillTo_1_tRESTResponse_1);

                if (messageBodyWriter_EQGetBillTo_1_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetBillTo_1_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetBillTo_1_tRESTResponse_1.writeTo(restProviderResponse_EQGetBillTo_1_tRESTResponse_1, responseBodyClass_EQGetBillTo_1_tRESTResponse_1, responseBodyClass_EQGetBillTo_1_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetBillTo_1_tRESTResponse_1, null, outputStream_EQGetBillTo_1_tRESTResponse_1);
			}
			// initial variant
			//outputStream_EQGetBillTo_1_tRESTResponse_1.write(String.valueOf(restProviderResponse_EQGetBillTo_1_tRESTResponse_1).getBytes());
			outputStream_EQGetBillTo_1_tRESTResponse_1.flush();
		}
	}

 


	tos_count_EQGetBillTo_1_tRESTResponse_1++;

/**
 * [EQGetBillTo_1_tRESTResponse_1 main ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetBillTo_1_tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetBillTo_1_tRESTResponse_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In = "EQGetBillTo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetBillTo_1_tWriteJSONField_1_In==null?"":queue_EQGetBillTo_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetBillTo_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetBillTo_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetBillTo_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetBillTo_1_tWriteJSONField_1_In);
				log.debug("EQGetBillTo_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetBillTo_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetBillTo_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetBillTo_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetBillTo_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetBillTo_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetBillTo_1_tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tRESTResponse_1";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetBillTo_1_row5",2,0,
			 			"EQGetBillTo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetBillTo_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetBillTo_1_tRESTResponse_1", true);
end_Hash.put("EQGetBillTo_1_tRESTResponse_1", System.currentTimeMillis());




/**
 * [EQGetBillTo_1_tRESTResponse_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetBillTo_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetBillTo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetBillTo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetBillTo_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetBillTo_1_tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetBillTo_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetBillTo_1_tRESTResponse_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetBillTo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetChassisFCM_1_row5Struct implements routines.system.IPersistableRow<EQGetChassisFCM_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisFCM_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetChassisFCM_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetChassisFCM_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetChassisFCM_1_row5Struct EQGetChassisFCM_1_row5 = new EQGetChassisFCM_1_row5Struct();




	
	/**
	 * [EQGetChassisFCM_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisFCM_1_tRESTResponse_2", false);
		start_Hash.put("EQGetChassisFCM_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisFCM_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisFCM_1_row5");
			
		int tos_count_EQGetChassisFCM_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisFCM_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetChassisFCM_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetChassisFCM_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisFCM_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetChassisFCM_1_tWriteJSONField_1");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("ChassisFCM")+"}]");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetChassisFCM_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisFCM_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisFCM_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetChassisFCM_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetChassisFCM_1_row5Struct> queue_EQGetChassisFCM_1_tWriteJSONField_1_In = (java.util.Queue<EQGetChassisFCM_1_row5Struct>) globalMap.get("queue_EQGetChassisFCM_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In = "EQGetChassisFCM_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetChassisFCM_1_tWriteJSONField_1_In==null?"":queue_EQGetChassisFCM_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetChassisFCM_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In) || !queue_EQGetChassisFCM_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetChassisFCM_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	

                    EQGetChassisFCM_1_row5Struct result_EQGetChassisFCM_1_tWriteJSONField_1_In = queue_EQGetChassisFCM_1_tWriteJSONField_1_In.poll();
                    str_EQGetChassisFCM_1_tWriteJSONField_1_In = result_EQGetChassisFCM_1_tWriteJSONField_1_In.body;
                                EQGetChassisFCM_1_row5.body = result_EQGetChassisFCM_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetChassisFCM_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetChassisFCM_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetChassisFCM_1_tWriteJSONField_1_In = xmlSerializer_EQGetChassisFCM_1_tWriteJSONField_1_In.read(str_EQGetChassisFCM_1_tWriteJSONField_1_In);
        EQGetChassisFCM_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetChassisFCM_1_tWriteJSONField_1_In, jsonStandard_EQGetChassisFCM_1_tWriteJSONField_1_In);
    
        nb_line_EQGetChassisFCM_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetChassisFCM_1_tWriteJSONField_1_In++;

/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisFCM_1_row5","EQGetChassisFCM_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetChassisFCM_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisFCM_1_row5 - " + (EQGetChassisFCM_1_row5==null? "": EQGetChassisFCM_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetChassisFCM_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetChassisFCM_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetChassisFCM_1_tRESTResponse_2 && responseAlreadySent_EQGetChassisFCM_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetChassisFCM_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetChassisFCM_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetChassisFCM_1_tRESTResponse_2 = EQGetChassisFCM_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetChassisFCM_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetChassisFCM_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetChassisFCM_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetChassisFCM_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetChassisFCM_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetChassisFCM_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetChassisFCM_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetChassisFCM_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetChassisFCM_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetChassisFCM_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetChassisFCM_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetChassisFCM_1_tRESTResponse_2);
			restResponse_EQGetChassisFCM_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetChassisFCM_1_tRESTResponse_2);
			restResponse_EQGetChassisFCM_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetChassisFCM_1_tRESTResponse_2);
			restResponse_EQGetChassisFCM_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetChassisFCM_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetChassisFCM_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetChassisFCM_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetChassisFCM_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetChassisFCM_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetChassisFCM_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetChassisFCM_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetChassisFCM_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetChassisFCM_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetChassisFCM_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetChassisFCM_1_tRESTResponse_2);

				String responseContentType_EQGetChassisFCM_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetChassisFCM_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetChassisFCM_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetChassisFCM_1_tRESTResponse_2 = messageContext_EQGetChassisFCM_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetChassisFCM_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetChassisFCM_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetChassisFCM_1_tRESTResponse_2);

				String responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2 = responseMediaType_EQGetChassisFCM_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetChassisFCM_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetChassisFCM_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetChassisFCM_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetChassisFCM_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2 = responseMediaType_EQGetChassisFCM_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetChassisFCM_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetChassisFCM_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetChassisFCM_1_tRESTResponse_2 = restProviderResponse_EQGetChassisFCM_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetChassisFCM_1_tRESTResponse_2 = messageContext_EQGetChassisFCM_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetChassisFCM_1_tRESTResponse_2 = messageBodyProviders_EQGetChassisFCM_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetChassisFCM_1_tRESTResponse_2, responseBodyClass_EQGetChassisFCM_1_tRESTResponse_2, null, responseMediaType_EQGetChassisFCM_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetChassisFCM_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetChassisFCM_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetChassisFCM_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetChassisFCM_1_tRESTResponse_2, responseBodyClass_EQGetChassisFCM_1_tRESTResponse_2, responseBodyClass_EQGetChassisFCM_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetChassisFCM_1_tRESTResponse_2, null, outputStream_EQGetChassisFCM_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetChassisFCM_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetChassisFCM_1_tRESTResponse_2).getBytes());
			outputStream_EQGetChassisFCM_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetChassisFCM_1_tRESTResponse_2++;

/**
 * [EQGetChassisFCM_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetChassisFCM_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetChassisFCM_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In = "EQGetChassisFCM_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetChassisFCM_1_tWriteJSONField_1_In==null?"":queue_EQGetChassisFCM_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetChassisFCM_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetChassisFCM_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetChassisFCM_1_tWriteJSONField_1_In);
				log.debug("EQGetChassisFCM_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetChassisFCM_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisFCM_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetChassisFCM_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisFCM_1_row5",2,0,
			 			"EQGetChassisFCM_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetChassisFCM_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetChassisFCM_1_tRESTResponse_2", true);
end_Hash.put("EQGetChassisFCM_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetChassisFCM_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetChassisFCM_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetChassisFCM_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetChassisFCM_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetChassisFCM_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisFCM_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetChassisFCM_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetChassisFCM_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetChassisPNs_1_row2Struct implements routines.system.IPersistableRow<EQGetChassisPNs_1_row2Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetChassisPNs_1_row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetChassisPNs_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetChassisPNs_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetChassisPNs_1_row2Struct EQGetChassisPNs_1_row2 = new EQGetChassisPNs_1_row2Struct();




	
	/**
	 * [EQGetChassisPNs_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisPNs_1_tRESTResponse_2", false);
		start_Hash.put("EQGetChassisPNs_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetChassisPNs_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetChassisPNs_1_row2");
			
		int tos_count_EQGetChassisPNs_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisPNs_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetChassisPNs_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetChassisPNs_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetChassisPNs_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetChassisPNs_1_tWriteJSONField_2");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("ChassisPNs")+"}]");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetChassisPNs_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetChassisPNs_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetChassisPNs_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetChassisPNs_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetChassisPNs_1_row2Struct> queue_EQGetChassisPNs_1_tWriteJSONField_2_In = (java.util.Queue<EQGetChassisPNs_1_row2Struct>) globalMap.get("queue_EQGetChassisPNs_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In = "EQGetChassisPNs_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetChassisPNs_1_tWriteJSONField_2_In==null?"":queue_EQGetChassisPNs_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetChassisPNs_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In) || !queue_EQGetChassisPNs_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetChassisPNs_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	

                    EQGetChassisPNs_1_row2Struct result_EQGetChassisPNs_1_tWriteJSONField_2_In = queue_EQGetChassisPNs_1_tWriteJSONField_2_In.poll();
                    str_EQGetChassisPNs_1_tWriteJSONField_2_In = result_EQGetChassisPNs_1_tWriteJSONField_2_In.body;
                                EQGetChassisPNs_1_row2.body = result_EQGetChassisPNs_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetChassisPNs_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetChassisPNs_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetChassisPNs_1_tWriteJSONField_2_In = xmlSerializer_EQGetChassisPNs_1_tWriteJSONField_2_In.read(str_EQGetChassisPNs_1_tWriteJSONField_2_In);
        EQGetChassisPNs_1_row2.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetChassisPNs_1_tWriteJSONField_2_In, jsonStandard_EQGetChassisPNs_1_tWriteJSONField_2_In);
    
        nb_line_EQGetChassisPNs_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetChassisPNs_1_tWriteJSONField_2_In++;

/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetChassisPNs_1_row2","EQGetChassisPNs_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetChassisPNs_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetChassisPNs_1_row2 - " + (EQGetChassisPNs_1_row2==null? "": EQGetChassisPNs_1_row2.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetChassisPNs_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetChassisPNs_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetChassisPNs_1_tRESTResponse_2 && responseAlreadySent_EQGetChassisPNs_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetChassisPNs_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetChassisPNs_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetChassisPNs_1_tRESTResponse_2 = EQGetChassisPNs_1_row2.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetChassisPNs_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetChassisPNs_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetChassisPNs_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetChassisPNs_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetChassisPNs_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetChassisPNs_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetChassisPNs_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetChassisPNs_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetChassisPNs_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetChassisPNs_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetChassisPNs_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetChassisPNs_1_tRESTResponse_2);
			restResponse_EQGetChassisPNs_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetChassisPNs_1_tRESTResponse_2);
			restResponse_EQGetChassisPNs_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetChassisPNs_1_tRESTResponse_2);
			restResponse_EQGetChassisPNs_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetChassisPNs_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetChassisPNs_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetChassisPNs_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetChassisPNs_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetChassisPNs_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetChassisPNs_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetChassisPNs_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetChassisPNs_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetChassisPNs_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetChassisPNs_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetChassisPNs_1_tRESTResponse_2);

				String responseContentType_EQGetChassisPNs_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetChassisPNs_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetChassisPNs_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetChassisPNs_1_tRESTResponse_2 = messageContext_EQGetChassisPNs_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetChassisPNs_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetChassisPNs_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetChassisPNs_1_tRESTResponse_2);

				String responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2 = responseMediaType_EQGetChassisPNs_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetChassisPNs_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetChassisPNs_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetChassisPNs_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetChassisPNs_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2 = responseMediaType_EQGetChassisPNs_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetChassisPNs_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetChassisPNs_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetChassisPNs_1_tRESTResponse_2 = restProviderResponse_EQGetChassisPNs_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetChassisPNs_1_tRESTResponse_2 = messageContext_EQGetChassisPNs_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetChassisPNs_1_tRESTResponse_2 = messageBodyProviders_EQGetChassisPNs_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetChassisPNs_1_tRESTResponse_2, responseBodyClass_EQGetChassisPNs_1_tRESTResponse_2, null, responseMediaType_EQGetChassisPNs_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetChassisPNs_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetChassisPNs_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetChassisPNs_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetChassisPNs_1_tRESTResponse_2, responseBodyClass_EQGetChassisPNs_1_tRESTResponse_2, responseBodyClass_EQGetChassisPNs_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetChassisPNs_1_tRESTResponse_2, null, outputStream_EQGetChassisPNs_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetChassisPNs_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetChassisPNs_1_tRESTResponse_2).getBytes());
			outputStream_EQGetChassisPNs_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetChassisPNs_1_tRESTResponse_2++;

/**
 * [EQGetChassisPNs_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetChassisPNs_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetChassisPNs_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In = "EQGetChassisPNs_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetChassisPNs_1_tWriteJSONField_2_In==null?"":queue_EQGetChassisPNs_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetChassisPNs_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetChassisPNs_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetChassisPNs_1_tWriteJSONField_2_In);
				log.debug("EQGetChassisPNs_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetChassisPNs_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetChassisPNs_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetChassisPNs_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetChassisPNs_1_row2",2,0,
			 			"EQGetChassisPNs_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetChassisPNs_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetChassisPNs_1_tRESTResponse_2", true);
end_Hash.put("EQGetChassisPNs_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetChassisPNs_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetChassisPNs_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetChassisPNs_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetChassisPNs_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetChassisPNs_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetChassisPNs_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetChassisPNs_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetChassisPNs_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCountertopPNs_1_row3Struct implements routines.system.IPersistableRow<EQGetCountertopPNs_1_row3Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCountertopPNs_1_row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCountertopPNs_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCountertopPNs_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCountertopPNs_1_row3Struct EQGetCountertopPNs_1_row3 = new EQGetCountertopPNs_1_row3Struct();




	
	/**
	 * [EQGetCountertopPNs_1_tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCountertopPNs_1_tRESTResponse_1", false);
		start_Hash.put("EQGetCountertopPNs_1_tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCountertopPNs_1_tRESTResponse_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCountertopPNs_1_row3");
			
		int tos_count_EQGetCountertopPNs_1_tRESTResponse_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCountertopPNs_1_tRESTResponse_1", "tRESTResponse_1", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetCountertopPNs_1_tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetCountertopPNs_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCountertopPNs_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetCountertopPNs_1_tWriteJSONField_2");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("CountertopPNs")+"}]");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetCountertopPNs_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetCountertopPNs_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCountertopPNs_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetCountertopPNs_1_row3Struct> queue_EQGetCountertopPNs_1_tWriteJSONField_2_In = (java.util.Queue<EQGetCountertopPNs_1_row3Struct>) globalMap.get("queue_EQGetCountertopPNs_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In = "EQGetCountertopPNs_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetCountertopPNs_1_tWriteJSONField_2_In==null?"":queue_EQGetCountertopPNs_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetCountertopPNs_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In) || !queue_EQGetCountertopPNs_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetCountertopPNs_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	

                    EQGetCountertopPNs_1_row3Struct result_EQGetCountertopPNs_1_tWriteJSONField_2_In = queue_EQGetCountertopPNs_1_tWriteJSONField_2_In.poll();
                    str_EQGetCountertopPNs_1_tWriteJSONField_2_In = result_EQGetCountertopPNs_1_tWriteJSONField_2_In.body;
                                EQGetCountertopPNs_1_row3.body = result_EQGetCountertopPNs_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetCountertopPNs_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetCountertopPNs_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetCountertopPNs_1_tWriteJSONField_2_In = xmlSerializer_EQGetCountertopPNs_1_tWriteJSONField_2_In.read(str_EQGetCountertopPNs_1_tWriteJSONField_2_In);
        EQGetCountertopPNs_1_row3.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetCountertopPNs_1_tWriteJSONField_2_In, jsonStandard_EQGetCountertopPNs_1_tWriteJSONField_2_In);
    
        nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetCountertopPNs_1_tWriteJSONField_2_In++;

/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tRESTResponse_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCountertopPNs_1_row3","EQGetCountertopPNs_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetCountertopPNs_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCountertopPNs_1_row3 - " + (EQGetCountertopPNs_1_row3==null? "": EQGetCountertopPNs_1_row3.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetCountertopPNs_1_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetCountertopPNs_1_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetCountertopPNs_1_tRESTResponse_1 && responseAlreadySent_EQGetCountertopPNs_1_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetCountertopPNs_1_tRESTResponse_1 = 200;

		Object restProviderResponse_EQGetCountertopPNs_1_tRESTResponse_1 = null;
		restProviderResponse_EQGetCountertopPNs_1_tRESTResponse_1 = EQGetCountertopPNs_1_row3.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetCountertopPNs_1_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetCountertopPNs_1_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetCountertopPNs_1_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_EQGetCountertopPNs_1_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetCountertopPNs_1_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetCountertopPNs_1_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetCountertopPNs_1_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetCountertopPNs_1_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetCountertopPNs_1_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_EQGetCountertopPNs_1_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_EQGetCountertopPNs_1_tRESTResponse_1.put("BODY", restProviderResponse_EQGetCountertopPNs_1_tRESTResponse_1);
			restResponse_EQGetCountertopPNs_1_tRESTResponse_1.put("STATUS", restProviderStatusCode_EQGetCountertopPNs_1_tRESTResponse_1);
			restResponse_EQGetCountertopPNs_1_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_EQGetCountertopPNs_1_tRESTResponse_1);
			restResponse_EQGetCountertopPNs_1_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetCountertopPNs_1_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1 = null;
			if (!responseAlreadySent_EQGetCountertopPNs_1_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetCountertopPNs_1_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetCountertopPNs_1_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetCountertopPNs_1_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetCountertopPNs_1_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetCountertopPNs_1_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_EQGetCountertopPNs_1_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetCountertopPNs_1_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetCountertopPNs_1_tRESTResponse_1);

				String responseContentType_EQGetCountertopPNs_1_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetCountertopPNs_1_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetCountertopPNs_1_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1 = messageContext_EQGetCountertopPNs_1_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetCountertopPNs_1_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1);

				String responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1 = responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1.equals("xml") || responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1.endsWith("+xml")) {
					outputStream_EQGetCountertopPNs_1_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1.endsWith("+json")) {
					outputStream_EQGetCountertopPNs_1_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetCountertopPNs_1_tRESTResponse_1) {
				String responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1 = responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetCountertopPNs_1_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetCountertopPNs_1_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetCountertopPNs_1_tRESTResponse_1 = restProviderResponse_EQGetCountertopPNs_1_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetCountertopPNs_1_tRESTResponse_1 = messageContext_EQGetCountertopPNs_1_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetCountertopPNs_1_tRESTResponse_1 = messageBodyProviders_EQGetCountertopPNs_1_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_EQGetCountertopPNs_1_tRESTResponse_1, responseBodyClass_EQGetCountertopPNs_1_tRESTResponse_1, null, responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1);

                if (messageBodyWriter_EQGetCountertopPNs_1_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetCountertopPNs_1_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetCountertopPNs_1_tRESTResponse_1.writeTo(restProviderResponse_EQGetCountertopPNs_1_tRESTResponse_1, responseBodyClass_EQGetCountertopPNs_1_tRESTResponse_1, responseBodyClass_EQGetCountertopPNs_1_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetCountertopPNs_1_tRESTResponse_1, null, outputStream_EQGetCountertopPNs_1_tRESTResponse_1);
			}
			// initial variant
			//outputStream_EQGetCountertopPNs_1_tRESTResponse_1.write(String.valueOf(restProviderResponse_EQGetCountertopPNs_1_tRESTResponse_1).getBytes());
			outputStream_EQGetCountertopPNs_1_tRESTResponse_1.flush();
		}
	}

 


	tos_count_EQGetCountertopPNs_1_tRESTResponse_1++;

/**
 * [EQGetCountertopPNs_1_tRESTResponse_1 main ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tRESTResponse_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In = "EQGetCountertopPNs_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetCountertopPNs_1_tWriteJSONField_2_In==null?"":queue_EQGetCountertopPNs_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetCountertopPNs_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetCountertopPNs_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_In);
				log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetCountertopPNs_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetCountertopPNs_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetCountertopPNs_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tRESTResponse_1";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCountertopPNs_1_row3",2,0,
			 			"EQGetCountertopPNs_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetCountertopPNs_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetCountertopPNs_1_tRESTResponse_1", true);
end_Hash.put("EQGetCountertopPNs_1_tRESTResponse_1", System.currentTimeMillis());




/**
 * [EQGetCountertopPNs_1_tRESTResponse_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCountertopPNs_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCountertopPNs_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCountertopPNs_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetCountertopPNs_1_tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCountertopPNs_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCountertopPNs_1_tRESTResponse_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCountertopPNs_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCTSkinPn_1_row3Struct implements routines.system.IPersistableRow<EQGetCTSkinPn_1_row3Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSkinPn_1_row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCTSkinPn_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCTSkinPn_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCTSkinPn_1_row3Struct EQGetCTSkinPn_1_row3 = new EQGetCTSkinPn_1_row3Struct();




	
	/**
	 * [EQGetCTSkinPn_1_tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSkinPn_1_tRESTResponse_1", false);
		start_Hash.put("EQGetCTSkinPn_1_tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSkinPn_1_tRESTResponse_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSkinPn_1_row3");
			
		int tos_count_EQGetCTSkinPn_1_tRESTResponse_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSkinPn_1_tRESTResponse_1", "tRESTResponse_1", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetCTSkinPn_1_tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetCTSkinPn_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSkinPn_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetCTSkinPn_1_tWriteJSONField_2");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("CTSkinPn")+"}]");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetCTSkinPn_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSkinPn_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSkinPn_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetCTSkinPn_1_row3Struct> queue_EQGetCTSkinPn_1_tWriteJSONField_2_In = (java.util.Queue<EQGetCTSkinPn_1_row3Struct>) globalMap.get("queue_EQGetCTSkinPn_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In = "EQGetCTSkinPn_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetCTSkinPn_1_tWriteJSONField_2_In==null?"":queue_EQGetCTSkinPn_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetCTSkinPn_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In) || !queue_EQGetCTSkinPn_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetCTSkinPn_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	

                    EQGetCTSkinPn_1_row3Struct result_EQGetCTSkinPn_1_tWriteJSONField_2_In = queue_EQGetCTSkinPn_1_tWriteJSONField_2_In.poll();
                    str_EQGetCTSkinPn_1_tWriteJSONField_2_In = result_EQGetCTSkinPn_1_tWriteJSONField_2_In.body;
                                EQGetCTSkinPn_1_row3.body = result_EQGetCTSkinPn_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetCTSkinPn_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetCTSkinPn_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetCTSkinPn_1_tWriteJSONField_2_In = xmlSerializer_EQGetCTSkinPn_1_tWriteJSONField_2_In.read(str_EQGetCTSkinPn_1_tWriteJSONField_2_In);
        EQGetCTSkinPn_1_row3.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetCTSkinPn_1_tWriteJSONField_2_In, jsonStandard_EQGetCTSkinPn_1_tWriteJSONField_2_In);
    
        nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetCTSkinPn_1_tWriteJSONField_2_In++;

/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tRESTResponse_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSkinPn_1_row3","EQGetCTSkinPn_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetCTSkinPn_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSkinPn_1_row3 - " + (EQGetCTSkinPn_1_row3==null? "": EQGetCTSkinPn_1_row3.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetCTSkinPn_1_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetCTSkinPn_1_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetCTSkinPn_1_tRESTResponse_1 && responseAlreadySent_EQGetCTSkinPn_1_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetCTSkinPn_1_tRESTResponse_1 = 200;

		Object restProviderResponse_EQGetCTSkinPn_1_tRESTResponse_1 = null;
		restProviderResponse_EQGetCTSkinPn_1_tRESTResponse_1 = EQGetCTSkinPn_1_row3.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetCTSkinPn_1_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetCTSkinPn_1_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetCTSkinPn_1_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_EQGetCTSkinPn_1_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetCTSkinPn_1_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetCTSkinPn_1_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetCTSkinPn_1_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetCTSkinPn_1_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetCTSkinPn_1_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_EQGetCTSkinPn_1_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_EQGetCTSkinPn_1_tRESTResponse_1.put("BODY", restProviderResponse_EQGetCTSkinPn_1_tRESTResponse_1);
			restResponse_EQGetCTSkinPn_1_tRESTResponse_1.put("STATUS", restProviderStatusCode_EQGetCTSkinPn_1_tRESTResponse_1);
			restResponse_EQGetCTSkinPn_1_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_EQGetCTSkinPn_1_tRESTResponse_1);
			restResponse_EQGetCTSkinPn_1_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetCTSkinPn_1_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1 = null;
			if (!responseAlreadySent_EQGetCTSkinPn_1_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetCTSkinPn_1_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetCTSkinPn_1_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetCTSkinPn_1_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetCTSkinPn_1_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetCTSkinPn_1_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_EQGetCTSkinPn_1_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetCTSkinPn_1_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetCTSkinPn_1_tRESTResponse_1);

				String responseContentType_EQGetCTSkinPn_1_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetCTSkinPn_1_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetCTSkinPn_1_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1 = messageContext_EQGetCTSkinPn_1_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetCTSkinPn_1_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1);

				String responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1 = responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1.equals("xml") || responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1.endsWith("+xml")) {
					outputStream_EQGetCTSkinPn_1_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1.endsWith("+json")) {
					outputStream_EQGetCTSkinPn_1_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetCTSkinPn_1_tRESTResponse_1) {
				String responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1 = responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetCTSkinPn_1_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetCTSkinPn_1_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetCTSkinPn_1_tRESTResponse_1 = restProviderResponse_EQGetCTSkinPn_1_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetCTSkinPn_1_tRESTResponse_1 = messageContext_EQGetCTSkinPn_1_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetCTSkinPn_1_tRESTResponse_1 = messageBodyProviders_EQGetCTSkinPn_1_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_EQGetCTSkinPn_1_tRESTResponse_1, responseBodyClass_EQGetCTSkinPn_1_tRESTResponse_1, null, responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1);

                if (messageBodyWriter_EQGetCTSkinPn_1_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetCTSkinPn_1_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetCTSkinPn_1_tRESTResponse_1.writeTo(restProviderResponse_EQGetCTSkinPn_1_tRESTResponse_1, responseBodyClass_EQGetCTSkinPn_1_tRESTResponse_1, responseBodyClass_EQGetCTSkinPn_1_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetCTSkinPn_1_tRESTResponse_1, null, outputStream_EQGetCTSkinPn_1_tRESTResponse_1);
			}
			// initial variant
			//outputStream_EQGetCTSkinPn_1_tRESTResponse_1.write(String.valueOf(restProviderResponse_EQGetCTSkinPn_1_tRESTResponse_1).getBytes());
			outputStream_EQGetCTSkinPn_1_tRESTResponse_1.flush();
		}
	}

 


	tos_count_EQGetCTSkinPn_1_tRESTResponse_1++;

/**
 * [EQGetCTSkinPn_1_tRESTResponse_1 main ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tRESTResponse_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In = "EQGetCTSkinPn_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetCTSkinPn_1_tWriteJSONField_2_In==null?"":queue_EQGetCTSkinPn_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetCTSkinPn_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetCTSkinPn_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_In);
				log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetCTSkinPn_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSkinPn_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetCTSkinPn_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tRESTResponse_1";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSkinPn_1_row3",2,0,
			 			"EQGetCTSkinPn_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetCTSkinPn_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetCTSkinPn_1_tRESTResponse_1", true);
end_Hash.put("EQGetCTSkinPn_1_tRESTResponse_1", System.currentTimeMillis());




/**
 * [EQGetCTSkinPn_1_tRESTResponse_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCTSkinPn_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSkinPn_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCTSkinPn_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetCTSkinPn_1_tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSkinPn_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCTSkinPn_1_tRESTResponse_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCTSkinPn_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetCTSolidSurfacePn_1_row3Struct implements routines.system.IPersistableRow<EQGetCTSolidSurfacePn_1_row3Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetCTSolidSurfacePn_1_row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetCTSolidSurfacePn_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetCTSolidSurfacePn_1_row3Struct EQGetCTSolidSurfacePn_1_row3 = new EQGetCTSolidSurfacePn_1_row3Struct();




	
	/**
	 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSolidSurfacePn_1_tRESTResponse_1", false);
		start_Hash.put("EQGetCTSolidSurfacePn_1_tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetCTSolidSurfacePn_1_tRESTResponse_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetCTSolidSurfacePn_1_row3");
			
		int tos_count_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSolidSurfacePn_1_tRESTResponse_1", "tRESTResponse_1", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetCTSolidSurfacePn_1_tWriteJSONField_2");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("CTSolidSurfacePn")+"}]");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetCTSolidSurfacePn_1_row3Struct> queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = (java.util.Queue<EQGetCTSolidSurfacePn_1_row3Struct>) globalMap.get("queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In==null?"":queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In) || !queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	

                    EQGetCTSolidSurfacePn_1_row3Struct result_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.poll();
                    str_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = result_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.body;
                                EQGetCTSolidSurfacePn_1_row3.body = result_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = xmlSerializer_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.read(str_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In);
        EQGetCTSolidSurfacePn_1_row3.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In, jsonStandard_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In);
    
        nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In++;

/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tRESTResponse_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetCTSolidSurfacePn_1_row3","EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetCTSolidSurfacePn_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetCTSolidSurfacePn_1_row3 - " + (EQGetCTSolidSurfacePn_1_row3==null? "": EQGetCTSolidSurfacePn_1_row3.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1 && responseAlreadySent_EQGetCTSolidSurfacePn_1_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = 200;

		Object restProviderResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = null;
		restProviderResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = EQGetCTSolidSurfacePn_1_row3.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetCTSolidSurfacePn_1_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_EQGetCTSolidSurfacePn_1_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetCTSolidSurfacePn_1_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetCTSolidSurfacePn_1_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1.put("BODY", restProviderResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1);
			restResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1.put("STATUS", restProviderStatusCode_EQGetCTSolidSurfacePn_1_tRESTResponse_1);
			restResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_EQGetCTSolidSurfacePn_1_tRESTResponse_1);
			restResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = null;
			if (!responseAlreadySent_EQGetCTSolidSurfacePn_1_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetCTSolidSurfacePn_1_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetCTSolidSurfacePn_1_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetCTSolidSurfacePn_1_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetCTSolidSurfacePn_1_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_EQGetCTSolidSurfacePn_1_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetCTSolidSurfacePn_1_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetCTSolidSurfacePn_1_tRESTResponse_1);

				String responseContentType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetCTSolidSurfacePn_1_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = messageContext_EQGetCTSolidSurfacePn_1_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetCTSolidSurfacePn_1_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1);

				String responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.equals("xml") || responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.endsWith("+xml")) {
					outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.endsWith("+json")) {
					outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1) {
				String responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetCTSolidSurfacePn_1_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = restProviderResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = messageContext_EQGetCTSolidSurfacePn_1_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetCTSolidSurfacePn_1_tRESTResponse_1 = messageBodyProviders_EQGetCTSolidSurfacePn_1_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_EQGetCTSolidSurfacePn_1_tRESTResponse_1, responseBodyClass_EQGetCTSolidSurfacePn_1_tRESTResponse_1, null, responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1);

                if (messageBodyWriter_EQGetCTSolidSurfacePn_1_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetCTSolidSurfacePn_1_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetCTSolidSurfacePn_1_tRESTResponse_1.writeTo(restProviderResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1, responseBodyClass_EQGetCTSolidSurfacePn_1_tRESTResponse_1, responseBodyClass_EQGetCTSolidSurfacePn_1_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetCTSolidSurfacePn_1_tRESTResponse_1, null, outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1);
			}
			// initial variant
			//outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1.write(String.valueOf(restProviderResponse_EQGetCTSolidSurfacePn_1_tRESTResponse_1).getBytes());
			outputStream_EQGetCTSolidSurfacePn_1_tRESTResponse_1.flush();
		}
	}

 


	tos_count_EQGetCTSolidSurfacePn_1_tRESTResponse_1++;

/**
 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 main ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In==null?"":queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In);
				log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tRESTResponse_1";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetCTSolidSurfacePn_1_row3",2,0,
			 			"EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetCTSolidSurfacePn_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetCTSolidSurfacePn_1_tRESTResponse_1", true);
end_Hash.put("EQGetCTSolidSurfacePn_1_tRESTResponse_1", System.currentTimeMillis());




/**
 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetCTSolidSurfacePn_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetCTSolidSurfacePn_1_tRESTResponse_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetCTSolidSurfacePn_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetDwgNo_1_row5Struct implements routines.system.IPersistableRow<EQGetDwgNo_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetDwgNo_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetDwgNo_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetDwgNo_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetDwgNo_1_row5Struct EQGetDwgNo_1_row5 = new EQGetDwgNo_1_row5Struct();




	
	/**
	 * [EQGetDwgNo_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetDwgNo_1_tRESTResponse_2", false);
		start_Hash.put("EQGetDwgNo_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetDwgNo_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetDwgNo_1_row5");
			
		int tos_count_EQGetDwgNo_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetDwgNo_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetDwgNo_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetDwgNo_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetDwgNo_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetDwgNo_1_tWriteJSONField_1");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetDwgNo_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetDwgNo_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetDwgNo_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetDwgNo_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetDwgNo_1_row5Struct> queue_EQGetDwgNo_1_tWriteJSONField_1_In = (java.util.Queue<EQGetDwgNo_1_row5Struct>) globalMap.get("queue_EQGetDwgNo_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In = "EQGetDwgNo_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetDwgNo_1_tWriteJSONField_1_In==null?"":queue_EQGetDwgNo_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetDwgNo_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In) || !queue_EQGetDwgNo_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetDwgNo_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_In";
	
	

                    EQGetDwgNo_1_row5Struct result_EQGetDwgNo_1_tWriteJSONField_1_In = queue_EQGetDwgNo_1_tWriteJSONField_1_In.poll();
                    str_EQGetDwgNo_1_tWriteJSONField_1_In = result_EQGetDwgNo_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetDwgNo_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetDwgNo_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetDwgNo_1_tWriteJSONField_1_In = xmlSerializer_EQGetDwgNo_1_tWriteJSONField_1_In.read(str_EQGetDwgNo_1_tWriteJSONField_1_In);
        EQGetDwgNo_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetDwgNo_1_tWriteJSONField_1_In, jsonStandard_EQGetDwgNo_1_tWriteJSONField_1_In);
    
        nb_line_EQGetDwgNo_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetDwgNo_1_tWriteJSONField_1_In++;

/**
 * [EQGetDwgNo_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetDwgNo_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetDwgNo_1_row5","EQGetDwgNo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetDwgNo_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetDwgNo_1_row5 - " + (EQGetDwgNo_1_row5==null? "": EQGetDwgNo_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetDwgNo_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetDwgNo_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetDwgNo_1_tRESTResponse_2 && responseAlreadySent_EQGetDwgNo_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetDwgNo_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetDwgNo_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetDwgNo_1_tRESTResponse_2 = EQGetDwgNo_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetDwgNo_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetDwgNo_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetDwgNo_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetDwgNo_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetDwgNo_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetDwgNo_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetDwgNo_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetDwgNo_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetDwgNo_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetDwgNo_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetDwgNo_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetDwgNo_1_tRESTResponse_2);
			restResponse_EQGetDwgNo_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetDwgNo_1_tRESTResponse_2);
			restResponse_EQGetDwgNo_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetDwgNo_1_tRESTResponse_2);
			restResponse_EQGetDwgNo_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetDwgNo_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetDwgNo_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetDwgNo_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetDwgNo_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetDwgNo_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetDwgNo_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetDwgNo_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetDwgNo_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetDwgNo_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetDwgNo_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetDwgNo_1_tRESTResponse_2);

				String responseContentType_EQGetDwgNo_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetDwgNo_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetDwgNo_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetDwgNo_1_tRESTResponse_2 = messageContext_EQGetDwgNo_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetDwgNo_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetDwgNo_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetDwgNo_1_tRESTResponse_2);

				String responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2 = responseMediaType_EQGetDwgNo_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetDwgNo_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetDwgNo_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetDwgNo_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetDwgNo_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2 = responseMediaType_EQGetDwgNo_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetDwgNo_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetDwgNo_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetDwgNo_1_tRESTResponse_2 = restProviderResponse_EQGetDwgNo_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetDwgNo_1_tRESTResponse_2 = messageContext_EQGetDwgNo_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetDwgNo_1_tRESTResponse_2 = messageBodyProviders_EQGetDwgNo_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetDwgNo_1_tRESTResponse_2, responseBodyClass_EQGetDwgNo_1_tRESTResponse_2, null, responseMediaType_EQGetDwgNo_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetDwgNo_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetDwgNo_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetDwgNo_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetDwgNo_1_tRESTResponse_2, responseBodyClass_EQGetDwgNo_1_tRESTResponse_2, responseBodyClass_EQGetDwgNo_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetDwgNo_1_tRESTResponse_2, null, outputStream_EQGetDwgNo_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetDwgNo_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetDwgNo_1_tRESTResponse_2).getBytes());
			outputStream_EQGetDwgNo_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetDwgNo_1_tRESTResponse_2++;

/**
 * [EQGetDwgNo_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetDwgNo_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetDwgNo_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In = "EQGetDwgNo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetDwgNo_1_tWriteJSONField_1_In==null?"":queue_EQGetDwgNo_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetDwgNo_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetDwgNo_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetDwgNo_1_tWriteJSONField_1_In);
				log.debug("EQGetDwgNo_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetDwgNo_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetDwgNo_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetDwgNo_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetDwgNo_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetDwgNo_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetDwgNo_1_row5",2,0,
			 			"EQGetDwgNo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetDwgNo_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetDwgNo_1_tRESTResponse_2", true);
end_Hash.put("EQGetDwgNo_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetDwgNo_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetDwgNo_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetDwgNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetDwgNo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetDwgNo_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetDwgNo_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetDwgNo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetDwgNo_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetDwgNo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetItemDesc_1_row5Struct implements routines.system.IPersistableRow<EQGetItemDesc_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetItemDesc_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetItemDesc_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetItemDesc_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetItemDesc_1_row5Struct EQGetItemDesc_1_row5 = new EQGetItemDesc_1_row5Struct();




	
	/**
	 * [EQGetItemDesc_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetItemDesc_1_tRESTResponse_2", false);
		start_Hash.put("EQGetItemDesc_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetItemDesc_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetItemDesc_1_row5");
			
		int tos_count_EQGetItemDesc_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetItemDesc_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetItemDesc_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetItemDesc_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetItemDesc_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetItemDesc_1_tWriteJSONField_1");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetItemDesc_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetItemDesc_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetItemDesc_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetItemDesc_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetItemDesc_1_row5Struct> queue_EQGetItemDesc_1_tWriteJSONField_1_In = (java.util.Queue<EQGetItemDesc_1_row5Struct>) globalMap.get("queue_EQGetItemDesc_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In = "EQGetItemDesc_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetItemDesc_1_tWriteJSONField_1_In==null?"":queue_EQGetItemDesc_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetItemDesc_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In) || !queue_EQGetItemDesc_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetItemDesc_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_In";
	
	

                    EQGetItemDesc_1_row5Struct result_EQGetItemDesc_1_tWriteJSONField_1_In = queue_EQGetItemDesc_1_tWriteJSONField_1_In.poll();
                    str_EQGetItemDesc_1_tWriteJSONField_1_In = result_EQGetItemDesc_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetItemDesc_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetItemDesc_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetItemDesc_1_tWriteJSONField_1_In = xmlSerializer_EQGetItemDesc_1_tWriteJSONField_1_In.read(str_EQGetItemDesc_1_tWriteJSONField_1_In);
        EQGetItemDesc_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetItemDesc_1_tWriteJSONField_1_In, jsonStandard_EQGetItemDesc_1_tWriteJSONField_1_In);
    
        nb_line_EQGetItemDesc_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetItemDesc_1_tWriteJSONField_1_In++;

/**
 * [EQGetItemDesc_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetItemDesc_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetItemDesc_1_row5","EQGetItemDesc_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetItemDesc_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetItemDesc_1_row5 - " + (EQGetItemDesc_1_row5==null? "": EQGetItemDesc_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetItemDesc_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetItemDesc_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetItemDesc_1_tRESTResponse_2 && responseAlreadySent_EQGetItemDesc_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetItemDesc_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetItemDesc_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetItemDesc_1_tRESTResponse_2 = EQGetItemDesc_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetItemDesc_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetItemDesc_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetItemDesc_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetItemDesc_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetItemDesc_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetItemDesc_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetItemDesc_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetItemDesc_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetItemDesc_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetItemDesc_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetItemDesc_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetItemDesc_1_tRESTResponse_2);
			restResponse_EQGetItemDesc_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetItemDesc_1_tRESTResponse_2);
			restResponse_EQGetItemDesc_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetItemDesc_1_tRESTResponse_2);
			restResponse_EQGetItemDesc_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetItemDesc_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetItemDesc_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetItemDesc_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetItemDesc_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetItemDesc_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetItemDesc_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetItemDesc_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetItemDesc_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetItemDesc_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetItemDesc_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetItemDesc_1_tRESTResponse_2);

				String responseContentType_EQGetItemDesc_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetItemDesc_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetItemDesc_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetItemDesc_1_tRESTResponse_2 = messageContext_EQGetItemDesc_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetItemDesc_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetItemDesc_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetItemDesc_1_tRESTResponse_2);

				String responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2 = responseMediaType_EQGetItemDesc_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetItemDesc_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetItemDesc_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetItemDesc_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetItemDesc_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2 = responseMediaType_EQGetItemDesc_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetItemDesc_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetItemDesc_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetItemDesc_1_tRESTResponse_2 = restProviderResponse_EQGetItemDesc_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetItemDesc_1_tRESTResponse_2 = messageContext_EQGetItemDesc_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetItemDesc_1_tRESTResponse_2 = messageBodyProviders_EQGetItemDesc_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetItemDesc_1_tRESTResponse_2, responseBodyClass_EQGetItemDesc_1_tRESTResponse_2, null, responseMediaType_EQGetItemDesc_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetItemDesc_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetItemDesc_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetItemDesc_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetItemDesc_1_tRESTResponse_2, responseBodyClass_EQGetItemDesc_1_tRESTResponse_2, responseBodyClass_EQGetItemDesc_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetItemDesc_1_tRESTResponse_2, null, outputStream_EQGetItemDesc_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetItemDesc_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetItemDesc_1_tRESTResponse_2).getBytes());
			outputStream_EQGetItemDesc_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetItemDesc_1_tRESTResponse_2++;

/**
 * [EQGetItemDesc_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetItemDesc_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetItemDesc_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In = "EQGetItemDesc_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetItemDesc_1_tWriteJSONField_1_In==null?"":queue_EQGetItemDesc_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetItemDesc_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetItemDesc_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetItemDesc_1_tWriteJSONField_1_In);
				log.debug("EQGetItemDesc_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetItemDesc_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetItemDesc_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetItemDesc_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetItemDesc_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetItemDesc_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetItemDesc_1_row5",2,0,
			 			"EQGetItemDesc_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetItemDesc_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetItemDesc_1_tRESTResponse_2", true);
end_Hash.put("EQGetItemDesc_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetItemDesc_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetItemDesc_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetItemDesc_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetItemDesc_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetItemDesc_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetItemDesc_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetItemDesc_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetItemDesc_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetItemDesc_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetParentLine_1_row5Struct implements routines.system.IPersistableRow<EQGetParentLine_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetParentLine_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetParentLine_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetParentLine_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetParentLine_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetParentLine_1_row5Struct EQGetParentLine_1_row5 = new EQGetParentLine_1_row5Struct();




	
	/**
	 * [EQGetParentLine_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetParentLine_1_tRESTResponse_2", false);
		start_Hash.put("EQGetParentLine_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetParentLine_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetParentLine_1_row5");
			
		int tos_count_EQGetParentLine_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetParentLine_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetParentLine_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetParentLine_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetParentLine_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetParentLine_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetParentLine_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetParentLine_1_tWriteJSONField_1");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetParentLine_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetParentLine_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetParentLine_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetParentLine_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetParentLine_1_row5Struct> queue_EQGetParentLine_1_tWriteJSONField_1_In = (java.util.Queue<EQGetParentLine_1_row5Struct>) globalMap.get("queue_EQGetParentLine_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In = "EQGetParentLine_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetParentLine_1_tWriteJSONField_1_In==null?"":queue_EQGetParentLine_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetParentLine_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In) || !queue_EQGetParentLine_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetParentLine_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_In";
	
	

                    EQGetParentLine_1_row5Struct result_EQGetParentLine_1_tWriteJSONField_1_In = queue_EQGetParentLine_1_tWriteJSONField_1_In.poll();
                    str_EQGetParentLine_1_tWriteJSONField_1_In = result_EQGetParentLine_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetParentLine_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetParentLine_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetParentLine_1_tWriteJSONField_1_In = xmlSerializer_EQGetParentLine_1_tWriteJSONField_1_In.read(str_EQGetParentLine_1_tWriteJSONField_1_In);
        EQGetParentLine_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetParentLine_1_tWriteJSONField_1_In, jsonStandard_EQGetParentLine_1_tWriteJSONField_1_In);
    
        nb_line_EQGetParentLine_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetParentLine_1_tWriteJSONField_1_In++;

/**
 * [EQGetParentLine_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetParentLine_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetParentLine_1_row5","EQGetParentLine_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetParentLine_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetParentLine_1_row5 - " + (EQGetParentLine_1_row5==null? "": EQGetParentLine_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetParentLine_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetParentLine_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetParentLine_1_tRESTResponse_2 && responseAlreadySent_EQGetParentLine_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetParentLine_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetParentLine_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetParentLine_1_tRESTResponse_2 = EQGetParentLine_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetParentLine_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetParentLine_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetParentLine_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetParentLine_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetParentLine_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetParentLine_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetParentLine_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetParentLine_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetParentLine_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetParentLine_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetParentLine_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetParentLine_1_tRESTResponse_2);
			restResponse_EQGetParentLine_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetParentLine_1_tRESTResponse_2);
			restResponse_EQGetParentLine_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetParentLine_1_tRESTResponse_2);
			restResponse_EQGetParentLine_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetParentLine_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetParentLine_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetParentLine_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetParentLine_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetParentLine_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetParentLine_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetParentLine_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetParentLine_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetParentLine_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetParentLine_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetParentLine_1_tRESTResponse_2);

				String responseContentType_EQGetParentLine_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetParentLine_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetParentLine_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetParentLine_1_tRESTResponse_2 = messageContext_EQGetParentLine_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetParentLine_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetParentLine_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetParentLine_1_tRESTResponse_2);

				String responseMediaSubType_EQGetParentLine_1_tRESTResponse_2 = responseMediaType_EQGetParentLine_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetParentLine_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetParentLine_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetParentLine_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetParentLine_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetParentLine_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetParentLine_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetParentLine_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetParentLine_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetParentLine_1_tRESTResponse_2 = responseMediaType_EQGetParentLine_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetParentLine_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetParentLine_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetParentLine_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetParentLine_1_tRESTResponse_2 = restProviderResponse_EQGetParentLine_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetParentLine_1_tRESTResponse_2 = messageContext_EQGetParentLine_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetParentLine_1_tRESTResponse_2 = messageBodyProviders_EQGetParentLine_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetParentLine_1_tRESTResponse_2, responseBodyClass_EQGetParentLine_1_tRESTResponse_2, null, responseMediaType_EQGetParentLine_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetParentLine_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetParentLine_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetParentLine_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetParentLine_1_tRESTResponse_2, responseBodyClass_EQGetParentLine_1_tRESTResponse_2, responseBodyClass_EQGetParentLine_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetParentLine_1_tRESTResponse_2, null, outputStream_EQGetParentLine_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetParentLine_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetParentLine_1_tRESTResponse_2).getBytes());
			outputStream_EQGetParentLine_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetParentLine_1_tRESTResponse_2++;

/**
 * [EQGetParentLine_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetParentLine_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetParentLine_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In = "EQGetParentLine_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetParentLine_1_tWriteJSONField_1_In==null?"":queue_EQGetParentLine_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetParentLine_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetParentLine_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetParentLine_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetParentLine_1_tWriteJSONField_1_In);
				log.debug("EQGetParentLine_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetParentLine_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetParentLine_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetParentLine_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetParentLine_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetParentLine_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetParentLine_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetParentLine_1_row5",2,0,
			 			"EQGetParentLine_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetParentLine_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetParentLine_1_tRESTResponse_2", true);
end_Hash.put("EQGetParentLine_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetParentLine_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetParentLine_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetParentLine_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetParentLine_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetParentLine_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetParentLine_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetParentLine_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetParentLine_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetParentLine_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetPriceGroupTier_1_row5Struct implements routines.system.IPersistableRow<EQGetPriceGroupTier_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetPriceGroupTier_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetPriceGroupTier_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetPriceGroupTier_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetPriceGroupTier_1_row5Struct EQGetPriceGroupTier_1_row5 = new EQGetPriceGroupTier_1_row5Struct();




	
	/**
	 * [EQGetPriceGroupTier_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetPriceGroupTier_1_tRESTResponse_2", false);
		start_Hash.put("EQGetPriceGroupTier_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetPriceGroupTier_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetPriceGroupTier_1_row5");
			
		int tos_count_EQGetPriceGroupTier_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetPriceGroupTier_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetPriceGroupTier_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetPriceGroupTier_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetPriceGroupTier_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetPriceGroupTier_1_tWriteJSONField_1");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("PriceGroupTier")+"}]");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetPriceGroupTier_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetPriceGroupTier_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetPriceGroupTier_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetPriceGroupTier_1_row5Struct> queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In = (java.util.Queue<EQGetPriceGroupTier_1_row5Struct>) globalMap.get("queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In = "EQGetPriceGroupTier_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In==null?"":queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetPriceGroupTier_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In) || !queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	

                    EQGetPriceGroupTier_1_row5Struct result_EQGetPriceGroupTier_1_tWriteJSONField_1_In = queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In.poll();
                    str_EQGetPriceGroupTier_1_tWriteJSONField_1_In = result_EQGetPriceGroupTier_1_tWriteJSONField_1_In.body;
                                EQGetPriceGroupTier_1_row5.body = result_EQGetPriceGroupTier_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetPriceGroupTier_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetPriceGroupTier_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetPriceGroupTier_1_tWriteJSONField_1_In = xmlSerializer_EQGetPriceGroupTier_1_tWriteJSONField_1_In.read(str_EQGetPriceGroupTier_1_tWriteJSONField_1_In);
        EQGetPriceGroupTier_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetPriceGroupTier_1_tWriteJSONField_1_In, jsonStandard_EQGetPriceGroupTier_1_tWriteJSONField_1_In);
    
        nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetPriceGroupTier_1_tWriteJSONField_1_In++;

/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetPriceGroupTier_1_row5","EQGetPriceGroupTier_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetPriceGroupTier_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetPriceGroupTier_1_row5 - " + (EQGetPriceGroupTier_1_row5==null? "": EQGetPriceGroupTier_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetPriceGroupTier_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetPriceGroupTier_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetPriceGroupTier_1_tRESTResponse_2 && responseAlreadySent_EQGetPriceGroupTier_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetPriceGroupTier_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetPriceGroupTier_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetPriceGroupTier_1_tRESTResponse_2 = EQGetPriceGroupTier_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetPriceGroupTier_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetPriceGroupTier_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetPriceGroupTier_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetPriceGroupTier_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetPriceGroupTier_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetPriceGroupTier_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetPriceGroupTier_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetPriceGroupTier_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetPriceGroupTier_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetPriceGroupTier_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetPriceGroupTier_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetPriceGroupTier_1_tRESTResponse_2);
			restResponse_EQGetPriceGroupTier_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetPriceGroupTier_1_tRESTResponse_2);
			restResponse_EQGetPriceGroupTier_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetPriceGroupTier_1_tRESTResponse_2);
			restResponse_EQGetPriceGroupTier_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetPriceGroupTier_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetPriceGroupTier_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetPriceGroupTier_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetPriceGroupTier_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetPriceGroupTier_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetPriceGroupTier_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetPriceGroupTier_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetPriceGroupTier_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetPriceGroupTier_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetPriceGroupTier_1_tRESTResponse_2);

				String responseContentType_EQGetPriceGroupTier_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetPriceGroupTier_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetPriceGroupTier_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2 = messageContext_EQGetPriceGroupTier_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetPriceGroupTier_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2);

				String responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2 = responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetPriceGroupTier_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetPriceGroupTier_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetPriceGroupTier_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2 = responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetPriceGroupTier_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetPriceGroupTier_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetPriceGroupTier_1_tRESTResponse_2 = restProviderResponse_EQGetPriceGroupTier_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetPriceGroupTier_1_tRESTResponse_2 = messageContext_EQGetPriceGroupTier_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetPriceGroupTier_1_tRESTResponse_2 = messageBodyProviders_EQGetPriceGroupTier_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetPriceGroupTier_1_tRESTResponse_2, responseBodyClass_EQGetPriceGroupTier_1_tRESTResponse_2, null, responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetPriceGroupTier_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetPriceGroupTier_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetPriceGroupTier_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetPriceGroupTier_1_tRESTResponse_2, responseBodyClass_EQGetPriceGroupTier_1_tRESTResponse_2, responseBodyClass_EQGetPriceGroupTier_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetPriceGroupTier_1_tRESTResponse_2, null, outputStream_EQGetPriceGroupTier_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetPriceGroupTier_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetPriceGroupTier_1_tRESTResponse_2).getBytes());
			outputStream_EQGetPriceGroupTier_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetPriceGroupTier_1_tRESTResponse_2++;

/**
 * [EQGetPriceGroupTier_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In = "EQGetPriceGroupTier_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In==null?"":queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetPriceGroupTier_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetPriceGroupTier_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_In);
				log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetPriceGroupTier_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetPriceGroupTier_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetPriceGroupTier_1_row5",2,0,
			 			"EQGetPriceGroupTier_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetPriceGroupTier_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetPriceGroupTier_1_tRESTResponse_2", true);
end_Hash.put("EQGetPriceGroupTier_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetPriceGroupTier_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetPriceGroupTier_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetPriceGroupTier_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetPriceGroupTier_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetPriceGroupTier_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetPriceGroupTier_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetProdOrders_1_row6Struct implements routines.system.IPersistableRow<EQGetProdOrders_1_row6Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return "";
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetProdOrders_1_row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetProdOrders_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetProdOrders_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetProdOrders_1_row6Struct EQGetProdOrders_1_row6 = new EQGetProdOrders_1_row6Struct();




	
	/**
	 * [EQGetProdOrders_1_tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetProdOrders_1_tRESTResponse_1", false);
		start_Hash.put("EQGetProdOrders_1_tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetProdOrders_1_tRESTResponse_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetProdOrders_1_row6");
			
		int tos_count_EQGetProdOrders_1_tRESTResponse_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetProdOrders_1_tRESTResponse_1", "tRESTResponse_1", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetProdOrders_1_tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetProdOrders_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetProdOrders_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetProdOrders_1_tWriteJSONField_2");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("ProdOrders")+"}]");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetProdOrders_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetProdOrders_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetProdOrders_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetProdOrders_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In.setForceTopLevelObject(true);
			    xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetProdOrders_1_row6Struct> queue_EQGetProdOrders_1_tWriteJSONField_2_In = (java.util.Queue<EQGetProdOrders_1_row6Struct>) globalMap.get("queue_EQGetProdOrders_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In = "EQGetProdOrders_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetProdOrders_1_tWriteJSONField_2_In==null?"":queue_EQGetProdOrders_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetProdOrders_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In) || !queue_EQGetProdOrders_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetProdOrders_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_In";
	
	

                    EQGetProdOrders_1_row6Struct result_EQGetProdOrders_1_tWriteJSONField_2_In = queue_EQGetProdOrders_1_tWriteJSONField_2_In.poll();
                    str_EQGetProdOrders_1_tWriteJSONField_2_In = result_EQGetProdOrders_1_tWriteJSONField_2_In.body;
                                EQGetProdOrders_1_row6.body = result_EQGetProdOrders_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetProdOrders_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetProdOrders_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetProdOrders_1_tWriteJSONField_2_In = xmlSerializer_EQGetProdOrders_1_tWriteJSONField_2_In.read(str_EQGetProdOrders_1_tWriteJSONField_2_In);
        EQGetProdOrders_1_row6.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetProdOrders_1_tWriteJSONField_2_In, jsonStandard_EQGetProdOrders_1_tWriteJSONField_2_In);
    
        nb_line_EQGetProdOrders_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetProdOrders_1_tWriteJSONField_2_In++;

/**
 * [EQGetProdOrders_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tRESTResponse_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetProdOrders_1_row6","EQGetProdOrders_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetProdOrders_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetProdOrders_1_row6 - " + (EQGetProdOrders_1_row6==null? "": EQGetProdOrders_1_row6.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetProdOrders_1_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetProdOrders_1_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetProdOrders_1_tRESTResponse_1 && responseAlreadySent_EQGetProdOrders_1_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetProdOrders_1_tRESTResponse_1 = 200;

		Object restProviderResponse_EQGetProdOrders_1_tRESTResponse_1 = null;
		restProviderResponse_EQGetProdOrders_1_tRESTResponse_1 = EQGetProdOrders_1_row6.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetProdOrders_1_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetProdOrders_1_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetProdOrders_1_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_EQGetProdOrders_1_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetProdOrders_1_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetProdOrders_1_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetProdOrders_1_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetProdOrders_1_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetProdOrders_1_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_EQGetProdOrders_1_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_EQGetProdOrders_1_tRESTResponse_1.put("BODY", restProviderResponse_EQGetProdOrders_1_tRESTResponse_1);
			restResponse_EQGetProdOrders_1_tRESTResponse_1.put("STATUS", restProviderStatusCode_EQGetProdOrders_1_tRESTResponse_1);
			restResponse_EQGetProdOrders_1_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_EQGetProdOrders_1_tRESTResponse_1);
			restResponse_EQGetProdOrders_1_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetProdOrders_1_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetProdOrders_1_tRESTResponse_1 = null;
			if (!responseAlreadySent_EQGetProdOrders_1_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetProdOrders_1_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetProdOrders_1_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetProdOrders_1_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetProdOrders_1_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetProdOrders_1_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_EQGetProdOrders_1_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetProdOrders_1_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetProdOrders_1_tRESTResponse_1);

				String responseContentType_EQGetProdOrders_1_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetProdOrders_1_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetProdOrders_1_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetProdOrders_1_tRESTResponse_1 = messageContext_EQGetProdOrders_1_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetProdOrders_1_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetProdOrders_1_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetProdOrders_1_tRESTResponse_1);

				String responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1 = responseMediaType_EQGetProdOrders_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1.equals("xml") || responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1.endsWith("+xml")) {
					outputStream_EQGetProdOrders_1_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1.endsWith("+json")) {
					outputStream_EQGetProdOrders_1_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetProdOrders_1_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetProdOrders_1_tRESTResponse_1) {
				String responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1 = responseMediaType_EQGetProdOrders_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetProdOrders_1_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetProdOrders_1_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetProdOrders_1_tRESTResponse_1 = restProviderResponse_EQGetProdOrders_1_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetProdOrders_1_tRESTResponse_1 = messageContext_EQGetProdOrders_1_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetProdOrders_1_tRESTResponse_1 = messageBodyProviders_EQGetProdOrders_1_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_EQGetProdOrders_1_tRESTResponse_1, responseBodyClass_EQGetProdOrders_1_tRESTResponse_1, null, responseMediaType_EQGetProdOrders_1_tRESTResponse_1);

                if (messageBodyWriter_EQGetProdOrders_1_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetProdOrders_1_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetProdOrders_1_tRESTResponse_1.writeTo(restProviderResponse_EQGetProdOrders_1_tRESTResponse_1, responseBodyClass_EQGetProdOrders_1_tRESTResponse_1, responseBodyClass_EQGetProdOrders_1_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetProdOrders_1_tRESTResponse_1, null, outputStream_EQGetProdOrders_1_tRESTResponse_1);
			}
			// initial variant
			//outputStream_EQGetProdOrders_1_tRESTResponse_1.write(String.valueOf(restProviderResponse_EQGetProdOrders_1_tRESTResponse_1).getBytes());
			outputStream_EQGetProdOrders_1_tRESTResponse_1.flush();
		}
	}

 


	tos_count_EQGetProdOrders_1_tRESTResponse_1++;

/**
 * [EQGetProdOrders_1_tRESTResponse_1 main ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetProdOrders_1_tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetProdOrders_1_tRESTResponse_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In = "EQGetProdOrders_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetProdOrders_1_tWriteJSONField_2_In==null?"":queue_EQGetProdOrders_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetProdOrders_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetProdOrders_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetProdOrders_1_tWriteJSONField_2_In);
				log.debug("EQGetProdOrders_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetProdOrders_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetProdOrders_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetProdOrders_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetProdOrders_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tRESTResponse_1";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetProdOrders_1_row6",2,0,
			 			"EQGetProdOrders_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetProdOrders_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetProdOrders_1_tRESTResponse_1", true);
end_Hash.put("EQGetProdOrders_1_tRESTResponse_1", System.currentTimeMillis());




/**
 * [EQGetProdOrders_1_tRESTResponse_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetProdOrders_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetProdOrders_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetProdOrders_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetProdOrders_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetProdOrders_1_tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetProdOrders_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetProdOrders_1_tRESTResponse_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetProdOrders_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetRRVendorNo_1_row5Struct implements routines.system.IPersistableRow<EQGetRRVendorNo_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetRRVendorNo_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetRRVendorNo_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetRRVendorNo_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetRRVendorNo_1_row5Struct EQGetRRVendorNo_1_row5 = new EQGetRRVendorNo_1_row5Struct();




	
	/**
	 * [EQGetRRVendorNo_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetRRVendorNo_1_tRESTResponse_2", false);
		start_Hash.put("EQGetRRVendorNo_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetRRVendorNo_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetRRVendorNo_1_row5");
			
		int tos_count_EQGetRRVendorNo_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetRRVendorNo_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetRRVendorNo_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetRRVendorNo_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetRRVendorNo_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetRRVendorNo_1_tWriteJSONField_1");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetRRVendorNo_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetRRVendorNo_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetRRVendorNo_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetRRVendorNo_1_row5Struct> queue_EQGetRRVendorNo_1_tWriteJSONField_1_In = (java.util.Queue<EQGetRRVendorNo_1_row5Struct>) globalMap.get("queue_EQGetRRVendorNo_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In = "EQGetRRVendorNo_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetRRVendorNo_1_tWriteJSONField_1_In==null?"":queue_EQGetRRVendorNo_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetRRVendorNo_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In) || !queue_EQGetRRVendorNo_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetRRVendorNo_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	

                    EQGetRRVendorNo_1_row5Struct result_EQGetRRVendorNo_1_tWriteJSONField_1_In = queue_EQGetRRVendorNo_1_tWriteJSONField_1_In.poll();
                    str_EQGetRRVendorNo_1_tWriteJSONField_1_In = result_EQGetRRVendorNo_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetRRVendorNo_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetRRVendorNo_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetRRVendorNo_1_tWriteJSONField_1_In = xmlSerializer_EQGetRRVendorNo_1_tWriteJSONField_1_In.read(str_EQGetRRVendorNo_1_tWriteJSONField_1_In);
        EQGetRRVendorNo_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetRRVendorNo_1_tWriteJSONField_1_In, jsonStandard_EQGetRRVendorNo_1_tWriteJSONField_1_In);
    
        nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetRRVendorNo_1_tWriteJSONField_1_In++;

/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetRRVendorNo_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetRRVendorNo_1_row5","EQGetRRVendorNo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetRRVendorNo_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetRRVendorNo_1_row5 - " + (EQGetRRVendorNo_1_row5==null? "": EQGetRRVendorNo_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetRRVendorNo_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetRRVendorNo_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetRRVendorNo_1_tRESTResponse_2 && responseAlreadySent_EQGetRRVendorNo_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetRRVendorNo_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetRRVendorNo_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetRRVendorNo_1_tRESTResponse_2 = EQGetRRVendorNo_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetRRVendorNo_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetRRVendorNo_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetRRVendorNo_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetRRVendorNo_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetRRVendorNo_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetRRVendorNo_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetRRVendorNo_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetRRVendorNo_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetRRVendorNo_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetRRVendorNo_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetRRVendorNo_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetRRVendorNo_1_tRESTResponse_2);
			restResponse_EQGetRRVendorNo_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetRRVendorNo_1_tRESTResponse_2);
			restResponse_EQGetRRVendorNo_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetRRVendorNo_1_tRESTResponse_2);
			restResponse_EQGetRRVendorNo_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetRRVendorNo_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetRRVendorNo_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetRRVendorNo_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetRRVendorNo_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetRRVendorNo_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetRRVendorNo_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetRRVendorNo_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetRRVendorNo_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetRRVendorNo_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetRRVendorNo_1_tRESTResponse_2);

				String responseContentType_EQGetRRVendorNo_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetRRVendorNo_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetRRVendorNo_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2 = messageContext_EQGetRRVendorNo_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetRRVendorNo_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2);

				String responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2 = responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetRRVendorNo_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetRRVendorNo_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetRRVendorNo_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2 = responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetRRVendorNo_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetRRVendorNo_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetRRVendorNo_1_tRESTResponse_2 = restProviderResponse_EQGetRRVendorNo_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetRRVendorNo_1_tRESTResponse_2 = messageContext_EQGetRRVendorNo_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetRRVendorNo_1_tRESTResponse_2 = messageBodyProviders_EQGetRRVendorNo_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetRRVendorNo_1_tRESTResponse_2, responseBodyClass_EQGetRRVendorNo_1_tRESTResponse_2, null, responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetRRVendorNo_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetRRVendorNo_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetRRVendorNo_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetRRVendorNo_1_tRESTResponse_2, responseBodyClass_EQGetRRVendorNo_1_tRESTResponse_2, responseBodyClass_EQGetRRVendorNo_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetRRVendorNo_1_tRESTResponse_2, null, outputStream_EQGetRRVendorNo_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetRRVendorNo_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetRRVendorNo_1_tRESTResponse_2).getBytes());
			outputStream_EQGetRRVendorNo_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetRRVendorNo_1_tRESTResponse_2++;

/**
 * [EQGetRRVendorNo_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetRRVendorNo_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetRRVendorNo_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In = "EQGetRRVendorNo_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetRRVendorNo_1_tWriteJSONField_1_In==null?"":queue_EQGetRRVendorNo_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetRRVendorNo_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetRRVendorNo_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_In);
				log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetRRVendorNo_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetRRVendorNo_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetRRVendorNo_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetRRVendorNo_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetRRVendorNo_1_row5",2,0,
			 			"EQGetRRVendorNo_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetRRVendorNo_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetRRVendorNo_1_tRESTResponse_2", true);
end_Hash.put("EQGetRRVendorNo_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetRRVendorNo_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetRRVendorNo_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetRRVendorNo_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetRRVendorNo_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetRRVendorNo_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetRRVendorNo_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetRRVendorNo_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetRRVendorNo_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetSecondaryPriceGroup_1_row3Struct implements routines.system.IPersistableRow<EQGetSecondaryPriceGroup_1_row3Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSecondaryPriceGroup_1_row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetSecondaryPriceGroup_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetSecondaryPriceGroup_1_row3Struct EQGetSecondaryPriceGroup_1_row3 = new EQGetSecondaryPriceGroup_1_row3Struct();




	
	/**
	 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSecondaryPriceGroup_1_tRESTResponse_2", false);
		start_Hash.put("EQGetSecondaryPriceGroup_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetSecondaryPriceGroup_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSecondaryPriceGroup_1_row3");
			
		int tos_count_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSecondaryPriceGroup_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetSecondaryPriceGroup_1_tWriteJSONField_2");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("SecondaryPriceGroup")+"}]");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetSecondaryPriceGroup_1_row3Struct> queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = (java.util.Queue<EQGetSecondaryPriceGroup_1_row3Struct>) globalMap.get("queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In==null?"":queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In) || !queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	

                    EQGetSecondaryPriceGroup_1_row3Struct result_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.poll();
                    str_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = result_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.body;
                                EQGetSecondaryPriceGroup_1_row3.body = result_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = xmlSerializer_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.read(str_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In);
        EQGetSecondaryPriceGroup_1_row3.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In, jsonStandard_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In);
    
        nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In++;

/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSecondaryPriceGroup_1_row3","EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetSecondaryPriceGroup_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSecondaryPriceGroup_1_row3 - " + (EQGetSecondaryPriceGroup_1_row3==null? "": EQGetSecondaryPriceGroup_1_row3.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2 && responseAlreadySent_EQGetSecondaryPriceGroup_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = EQGetSecondaryPriceGroup_1_row3.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetSecondaryPriceGroup_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetSecondaryPriceGroup_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetSecondaryPriceGroup_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetSecondaryPriceGroup_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2);
			restResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetSecondaryPriceGroup_1_tRESTResponse_2);
			restResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetSecondaryPriceGroup_1_tRESTResponse_2);
			restResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetSecondaryPriceGroup_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetSecondaryPriceGroup_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetSecondaryPriceGroup_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetSecondaryPriceGroup_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetSecondaryPriceGroup_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetSecondaryPriceGroup_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetSecondaryPriceGroup_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetSecondaryPriceGroup_1_tRESTResponse_2);

				String responseContentType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetSecondaryPriceGroup_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = messageContext_EQGetSecondaryPriceGroup_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetSecondaryPriceGroup_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2);

				String responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetSecondaryPriceGroup_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = restProviderResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = messageContext_EQGetSecondaryPriceGroup_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetSecondaryPriceGroup_1_tRESTResponse_2 = messageBodyProviders_EQGetSecondaryPriceGroup_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetSecondaryPriceGroup_1_tRESTResponse_2, responseBodyClass_EQGetSecondaryPriceGroup_1_tRESTResponse_2, null, responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetSecondaryPriceGroup_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetSecondaryPriceGroup_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetSecondaryPriceGroup_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2, responseBodyClass_EQGetSecondaryPriceGroup_1_tRESTResponse_2, responseBodyClass_EQGetSecondaryPriceGroup_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetSecondaryPriceGroup_1_tRESTResponse_2, null, outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetSecondaryPriceGroup_1_tRESTResponse_2).getBytes());
			outputStream_EQGetSecondaryPriceGroup_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetSecondaryPriceGroup_1_tRESTResponse_2++;

/**
 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In==null?"":queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In);
				log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSecondaryPriceGroup_1_row3",2,0,
			 			"EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetSecondaryPriceGroup_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetSecondaryPriceGroup_1_tRESTResponse_2", true);
end_Hash.put("EQGetSecondaryPriceGroup_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetSecondaryPriceGroup_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetSecondaryPriceGroup_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetSecondaryPriceGroup_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetSellTo_1_row3Struct implements routines.system.IPersistableRow<EQGetSellTo_1_row3Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSellTo_1_row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetSellTo_1_tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetSellTo_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetSellTo_1_tWriteJSONField_2_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetSellTo_1_row3Struct EQGetSellTo_1_row3 = new EQGetSellTo_1_row3Struct();




	
	/**
	 * [EQGetSellTo_1_tRESTResponse_1 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSellTo_1_tRESTResponse_1", false);
		start_Hash.put("EQGetSellTo_1_tRESTResponse_1", System.currentTimeMillis());
		
	
	currentComponent="EQGetSellTo_1_tRESTResponse_1";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSellTo_1_row3");
			
		int tos_count_EQGetSellTo_1_tRESTResponse_1 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSellTo_1_tRESTResponse_1", "tRESTResponse_1", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetSellTo_1_tRESTResponse_1 begin ] stop
 */



	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSellTo_1_tWriteJSONField_2_In", false);
		start_Hash.put("EQGetSellTo_1_tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_In";
	
	
		int tos_count_EQGetSellTo_1_tWriteJSONField_2_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tWriteJSONField_2_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSellTo_1_tWriteJSONField_2_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In = new StringBuilder();
                    log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("Parameters:");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("DESTINATION" + " = " + "EQGetSellTo_1_tWriteJSONField_2");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append(" | ");
                            log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tWriteJSONField_2_In - "  + (log4jParamters_EQGetSellTo_1_tWriteJSONField_2_In) );
                    } 
                } 
            new BytesLimit65535_EQGetSellTo_1_tWriteJSONField_2_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSellTo_1_tWriteJSONField_2_In", "tWriteJSONField_2_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetSellTo_1_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetSellTo_1_row3Struct> queue_EQGetSellTo_1_tWriteJSONField_2_In = (java.util.Queue<EQGetSellTo_1_row3Struct>) globalMap.get("queue_EQGetSellTo_1_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In = "EQGetSellTo_1_tWriteJSONField_2_In_FINISH"+(queue_EQGetSellTo_1_tWriteJSONField_2_In==null?"":queue_EQGetSellTo_1_tWriteJSONField_2_In.hashCode());
				String str_EQGetSellTo_1_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In) || !queue_EQGetSellTo_1_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_EQGetSellTo_1_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_In";
	
	

                    EQGetSellTo_1_row3Struct result_EQGetSellTo_1_tWriteJSONField_2_In = queue_EQGetSellTo_1_tWriteJSONField_2_In.poll();
                    str_EQGetSellTo_1_tWriteJSONField_2_In = result_EQGetSellTo_1_tWriteJSONField_2_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetSellTo_1_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In.setJsonStandard(jsonStandard_EQGetSellTo_1_tWriteJSONField_2_In);
        net.sf.json.JSON json_EQGetSellTo_1_tWriteJSONField_2_In = xmlSerializer_EQGetSellTo_1_tWriteJSONField_2_In.read(str_EQGetSellTo_1_tWriteJSONField_2_In);
        EQGetSellTo_1_row3.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetSellTo_1_tWriteJSONField_2_In, jsonStandard_EQGetSellTo_1_tWriteJSONField_2_In);
    
        nb_line_EQGetSellTo_1_tWriteJSONField_2_In++;

 


	tos_count_EQGetSellTo_1_tWriteJSONField_2_In++;

/**
 * [EQGetSellTo_1_tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetSellTo_1_tRESTResponse_1 main ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tRESTResponse_1";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSellTo_1_row3","EQGetSellTo_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetSellTo_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSellTo_1_row3 - " + (EQGetSellTo_1_row3==null? "": EQGetSellTo_1_row3.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetSellTo_1_tRESTResponse_1 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetSellTo_1_tRESTResponse_1 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetSellTo_1_tRESTResponse_1 && responseAlreadySent_EQGetSellTo_1_tRESTResponse_1) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetSellTo_1_tRESTResponse_1 = 200;

		Object restProviderResponse_EQGetSellTo_1_tRESTResponse_1 = null;
		restProviderResponse_EQGetSellTo_1_tRESTResponse_1 = EQGetSellTo_1_row3.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetSellTo_1_tRESTResponse_1 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetSellTo_1_tRESTResponse_1 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetSellTo_1_tRESTResponse_1.length() > 0) {
		    restProviderResponseHeaders_EQGetSellTo_1_tRESTResponse_1.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetSellTo_1_tRESTResponse_1.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetSellTo_1_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetSellTo_1_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetSellTo_1_tRESTResponse_1.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetSellTo_1_tRESTResponse_1) {
			java.util.Map<String, Object> restResponse_EQGetSellTo_1_tRESTResponse_1 = new java.util.HashMap<String, Object>();
			restResponse_EQGetSellTo_1_tRESTResponse_1.put("BODY", restProviderResponse_EQGetSellTo_1_tRESTResponse_1);
			restResponse_EQGetSellTo_1_tRESTResponse_1.put("STATUS", restProviderStatusCode_EQGetSellTo_1_tRESTResponse_1);
			restResponse_EQGetSellTo_1_tRESTResponse_1.put("HEADERS", restProviderResponseHeaders_EQGetSellTo_1_tRESTResponse_1);
			restResponse_EQGetSellTo_1_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetSellTo_1_tRESTResponse_1);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetSellTo_1_tRESTResponse_1 = null;
			if (!responseAlreadySent_EQGetSellTo_1_tRESTResponse_1) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetSellTo_1_tRESTResponse_1.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetSellTo_1_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetSellTo_1_tRESTResponse_1);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetSellTo_1_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetSellTo_1_tRESTResponse_1.entrySet()) {
					headersMultivaluedMap_EQGetSellTo_1_tRESTResponse_1.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetSellTo_1_tRESTResponse_1.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetSellTo_1_tRESTResponse_1);

				String responseContentType_EQGetSellTo_1_tRESTResponse_1 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetSellTo_1_tRESTResponse_1 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetSellTo_1_tRESTResponse_1) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetSellTo_1_tRESTResponse_1 = messageContext_EQGetSellTo_1_tRESTResponse_1.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetSellTo_1_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetSellTo_1_tRESTResponse_1);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetSellTo_1_tRESTResponse_1);

				String responseMediaSubType_EQGetSellTo_1_tRESTResponse_1 = responseMediaType_EQGetSellTo_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetSellTo_1_tRESTResponse_1.equals("xml") || responseMediaSubType_EQGetSellTo_1_tRESTResponse_1.endsWith("+xml")) {
					outputStream_EQGetSellTo_1_tRESTResponse_1.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetSellTo_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetSellTo_1_tRESTResponse_1.endsWith("+json")) {
					outputStream_EQGetSellTo_1_tRESTResponse_1.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetSellTo_1_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetSellTo_1_tRESTResponse_1) {
				String responseMediaSubType_EQGetSellTo_1_tRESTResponse_1 = responseMediaType_EQGetSellTo_1_tRESTResponse_1.getSubtype();
				if (responseMediaSubType_EQGetSellTo_1_tRESTResponse_1.equals("json") || responseMediaSubType_EQGetSellTo_1_tRESTResponse_1.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetSellTo_1_tRESTResponse_1.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetSellTo_1_tRESTResponse_1 = restProviderResponse_EQGetSellTo_1_tRESTResponse_1.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetSellTo_1_tRESTResponse_1 = messageContext_EQGetSellTo_1_tRESTResponse_1.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetSellTo_1_tRESTResponse_1 = messageBodyProviders_EQGetSellTo_1_tRESTResponse_1.getMessageBodyWriter(
						responseBodyClass_EQGetSellTo_1_tRESTResponse_1, responseBodyClass_EQGetSellTo_1_tRESTResponse_1, null, responseMediaType_EQGetSellTo_1_tRESTResponse_1);

                if (messageBodyWriter_EQGetSellTo_1_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetSellTo_1_tRESTResponse_1).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetSellTo_1_tRESTResponse_1.writeTo(restProviderResponse_EQGetSellTo_1_tRESTResponse_1, responseBodyClass_EQGetSellTo_1_tRESTResponse_1, responseBodyClass_EQGetSellTo_1_tRESTResponse_1,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetSellTo_1_tRESTResponse_1, null, outputStream_EQGetSellTo_1_tRESTResponse_1);
			}
			// initial variant
			//outputStream_EQGetSellTo_1_tRESTResponse_1.write(String.valueOf(restProviderResponse_EQGetSellTo_1_tRESTResponse_1).getBytes());
			outputStream_EQGetSellTo_1_tRESTResponse_1.flush();
		}
	}

 


	tos_count_EQGetSellTo_1_tRESTResponse_1++;

/**
 * [EQGetSellTo_1_tRESTResponse_1 main ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tRESTResponse_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetSellTo_1_tRESTResponse_1 process_data_begin ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tRESTResponse_1 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetSellTo_1_tRESTResponse_1 process_data_end ] stop
 */



	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In = "EQGetSellTo_1_tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_EQGetSellTo_1_tWriteJSONField_2_In==null?"":queue_EQGetSellTo_1_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_EQGetSellTo_1_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetSellTo_1_tWriteJSONField_2_In);
			
globalMap.put("EQGetSellTo_1_tWriteJSONField_2_NB_LINE",nb_line_EQGetSellTo_1_tWriteJSONField_2_In);
				log.debug("EQGetSellTo_1_tWriteJSONField_2_In - Processed records count: " + nb_line_EQGetSellTo_1_tWriteJSONField_2_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetSellTo_1_tWriteJSONField_2_In - "  + ("Done.") );

ok_Hash.put("EQGetSellTo_1_tWriteJSONField_2_In", true);
end_Hash.put("EQGetSellTo_1_tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [EQGetSellTo_1_tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [EQGetSellTo_1_tRESTResponse_1 end ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tRESTResponse_1";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSellTo_1_row3",2,0,
			 			"EQGetSellTo_1_tWriteJSONField_2_In","tWriteJSONField_2_In","tWriteJSONFieldIn","EQGetSellTo_1_tRESTResponse_1","tRESTResponse_1","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetSellTo_1_tRESTResponse_1", true);
end_Hash.put("EQGetSellTo_1_tRESTResponse_1", System.currentTimeMillis());




/**
 * [EQGetSellTo_1_tRESTResponse_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetSellTo_1_tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSellTo_1_tWriteJSONField_2_In";
	
	currentComponent="EQGetSellTo_1_tWriteJSONField_2_In";
	
	

 



/**
 * [EQGetSellTo_1_tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [EQGetSellTo_1_tRESTResponse_1 finally ] start
	 */

	

	
	
	currentComponent="EQGetSellTo_1_tRESTResponse_1";
	
	

 



/**
 * [EQGetSellTo_1_tRESTResponse_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetSellTo_1_tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetUOMConv_1_row5Struct implements routines.system.IPersistableRow<EQGetUOMConv_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetUOMConv_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetUOMConv_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetUOMConv_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetUOMConv_1_row5Struct EQGetUOMConv_1_row5 = new EQGetUOMConv_1_row5Struct();




	
	/**
	 * [EQGetUOMConv_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetUOMConv_1_tRESTResponse_2", false);
		start_Hash.put("EQGetUOMConv_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetUOMConv_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetUOMConv_1_row5");
			
		int tos_count_EQGetUOMConv_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetUOMConv_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetUOMConv_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetUOMConv_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetUOMConv_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetUOMConv_1_tWriteJSONField_1");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetUOMConv_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetUOMConv_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetUOMConv_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetUOMConv_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetUOMConv_1_row5Struct> queue_EQGetUOMConv_1_tWriteJSONField_1_In = (java.util.Queue<EQGetUOMConv_1_row5Struct>) globalMap.get("queue_EQGetUOMConv_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In = "EQGetUOMConv_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetUOMConv_1_tWriteJSONField_1_In==null?"":queue_EQGetUOMConv_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetUOMConv_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In) || !queue_EQGetUOMConv_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetUOMConv_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_In";
	
	

                    EQGetUOMConv_1_row5Struct result_EQGetUOMConv_1_tWriteJSONField_1_In = queue_EQGetUOMConv_1_tWriteJSONField_1_In.poll();
                    str_EQGetUOMConv_1_tWriteJSONField_1_In = result_EQGetUOMConv_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetUOMConv_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetUOMConv_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetUOMConv_1_tWriteJSONField_1_In = xmlSerializer_EQGetUOMConv_1_tWriteJSONField_1_In.read(str_EQGetUOMConv_1_tWriteJSONField_1_In);
        EQGetUOMConv_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetUOMConv_1_tWriteJSONField_1_In, jsonStandard_EQGetUOMConv_1_tWriteJSONField_1_In);
    
        nb_line_EQGetUOMConv_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetUOMConv_1_tWriteJSONField_1_In++;

/**
 * [EQGetUOMConv_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetUOMConv_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetUOMConv_1_row5","EQGetUOMConv_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetUOMConv_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetUOMConv_1_row5 - " + (EQGetUOMConv_1_row5==null? "": EQGetUOMConv_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetUOMConv_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetUOMConv_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetUOMConv_1_tRESTResponse_2 && responseAlreadySent_EQGetUOMConv_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetUOMConv_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetUOMConv_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetUOMConv_1_tRESTResponse_2 = EQGetUOMConv_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetUOMConv_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetUOMConv_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetUOMConv_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetUOMConv_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetUOMConv_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetUOMConv_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetUOMConv_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetUOMConv_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetUOMConv_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetUOMConv_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetUOMConv_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetUOMConv_1_tRESTResponse_2);
			restResponse_EQGetUOMConv_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetUOMConv_1_tRESTResponse_2);
			restResponse_EQGetUOMConv_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetUOMConv_1_tRESTResponse_2);
			restResponse_EQGetUOMConv_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetUOMConv_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetUOMConv_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetUOMConv_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetUOMConv_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetUOMConv_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetUOMConv_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetUOMConv_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetUOMConv_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetUOMConv_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetUOMConv_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetUOMConv_1_tRESTResponse_2);

				String responseContentType_EQGetUOMConv_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetUOMConv_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetUOMConv_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetUOMConv_1_tRESTResponse_2 = messageContext_EQGetUOMConv_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetUOMConv_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetUOMConv_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetUOMConv_1_tRESTResponse_2);

				String responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2 = responseMediaType_EQGetUOMConv_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetUOMConv_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetUOMConv_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetUOMConv_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetUOMConv_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2 = responseMediaType_EQGetUOMConv_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetUOMConv_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetUOMConv_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetUOMConv_1_tRESTResponse_2 = restProviderResponse_EQGetUOMConv_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetUOMConv_1_tRESTResponse_2 = messageContext_EQGetUOMConv_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetUOMConv_1_tRESTResponse_2 = messageBodyProviders_EQGetUOMConv_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetUOMConv_1_tRESTResponse_2, responseBodyClass_EQGetUOMConv_1_tRESTResponse_2, null, responseMediaType_EQGetUOMConv_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetUOMConv_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetUOMConv_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetUOMConv_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetUOMConv_1_tRESTResponse_2, responseBodyClass_EQGetUOMConv_1_tRESTResponse_2, responseBodyClass_EQGetUOMConv_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetUOMConv_1_tRESTResponse_2, null, outputStream_EQGetUOMConv_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetUOMConv_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetUOMConv_1_tRESTResponse_2).getBytes());
			outputStream_EQGetUOMConv_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetUOMConv_1_tRESTResponse_2++;

/**
 * [EQGetUOMConv_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetUOMConv_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetUOMConv_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In = "EQGetUOMConv_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetUOMConv_1_tWriteJSONField_1_In==null?"":queue_EQGetUOMConv_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetUOMConv_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetUOMConv_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetUOMConv_1_tWriteJSONField_1_In);
				log.debug("EQGetUOMConv_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetUOMConv_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetUOMConv_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetUOMConv_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetUOMConv_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetUOMConv_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetUOMConv_1_row5",2,0,
			 			"EQGetUOMConv_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetUOMConv_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetUOMConv_1_tRESTResponse_2", true);
end_Hash.put("EQGetUOMConv_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetUOMConv_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetUOMConv_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetUOMConv_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetUOMConv_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetUOMConv_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetUOMConv_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetUOMConv_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetUOMConv_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetUOMConv_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetValidItem_1_row5Struct implements routines.system.IPersistableRow<EQGetValidItem_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetValidItem_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetValidItem_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetValidItem_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetValidItem_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetValidItem_1_row5Struct EQGetValidItem_1_row5 = new EQGetValidItem_1_row5Struct();




	
	/**
	 * [EQGetValidItem_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetValidItem_1_tRESTResponse_2", false);
		start_Hash.put("EQGetValidItem_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetValidItem_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetValidItem_1_row5");
			
		int tos_count_EQGetValidItem_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetValidItem_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetValidItem_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetValidItem_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetValidItem_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetValidItem_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetValidItem_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetValidItem_1_tWriteJSONField_1");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetValidItem_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetValidItem_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetValidItem_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetValidItem_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetValidItem_1_row5Struct> queue_EQGetValidItem_1_tWriteJSONField_1_In = (java.util.Queue<EQGetValidItem_1_row5Struct>) globalMap.get("queue_EQGetValidItem_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In = "EQGetValidItem_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetValidItem_1_tWriteJSONField_1_In==null?"":queue_EQGetValidItem_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetValidItem_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In) || !queue_EQGetValidItem_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetValidItem_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_In";
	
	

                    EQGetValidItem_1_row5Struct result_EQGetValidItem_1_tWriteJSONField_1_In = queue_EQGetValidItem_1_tWriteJSONField_1_In.poll();
                    str_EQGetValidItem_1_tWriteJSONField_1_In = result_EQGetValidItem_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetValidItem_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetValidItem_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetValidItem_1_tWriteJSONField_1_In = xmlSerializer_EQGetValidItem_1_tWriteJSONField_1_In.read(str_EQGetValidItem_1_tWriteJSONField_1_In);
        EQGetValidItem_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetValidItem_1_tWriteJSONField_1_In, jsonStandard_EQGetValidItem_1_tWriteJSONField_1_In);
    
        nb_line_EQGetValidItem_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetValidItem_1_tWriteJSONField_1_In++;

/**
 * [EQGetValidItem_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetValidItem_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetValidItem_1_row5","EQGetValidItem_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetValidItem_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetValidItem_1_row5 - " + (EQGetValidItem_1_row5==null? "": EQGetValidItem_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetValidItem_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetValidItem_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetValidItem_1_tRESTResponse_2 && responseAlreadySent_EQGetValidItem_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetValidItem_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetValidItem_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetValidItem_1_tRESTResponse_2 = EQGetValidItem_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetValidItem_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetValidItem_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetValidItem_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetValidItem_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetValidItem_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetValidItem_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetValidItem_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetValidItem_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetValidItem_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetValidItem_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetValidItem_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetValidItem_1_tRESTResponse_2);
			restResponse_EQGetValidItem_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetValidItem_1_tRESTResponse_2);
			restResponse_EQGetValidItem_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetValidItem_1_tRESTResponse_2);
			restResponse_EQGetValidItem_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetValidItem_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetValidItem_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetValidItem_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetValidItem_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetValidItem_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetValidItem_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetValidItem_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetValidItem_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetValidItem_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetValidItem_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetValidItem_1_tRESTResponse_2);

				String responseContentType_EQGetValidItem_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetValidItem_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetValidItem_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetValidItem_1_tRESTResponse_2 = messageContext_EQGetValidItem_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetValidItem_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetValidItem_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetValidItem_1_tRESTResponse_2);

				String responseMediaSubType_EQGetValidItem_1_tRESTResponse_2 = responseMediaType_EQGetValidItem_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetValidItem_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetValidItem_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetValidItem_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetValidItem_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetValidItem_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetValidItem_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetValidItem_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetValidItem_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetValidItem_1_tRESTResponse_2 = responseMediaType_EQGetValidItem_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetValidItem_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetValidItem_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetValidItem_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetValidItem_1_tRESTResponse_2 = restProviderResponse_EQGetValidItem_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetValidItem_1_tRESTResponse_2 = messageContext_EQGetValidItem_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetValidItem_1_tRESTResponse_2 = messageBodyProviders_EQGetValidItem_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetValidItem_1_tRESTResponse_2, responseBodyClass_EQGetValidItem_1_tRESTResponse_2, null, responseMediaType_EQGetValidItem_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetValidItem_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetValidItem_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetValidItem_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetValidItem_1_tRESTResponse_2, responseBodyClass_EQGetValidItem_1_tRESTResponse_2, responseBodyClass_EQGetValidItem_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetValidItem_1_tRESTResponse_2, null, outputStream_EQGetValidItem_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetValidItem_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetValidItem_1_tRESTResponse_2).getBytes());
			outputStream_EQGetValidItem_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetValidItem_1_tRESTResponse_2++;

/**
 * [EQGetValidItem_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetValidItem_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetValidItem_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In = "EQGetValidItem_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetValidItem_1_tWriteJSONField_1_In==null?"":queue_EQGetValidItem_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetValidItem_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetValidItem_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetValidItem_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetValidItem_1_tWriteJSONField_1_In);
				log.debug("EQGetValidItem_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetValidItem_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetValidItem_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetValidItem_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetValidItem_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetValidItem_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetValidItem_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetValidItem_1_row5",2,0,
			 			"EQGetValidItem_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetValidItem_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetValidItem_1_tRESTResponse_2", true);
end_Hash.put("EQGetValidItem_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetValidItem_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetValidItem_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetValidItem_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetValidItem_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetValidItem_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetValidItem_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetValidItem_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetValidItem_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetValidItem_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetVariantState_1_row5Struct implements routines.system.IPersistableRow<EQGetVariantState_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetVariantState_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetVariantState_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetVariantState_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetVariantState_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetVariantState_1_row5Struct EQGetVariantState_1_row5 = new EQGetVariantState_1_row5Struct();




	
	/**
	 * [EQGetVariantState_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetVariantState_1_tRESTResponse_2", false);
		start_Hash.put("EQGetVariantState_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetVariantState_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetVariantState_1_row5");
			
		int tos_count_EQGetVariantState_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetVariantState_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetVariantState_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetVariantState_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetVariantState_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetVariantState_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetVariantState_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetVariantState_1_tWriteJSONField_1");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[]");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetVariantState_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetVariantState_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetVariantState_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetVariantState_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetVariantState_1_row5Struct> queue_EQGetVariantState_1_tWriteJSONField_1_In = (java.util.Queue<EQGetVariantState_1_row5Struct>) globalMap.get("queue_EQGetVariantState_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In = "EQGetVariantState_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetVariantState_1_tWriteJSONField_1_In==null?"":queue_EQGetVariantState_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetVariantState_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In) || !queue_EQGetVariantState_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetVariantState_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_In";
	
	

                    EQGetVariantState_1_row5Struct result_EQGetVariantState_1_tWriteJSONField_1_In = queue_EQGetVariantState_1_tWriteJSONField_1_In.poll();
                    str_EQGetVariantState_1_tWriteJSONField_1_In = result_EQGetVariantState_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetVariantState_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetVariantState_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetVariantState_1_tWriteJSONField_1_In = xmlSerializer_EQGetVariantState_1_tWriteJSONField_1_In.read(str_EQGetVariantState_1_tWriteJSONField_1_In);
        EQGetVariantState_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetVariantState_1_tWriteJSONField_1_In, jsonStandard_EQGetVariantState_1_tWriteJSONField_1_In);
    
        nb_line_EQGetVariantState_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetVariantState_1_tWriteJSONField_1_In++;

/**
 * [EQGetVariantState_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetVariantState_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetVariantState_1_row5","EQGetVariantState_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetVariantState_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetVariantState_1_row5 - " + (EQGetVariantState_1_row5==null? "": EQGetVariantState_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetVariantState_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetVariantState_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetVariantState_1_tRESTResponse_2 && responseAlreadySent_EQGetVariantState_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetVariantState_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetVariantState_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetVariantState_1_tRESTResponse_2 = EQGetVariantState_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetVariantState_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetVariantState_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetVariantState_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetVariantState_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetVariantState_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetVariantState_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetVariantState_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetVariantState_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetVariantState_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetVariantState_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetVariantState_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetVariantState_1_tRESTResponse_2);
			restResponse_EQGetVariantState_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetVariantState_1_tRESTResponse_2);
			restResponse_EQGetVariantState_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetVariantState_1_tRESTResponse_2);
			restResponse_EQGetVariantState_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetVariantState_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetVariantState_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetVariantState_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetVariantState_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetVariantState_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetVariantState_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetVariantState_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetVariantState_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetVariantState_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetVariantState_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetVariantState_1_tRESTResponse_2);

				String responseContentType_EQGetVariantState_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetVariantState_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetVariantState_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetVariantState_1_tRESTResponse_2 = messageContext_EQGetVariantState_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetVariantState_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetVariantState_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetVariantState_1_tRESTResponse_2);

				String responseMediaSubType_EQGetVariantState_1_tRESTResponse_2 = responseMediaType_EQGetVariantState_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetVariantState_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetVariantState_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetVariantState_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetVariantState_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetVariantState_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetVariantState_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetVariantState_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetVariantState_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetVariantState_1_tRESTResponse_2 = responseMediaType_EQGetVariantState_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetVariantState_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetVariantState_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetVariantState_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetVariantState_1_tRESTResponse_2 = restProviderResponse_EQGetVariantState_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetVariantState_1_tRESTResponse_2 = messageContext_EQGetVariantState_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetVariantState_1_tRESTResponse_2 = messageBodyProviders_EQGetVariantState_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetVariantState_1_tRESTResponse_2, responseBodyClass_EQGetVariantState_1_tRESTResponse_2, null, responseMediaType_EQGetVariantState_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetVariantState_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetVariantState_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetVariantState_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetVariantState_1_tRESTResponse_2, responseBodyClass_EQGetVariantState_1_tRESTResponse_2, responseBodyClass_EQGetVariantState_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetVariantState_1_tRESTResponse_2, null, outputStream_EQGetVariantState_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetVariantState_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetVariantState_1_tRESTResponse_2).getBytes());
			outputStream_EQGetVariantState_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetVariantState_1_tRESTResponse_2++;

/**
 * [EQGetVariantState_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetVariantState_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetVariantState_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In = "EQGetVariantState_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetVariantState_1_tWriteJSONField_1_In==null?"":queue_EQGetVariantState_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetVariantState_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetVariantState_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetVariantState_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetVariantState_1_tWriteJSONField_1_In);
				log.debug("EQGetVariantState_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetVariantState_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetVariantState_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetVariantState_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetVariantState_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetVariantState_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetVariantState_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetVariantState_1_row5",2,0,
			 			"EQGetVariantState_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetVariantState_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetVariantState_1_tRESTResponse_2", true);
end_Hash.put("EQGetVariantState_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetVariantState_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetVariantState_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetVariantState_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetVariantState_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetVariantState_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetVariantState_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetVariantState_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetVariantState_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetVariantState_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class EQGetSkinORPart_1_row5Struct implements routines.system.IPersistableRow<EQGetSkinORPart_1_row5Struct> {
    final static byte[] commonByteArrayLock_CPQ_enterpriseQuotingEndpoint = new byte[0];
    static byte[] commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}

				public Boolean bodyIsNullable(){
				    return true;
				}
				public Boolean bodyIsKey(){
				    return false;
				}
				public Integer bodyLength(){
				    return 0;
				}
				public Integer bodyPrecision(){
				    return 0;
				}
				public String bodyDefault(){
				
					return null;
				
				}
				public String bodyComment(){
				
				    return null;
				
				}
				public String bodyPattern(){
				
				    return null;
				
				}
				public String bodyOriginalDbColumnName(){
				
					return "body";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CPQ_enterpriseQuotingEndpoint.length) {
				if(length < 1024 && commonByteArray_CPQ_enterpriseQuotingEndpoint.length == 0) {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[1024];
				} else {
   					commonByteArray_CPQ_enterpriseQuotingEndpoint = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length);
			strReturn = new String(commonByteArray_CPQ_enterpriseQuotingEndpoint, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CPQ_enterpriseQuotingEndpoint) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(EQGetSkinORPart_1_row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void EQGetSkinORPart_1_tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "EQGetSkinORPart_1_tWriteJSONField_1_In");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		EQGetSkinORPart_1_row5Struct EQGetSkinORPart_1_row5 = new EQGetSkinORPart_1_row5Struct();




	
	/**
	 * [EQGetSkinORPart_1_tRESTResponse_2 begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSkinORPart_1_tRESTResponse_2", false);
		start_Hash.put("EQGetSkinORPart_1_tRESTResponse_2", System.currentTimeMillis());
		
	
	currentComponent="EQGetSkinORPart_1_tRESTResponse_2";
	
	
			runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,0,0,"EQGetSkinORPart_1_row5");
			
		int tos_count_EQGetSkinORPart_1_tRESTResponse_2 = 0;
		
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSkinORPart_1_tRESTResponse_2", "tRESTResponse_2", "tRESTResponse");
				talendJobLogProcess(globalMap);
			}
			

 



/**
 * [EQGetSkinORPart_1_tRESTResponse_2 begin ] stop
 */



	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_In", false);
		start_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	
		int tos_count_EQGetSkinORPart_1_tWriteJSONField_1_In = 0;
		
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tWriteJSONField_1_In - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_EQGetSkinORPart_1_tWriteJSONField_1_In{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In = new StringBuilder();
                    log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("Parameters:");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("JSONFIELD" + " = " + "body");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("DESTINATION" + " = " + "EQGetSkinORPart_1_tWriteJSONField_1");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("REMOVE_ROOT" + " = " + "true");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("GROUPBYS" + " = " + "[{OUTPUT_COLUMN="+("body")+", INPUT_COLUMN="+("Items")+"}]");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("QUOTE_ALL_VALUES" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("ALLOW_EMPTY_STRINGS" + " = " + "false");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append(" | ");
                            log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append("USE_SCIENTIFIC_NOTATION" + " = " + "true");
                        log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In.append(" | ");
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tWriteJSONField_1_In - "  + (log4jParamters_EQGetSkinORPart_1_tWriteJSONField_1_In) );
                    } 
                } 
            new BytesLimit65535_EQGetSkinORPart_1_tWriteJSONField_1_In().limitLog4jByte();
            }
			if(enableLogStash) {
				talendJobLog.addCM("EQGetSkinORPart_1_tWriteJSONField_1_In", "tWriteJSONField_1_In", "tWriteJSONFieldIn");
				talendJobLogProcess(globalMap);
			}
			

				int nb_line_EQGetSkinORPart_1_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In.setForceTopLevelObject(false);
			    xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In.setUseEmptyStrings(false);
			    xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In.setUseScientificNotation(true);
				
					   java.util.Queue<EQGetSkinORPart_1_row5Struct> queue_EQGetSkinORPart_1_tWriteJSONField_1_In = (java.util.Queue<EQGetSkinORPart_1_row5Struct>) globalMap.get("queue_EQGetSkinORPart_1_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In = "EQGetSkinORPart_1_tWriteJSONField_1_In_FINISH"+(queue_EQGetSkinORPart_1_tWriteJSONField_1_In==null?"":queue_EQGetSkinORPart_1_tWriteJSONField_1_In.hashCode());
				String str_EQGetSkinORPart_1_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In) || !queue_EQGetSkinORPart_1_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_EQGetSkinORPart_1_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	

                    EQGetSkinORPart_1_row5Struct result_EQGetSkinORPart_1_tWriteJSONField_1_In = queue_EQGetSkinORPart_1_tWriteJSONField_1_In.poll();
                    str_EQGetSkinORPart_1_tWriteJSONField_1_In = result_EQGetSkinORPart_1_tWriteJSONField_1_In.body;
                                EQGetSkinORPart_1_row5.body = result_EQGetSkinORPart_1_tWriteJSONField_1_In.body;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_EQGetSkinORPart_1_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In.setJsonStandard(jsonStandard_EQGetSkinORPart_1_tWriteJSONField_1_In);
        net.sf.json.JSON json_EQGetSkinORPart_1_tWriteJSONField_1_In = xmlSerializer_EQGetSkinORPart_1_tWriteJSONField_1_In.read(str_EQGetSkinORPart_1_tWriteJSONField_1_In);
        EQGetSkinORPart_1_row5.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_EQGetSkinORPart_1_tWriteJSONField_1_In, jsonStandard_EQGetSkinORPart_1_tWriteJSONField_1_In);
    
        nb_line_EQGetSkinORPart_1_tWriteJSONField_1_In++;

 


	tos_count_EQGetSkinORPart_1_tWriteJSONField_1_In++;

/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tRESTResponse_2 main ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tRESTResponse_2";
	
	
			if(runStat.update(execStat,enableLogStash,iterateId,1,1
				
					,"EQGetSkinORPart_1_row5","EQGetSkinORPart_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetSkinORPart_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse"
				
			)) {
				talendJobLogProcess(globalMap);
			}
			
    			if(log.isTraceEnabled()){
    				log.trace("EQGetSkinORPart_1_row5 - " + (EQGetSkinORPart_1_row5==null? "": EQGetSkinORPart_1_row5.toLogString()));
    			}
    		

	java.io.OutputStream outputStream_EQGetSkinORPart_1_tRESTResponse_2 = (java.io.OutputStream) globalMap.get("restResponseStream");
	boolean responseAlreadySent_EQGetSkinORPart_1_tRESTResponse_2 = globalMap.containsKey("restResponse");

	if (null == outputStream_EQGetSkinORPart_1_tRESTResponse_2 && responseAlreadySent_EQGetSkinORPart_1_tRESTResponse_2) {
		throw new RuntimeException("Rest response already sent.");
	} else if (!globalMap.containsKey("restRequest")) {
		throw new RuntimeException("Not received rest request yet.");
	} else {
		Integer restProviderStatusCode_EQGetSkinORPart_1_tRESTResponse_2 = 200;

		Object restProviderResponse_EQGetSkinORPart_1_tRESTResponse_2 = null;
		restProviderResponse_EQGetSkinORPart_1_tRESTResponse_2 = EQGetSkinORPart_1_row5.body;

		java.util.Map<String, String> restProviderResponseHeaders_EQGetSkinORPart_1_tRESTResponse_2 = new java.util.TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		java.lang.StringBuilder restProviderResponseHeader_cookies_EQGetSkinORPart_1_tRESTResponse_2 = new java.lang.StringBuilder();
		final String setCookieHeader = "Set-Cookie";

        if (restProviderResponseHeader_cookies_EQGetSkinORPart_1_tRESTResponse_2.length() > 0) {
		    restProviderResponseHeaders_EQGetSkinORPart_1_tRESTResponse_2.put(setCookieHeader, restProviderResponseHeader_cookies_EQGetSkinORPart_1_tRESTResponse_2.toString());
		}

        java.util.Map<String, Object> restRequest_EQGetSkinORPart_1_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap.get("restRequest");
        org.apache.cxf.jaxrs.ext.MessageContext messageContext_EQGetSkinORPart_1_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_EQGetSkinORPart_1_tRESTResponse_2.get("MESSAGE_CONTEXT");
        

		if (null == outputStream_EQGetSkinORPart_1_tRESTResponse_2) {
			java.util.Map<String, Object> restResponse_EQGetSkinORPart_1_tRESTResponse_2 = new java.util.HashMap<String, Object>();
			restResponse_EQGetSkinORPart_1_tRESTResponse_2.put("BODY", restProviderResponse_EQGetSkinORPart_1_tRESTResponse_2);
			restResponse_EQGetSkinORPart_1_tRESTResponse_2.put("STATUS", restProviderStatusCode_EQGetSkinORPart_1_tRESTResponse_2);
			restResponse_EQGetSkinORPart_1_tRESTResponse_2.put("HEADERS", restProviderResponseHeaders_EQGetSkinORPart_1_tRESTResponse_2);
			restResponse_EQGetSkinORPart_1_tRESTResponse_2.put("drop.json.root.element", Boolean.valueOf(false));
			globalMap.put("restResponse", restResponse_EQGetSkinORPart_1_tRESTResponse_2);
			
		} else {

			javax.ws.rs.core.MediaType responseMediaType_EQGetSkinORPart_1_tRESTResponse_2 = null;
			if (!responseAlreadySent_EQGetSkinORPart_1_tRESTResponse_2) {
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = ((org.apache.cxf.message.Message)restRequest_EQGetSkinORPart_1_tRESTResponse_2.get("CURRENT_MESSAGE"));
				}

				if (currentMessage != null && currentMessage.getExchange() != null) {
					currentMessage.getExchange().put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
				}

				messageContext_EQGetSkinORPart_1_tRESTResponse_2.put(org.apache.cxf.message.Message.RESPONSE_CODE, restProviderStatusCode_EQGetSkinORPart_1_tRESTResponse_2);
				javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_EQGetSkinORPart_1_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
				for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_EQGetSkinORPart_1_tRESTResponse_2.entrySet()) {
					headersMultivaluedMap_EQGetSkinORPart_1_tRESTResponse_2.putSingle(multivaluedHeader.getKey(), multivaluedHeader.getValue());
				}
				messageContext_EQGetSkinORPart_1_tRESTResponse_2.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS, headersMultivaluedMap_EQGetSkinORPart_1_tRESTResponse_2);

				String responseContentType_EQGetSkinORPart_1_tRESTResponse_2 = null;
				
				if (currentMessage != null && currentMessage.getExchange() != null) {
					responseContentType_EQGetSkinORPart_1_tRESTResponse_2 = (String) currentMessage.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
				}
					
				if (null == responseContentType_EQGetSkinORPart_1_tRESTResponse_2) {
					// this should not be needed, just in case. set it to the first value in the sorted list returned from HttpHeaders
					responseMediaType_EQGetSkinORPart_1_tRESTResponse_2 = messageContext_EQGetSkinORPart_1_tRESTResponse_2.getHttpHeaders().getAcceptableMediaTypes().get(0);
				} else {
					responseMediaType_EQGetSkinORPart_1_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils.toMediaType(responseContentType_EQGetSkinORPart_1_tRESTResponse_2);
				}
				globalMap.put("restResponseMediaType", responseMediaType_EQGetSkinORPart_1_tRESTResponse_2);

				String responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2 = responseMediaType_EQGetSkinORPart_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2.equals("xml") || responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2.endsWith("+xml")) {
					outputStream_EQGetSkinORPart_1_tRESTResponse_2.write("<wrapper>".getBytes());
					globalMap.put("restResponseWrappingClosure", "</wrapper>");
				}
				if (responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2.endsWith("+json")) {
					outputStream_EQGetSkinORPart_1_tRESTResponse_2.write("[".getBytes());
					globalMap.put("restResponseWrappingClosure", "]");
				}

				globalMap.put("restResponse", true);
			} else {
				responseMediaType_EQGetSkinORPart_1_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap.get("restResponseMediaType");
			}

			if (null != restProviderResponse_EQGetSkinORPart_1_tRESTResponse_2) {
				String responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2 = responseMediaType_EQGetSkinORPart_1_tRESTResponse_2.getSubtype();
				if (responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2.equals("json") || responseMediaSubType_EQGetSkinORPart_1_tRESTResponse_2.endsWith("+json")) {
					if (globalMap.containsKey("restResponseJsonStarted")) {
						outputStream_EQGetSkinORPart_1_tRESTResponse_2.write(",".getBytes());
					} else {
						globalMap.put("restResponseJsonStarted", true);
					}
				}

				Class<? extends Object> responseBodyClass_EQGetSkinORPart_1_tRESTResponse_2 = restProviderResponse_EQGetSkinORPart_1_tRESTResponse_2.getClass();
				javax.ws.rs.ext.Providers messageBodyProviders_EQGetSkinORPart_1_tRESTResponse_2 = messageContext_EQGetSkinORPart_1_tRESTResponse_2.getProviders();
				javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_EQGetSkinORPart_1_tRESTResponse_2 = messageBodyProviders_EQGetSkinORPart_1_tRESTResponse_2.getMessageBodyWriter(
						responseBodyClass_EQGetSkinORPart_1_tRESTResponse_2, responseBodyClass_EQGetSkinORPart_1_tRESTResponse_2, null, responseMediaType_EQGetSkinORPart_1_tRESTResponse_2);

                if (messageBodyWriter_EQGetSkinORPart_1_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
                    ((StreamingDOM4JProvider)messageBodyWriter_EQGetSkinORPart_1_tRESTResponse_2).setGlobalMap(globalMap);
                }

				messageBodyWriter_EQGetSkinORPart_1_tRESTResponse_2.writeTo(restProviderResponse_EQGetSkinORPart_1_tRESTResponse_2, responseBodyClass_EQGetSkinORPart_1_tRESTResponse_2, responseBodyClass_EQGetSkinORPart_1_tRESTResponse_2,
						new java.lang.annotation.Annotation[] {}, responseMediaType_EQGetSkinORPart_1_tRESTResponse_2, null, outputStream_EQGetSkinORPart_1_tRESTResponse_2);
			}
			// initial variant
			//outputStream_EQGetSkinORPart_1_tRESTResponse_2.write(String.valueOf(restProviderResponse_EQGetSkinORPart_1_tRESTResponse_2).getBytes());
			outputStream_EQGetSkinORPart_1_tRESTResponse_2.flush();
		}
	}

 


	tos_count_EQGetSkinORPart_1_tRESTResponse_2++;

/**
 * [EQGetSkinORPart_1_tRESTResponse_2 main ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tRESTResponse_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetSkinORPart_1_tRESTResponse_2 process_data_begin ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tRESTResponse_2 process_data_end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetSkinORPart_1_tRESTResponse_2 process_data_end ] stop
 */



	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In = "EQGetSkinORPart_1_tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_EQGetSkinORPart_1_tWriteJSONField_1_In==null?"":queue_EQGetSkinORPart_1_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_EQGetSkinORPart_1_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_EQGetSkinORPart_1_tWriteJSONField_1_In);
			
globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_NB_LINE",nb_line_EQGetSkinORPart_1_tWriteJSONField_1_In);
				log.debug("EQGetSkinORPart_1_tWriteJSONField_1_In - Processed records count: " + nb_line_EQGetSkinORPart_1_tWriteJSONField_1_In + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("EQGetSkinORPart_1_tWriteJSONField_1_In - "  + ("Done.") );

ok_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_In", true);
end_Hash.put("EQGetSkinORPart_1_tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tRESTResponse_2 end ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tRESTResponse_2";
	
	

			 		if(runStat.updateStatAndLog(execStat,enableLogStash,resourceMap,iterateId,"EQGetSkinORPart_1_row5",2,0,
			 			"EQGetSkinORPart_1_tWriteJSONField_1_In","tWriteJSONField_1_In","tWriteJSONFieldIn","EQGetSkinORPart_1_tRESTResponse_2","tRESTResponse_2","tRESTResponse","output")) {
						talendJobLogProcess(globalMap);
					}
				
 

ok_Hash.put("EQGetSkinORPart_1_tRESTResponse_2", true);
end_Hash.put("EQGetSkinORPart_1_tRESTResponse_2", System.currentTimeMillis());




/**
 * [EQGetSkinORPart_1_tRESTResponse_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [EQGetSkinORPart_1_tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	currentComponent="EQGetSkinORPart_1_tWriteJSONField_1_In";
	
	

 



/**
 * [EQGetSkinORPart_1_tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [EQGetSkinORPart_1_tRESTResponse_2 finally ] start
	 */

	

	
	
	currentComponent="EQGetSkinORPart_1_tRESTResponse_2";
	
	

 



/**
 * [EQGetSkinORPart_1_tRESTResponse_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("EQGetSkinORPart_1_tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	

public void talendJobLogProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendJobLog_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		org.slf4j.MDC.put("_subJobName", "talendJobLog");
		org.slf4j.MDC.put("_subJobPid", TalendString.getAsciiRandomString(6));
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [talendJobLog begin ] start
	 */

	

	
		
		ok_Hash.put("talendJobLog", false);
		start_Hash.put("talendJobLog", System.currentTimeMillis());
		
	
	currentComponent="talendJobLog";
	
	
		int tos_count_talendJobLog = 0;
		

	for (JobStructureCatcherUtils.JobStructureCatcherMessage jcm : talendJobLog.getMessages()) {
		org.talend.job.audit.JobContextBuilder builder_talendJobLog = org.talend.job.audit.JobContextBuilder.create().jobName(jcm.job_name).jobId(jcm.job_id).jobVersion(jcm.job_version)
			.custom("process_id", jcm.pid).custom("thread_id", jcm.tid).custom("pid", pid).custom("father_pid", fatherPid).custom("root_pid", rootPid);
		org.talend.logging.audit.Context log_context_talendJobLog = null;
		
		
		if(jcm.log_type == JobStructureCatcherUtils.LogType.PERFORMANCE){
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.sourceId(jcm.sourceId).sourceLabel(jcm.sourceLabel).sourceConnectorType(jcm.sourceComponentName)
				.targetId(jcm.targetId).targetLabel(jcm.targetLabel).targetConnectorType(jcm.targetComponentName)
				.connectionName(jcm.current_connector).rows(jcm.row_count).duration(duration).build();
			auditLogger_talendJobLog.flowExecution(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBSTART) {
			log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment).build();
			auditLogger_talendJobLog.jobstart(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBEND) {
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
		
			log_context_talendJobLog = builder_talendJobLog
				.timestamp(jcm.moment).duration(duration).status(jcm.status).build();
			auditLogger_talendJobLog.jobstop(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.RUNCOMPONENT) {
			log_context_talendJobLog = builder_talendJobLog.timestamp(jcm.moment)
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label).build();
			auditLogger_talendJobLog.runcomponent(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.FLOWINPUT) {//log current component input line
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label)
				.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
				.rows(jcm.total_row_number).duration(duration).build();
			auditLogger_talendJobLog.flowInput(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.FLOWOUTPUT) {//log current component output/reject line
			long timeMS = jcm.end_time - jcm.start_time;
			String duration = String.valueOf(timeMS);
			
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_name).connectorId(jcm.component_id).connectorLabel(jcm.component_label)
				.connectionName(jcm.current_connector).connectionType(jcm.current_connector_type)
				.rows(jcm.total_row_number).duration(duration).build();
			auditLogger_talendJobLog.flowOutput(log_context_talendJobLog);
		} else if(jcm.log_type == JobStructureCatcherUtils.LogType.JOBERROR) {
			java.lang.Exception e_talendJobLog = jcm.exception;
			if(e_talendJobLog!=null) {
				try(java.io.StringWriter sw_talendJobLog = new java.io.StringWriter();java.io.PrintWriter pw_talendJobLog = new java.io.PrintWriter(sw_talendJobLog)) {
					e_talendJobLog.printStackTrace(pw_talendJobLog);
					builder_talendJobLog.custom("stacktrace", sw_talendJobLog.getBuffer().substring(0,java.lang.Math.min(sw_talendJobLog.getBuffer().length(), 512)));
				}
			}

			if(jcm.extra_info!=null) {
				builder_talendJobLog.connectorId(jcm.component_id).custom("extra_info", jcm.extra_info);
			}
				
			log_context_talendJobLog = builder_talendJobLog
				.connectorType(jcm.component_id.substring(0, jcm.component_id.lastIndexOf('_')))
				.connectorId(jcm.component_id)
				.connectorLabel(jcm.component_label == null ? jcm.component_id : jcm.component_label).build();

			auditLogger_talendJobLog.exception(log_context_talendJobLog);
		}
		
		
		
	}

 



/**
 * [talendJobLog begin ] stop
 */
	
	/**
	 * [talendJobLog main ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 


	tos_count_talendJobLog++;

/**
 * [talendJobLog main ] stop
 */
	
	/**
	 * [talendJobLog process_data_begin ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog process_data_begin ] stop
 */
	
	/**
	 * [talendJobLog process_data_end ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog process_data_end ] stop
 */
	
	/**
	 * [talendJobLog end ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 

ok_Hash.put("talendJobLog", true);
end_Hash.put("talendJobLog", System.currentTimeMillis());




/**
 * [talendJobLog end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendJobLog finally ] start
	 */

	

	
	
	currentComponent="talendJobLog";
	
	

 



/**
 * [talendJobLog finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendJobLog_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "DEV";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();

    public static void main(String[] args){
        final enterpriseQuotingEndpoint enterpriseQuotingEndpointClass = new enterpriseQuotingEndpoint();

        int exitCode = enterpriseQuotingEndpointClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'enterpriseQuotingEndpoint' - Done.");
	        }

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try {
            	jobInfo.load(new java.io.FileInputStream(jobInfoFile));
            } catch (IOException e) {
            	 
                log.debug("Read jobInfo.properties file fail: " + e.getMessage());
                
            }
        }
		log.info(String.format("Project name: %s\tJob name: %s\tGIT Commit ID: %s\tTalend Version: %s",
				projectName,jobName,jobInfo.getProperty("gitCommitId"), "8.0.1.20221116_1301-patch"));
		
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
			}

	        getjobInfo();
			log.info("TalendJob: 'enterpriseQuotingEndpoint' - Start.");
		

                java.util.Set<Object> jobInfoKeys = jobInfo.keySet();
                for(Object jobInfoKey: jobInfoKeys) {
                    org.slf4j.MDC.put("_" + jobInfoKey.toString(), jobInfo.get(jobInfoKey).toString());
                }
                org.slf4j.MDC.put("_pid", pid);
                org.slf4j.MDC.put("_rootPid", rootPid);
                org.slf4j.MDC.put("_fatherPid", fatherPid);
                org.slf4j.MDC.put("_projectName", projectName);
                org.slf4j.MDC.put("_startTimestamp",java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC ).format( java.time.format.DateTimeFormatter.ISO_INSTANT ));
                org.slf4j.MDC.put("_jobRepositoryId","_CdHrwAkcEe2JFL1ygMx--g");
                org.slf4j.MDC.put("_compiledAtTimestamp","2022-12-14T18:20:54.728640500Z");

                java.lang.management.RuntimeMXBean mx = java.lang.management.ManagementFactory.getRuntimeMXBean();
                String[] mxNameTable = mx.getName().split("@"); //$NON-NLS-1$
                if (mxNameTable.length == 2) {
                    org.slf4j.MDC.put("_systemPid", mxNameTable[0]);
                } else {
                    org.slf4j.MDC.put("_systemPid", String.valueOf(java.lang.Thread.currentThread().getId()));
                }

		
		
			if(enableLogStash) {
				java.util.Properties properties_talendJobLog = new java.util.Properties();
				properties_talendJobLog.setProperty("root.logger", "audit");
				properties_talendJobLog.setProperty("encoding", "UTF-8");
				properties_talendJobLog.setProperty("application.name", "Talend Studio");
				properties_talendJobLog.setProperty("service.name", "Talend Studio Job");
				properties_talendJobLog.setProperty("instance.name", "Talend Studio Job Instance");
				properties_talendJobLog.setProperty("propagate.appender.exceptions", "none");
				properties_talendJobLog.setProperty("log.appender", "file");
				properties_talendJobLog.setProperty("appender.file.path", "audit.json");
				properties_talendJobLog.setProperty("appender.file.maxsize", "52428800");
				properties_talendJobLog.setProperty("appender.file.maxbackup", "20");
				properties_talendJobLog.setProperty("host", "false");

				System.getProperties().stringPropertyNames().stream()
					.filter(it -> it.startsWith("audit.logger."))
					.forEach(key -> properties_talendJobLog.setProperty(key.substring("audit.logger.".length()), System.getProperty(key)));

				
				
				
				org.apache.logging.log4j.core.config.Configurator.setLevel(properties_talendJobLog.getProperty("root.logger"), org.apache.logging.log4j.Level.DEBUG);
				
				auditLogger_talendJobLog = org.talend.job.audit.JobEventAuditLoggerFactory.createJobAuditLogger(properties_talendJobLog);
			}
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

            org.slf4j.MDC.put("_pid", pid);

        if (rootPid==null) {
            rootPid = pid;
        }

            org.slf4j.MDC.put("_rootPid", rootPid);

        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }
            org.slf4j.MDC.put("_fatherPid", fatherPid);

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = enterpriseQuotingEndpoint.class.getClassLoader().getResourceAsStream("cpq/enterprisequotingendpoint_0_5/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = enterpriseQuotingEndpoint.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("Azure_DW_DB", "id_String");
                        if(context.getStringValue("Azure_DW_DB") == null) {
                            context.Azure_DW_DB = null;
                        } else {
                            context.Azure_DW_DB=(String) context.getProperty("Azure_DW_DB");
                        }
                        context.setContextType("Azure_DW_Password", "id_Password");
                        if(context.getStringValue("Azure_DW_Password") == null) {
                            context.Azure_DW_Password = null;
                        } else {
                            String pwd_Azure_DW_Password_value = context.getProperty("Azure_DW_Password");
                            context.Azure_DW_Password = null;
                            if(pwd_Azure_DW_Password_value!=null) {
                                if(context_param.containsKey("Azure_DW_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Azure_DW_Password = pwd_Azure_DW_Password_value;
                                } else if (!pwd_Azure_DW_Password_value.isEmpty()) {
                                    try {
                                        context.Azure_DW_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Azure_DW_Password_value);
                                        context.put("Azure_DW_Password",context.Azure_DW_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("Azure_DW_Schema", "id_String");
                        if(context.getStringValue("Azure_DW_Schema") == null) {
                            context.Azure_DW_Schema = null;
                        } else {
                            context.Azure_DW_Schema=(String) context.getProperty("Azure_DW_Schema");
                        }
                        context.setContextType("Azure_DW_Server", "id_String");
                        if(context.getStringValue("Azure_DW_Server") == null) {
                            context.Azure_DW_Server = null;
                        } else {
                            context.Azure_DW_Server=(String) context.getProperty("Azure_DW_Server");
                        }
                        context.setContextType("Azure_DW_User", "id_String");
                        if(context.getStringValue("Azure_DW_User") == null) {
                            context.Azure_DW_User = null;
                        } else {
                            context.Azure_DW_User=(String) context.getProperty("Azure_DW_User");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Azure_DW_DB")) {
                context.Azure_DW_DB = (String) parentContextMap.get("Azure_DW_DB");
            }if (parentContextMap.containsKey("Azure_DW_Password")) {
                context.Azure_DW_Password = (java.lang.String) parentContextMap.get("Azure_DW_Password");
            }if (parentContextMap.containsKey("Azure_DW_Schema")) {
                context.Azure_DW_Schema = (String) parentContextMap.get("Azure_DW_Schema");
            }if (parentContextMap.containsKey("Azure_DW_Server")) {
                context.Azure_DW_Server = (String) parentContextMap.get("Azure_DW_Server");
            }if (parentContextMap.containsKey("Azure_DW_User")) {
                context.Azure_DW_User = (String) parentContextMap.get("Azure_DW_User");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Azure_DW_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));

            org.slf4j.MDC.put("_context", contextStr);
            log.info("TalendJob: 'enterpriseQuotingEndpoint' - Started.");

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




		if(enableLogStash) {
	        talendJobLog.addJobStartMessage();
	        try {
	            talendJobLogProcess(globalMap);
	        } catch (java.lang.Exception e) {
	            e.printStackTrace();
	        }
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRESTRequest_1_LoopProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRESTRequest_1_Loop) {
globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", -1);

e_tRESTRequest_1_Loop.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : enterpriseQuotingEndpoint");
        }
		if(enableLogStash) {
	        talendJobLog.addJobEndMessage(startTime, end, status);
	        try {
	            talendJobLogProcess(globalMap);
	        } catch (java.lang.Exception e) {
	            e.printStackTrace();
	        }
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


        org.slf4j.MDC.remove("_subJobName");
        org.slf4j.MDC.remove("_subJobPid");
        org.slf4j.MDC.remove("_systemPid");
        log.info("TalendJob: 'enterpriseQuotingEndpoint' - Finished - status: " + status + " returnCode: " + returnCode );

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     2185611 characters generated by Talend Cloud API Services Platform 
 *     on the December 14, 2022 at 1:20:54 PM EST
 ************************************************************************************************/
